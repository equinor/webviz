name: webviz

on:
  push:
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  frontend:
    runs-on: ubuntu-latest

    steps:
      - name: üìñ Checkout commit locally
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: ‚ÑπÔ∏è Node and npm versions
        run: |
          node -v
          npm -v

      - name: üì¶ Install build dependencies
        working-directory: ./frontend
        run: |
          npm ci --include=dev

      - name: ‚ÑπÔ∏è Installed npm packages (depth = 0)
        working-directory: ./frontend
        run: npm list --depth=0

      - name: üèóÔ∏è Build JavaScript bundle
        working-directory: ./frontend
        run: npm run build

      - name: üïµÔ∏è Check code style, linting & dependencies
        working-directory: ./frontend
        run: |
          npm run validate

      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: |
          npx playwright install --with-deps

      - name: ü§ñ Run unit tests
        working-directory: ./frontend
        run: |
          npm run test:unit

      - name: ü§ñ Run component tests
        working-directory: ./frontend
        run: |
          npm run test:ct

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: üïµÔ∏è Check auto-generated frontend code is in sync with backend
        run: |
          docker build -f ./backend_py/primary/Dockerfile -t backend:latest .
          CONTAINER_ID=$(docker run --detach -p 5000:5000 --env UVICORN_PORT=5000 --env WEBVIZ_CLIENT_SECRET=0 --env WEBVIZ_SMDA_SUBSCRIPTION_KEY=0 --env WEBVIZ_SMDA_RESOURCE_SCOPE=0 --env WEBVIZ_VDS_HOST_ADDRESS=0 --env WEBVIZ_ENTERPRISE_SUBSCRIPTION_KEY=0 --env WEBVIZ_SSDL_RESOURCE_SCOPE=0 backend:latest)
          sleep 10  # Ensure the backend server is up and running exposing /openapi.json
          npm run generate-api --prefix ./frontend
          docker stop $CONTAINER_ID
          git diff --exit-code ./frontend/src/api || exit 1

  backend:
    runs-on: ubuntu-latest

    steps:
      - name: üìñ Checkout commit locally
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip

      - name: üì¶ Install poetry and dependencies
        working-directory: ./backend_py/primary
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry lock --check --no-update  # Check lock file is consistent with pyproject.toml
          poetry install --with dev

      - name: üïµÔ∏è Check code style & linting
        working-directory: ./backend_py/primary
        run: |
          set -x
          black --check primary/ tests/
          pylint primary/ tests/
          bandit --recursive primary/
          mypy primary/ tests/

      - name: ü§ñ Run tests
        working-directory: ./backend_py/primary
        env:
          WEBVIZ_CLIENT_SECRET: 0
          WEBVIZ_SMDA_SUBSCRIPTION_KEY: 0
          WEBVIZ_SMDA_RESOURCE_SCOPE: 0
          WEBVIZ_VDS_HOST_ADDRESS: 0
          WEBVIZ_ENTERPRISE_SUBSCRIPTION_KEY: 0
          WEBVIZ_SSDL_RESOURCE_SCOPE: 0
        run: |
          pytest ./tests/unit

  go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.x"
      - name: Install dependencies
        working-directory: ./backend_go/surface_query
        run: |
          go get .
      - name: Test with Go
        working-directory: ./backend_go/surface_query
        run: |
          go test ./...

  build_docker_images:
    runs-on: ubuntu-latest

    steps:
      - name: üìñ Checkout commit locally
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üê≥ Verify Docker images build
        run: |
          docker build -f frontend-prod.Dockerfile .
          docker build -f ./backend_py/primary/Dockerfile .
