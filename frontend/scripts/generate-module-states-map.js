#!/usr/bin/env node

import fs from "fs";
import path from "path";
import glob from "fast-glob";

function sanitize(name) {
    const sanitized = name.replace(/[^a-zA-Z0-9]/g, "");
    return /^[0-9]/.test(sanitized) ? `M_${sanitized}` : sanitized;
}

export async function generateModuleSerializedStateMap() {
    const settingsFiles = await glob("src/modules/[^_]*/settings/persistence.ts", { cwd: process.cwd() });
    const viewFiles = await glob("src/modules/[^_]*/view/persistence.ts", { cwd: process.cwd() });

    const outputLines = [];
    const viewMap = new Map();
    const settingsMap = new Map();
    const modules = new Set();

    const moduleFolders = await glob("src/modules/!(_*)/", { onlyDirectories: true, cwd: process.cwd() });

    for (const folder of moduleFolders) {
        const match = folder.match(/src\/modules\/([^/]+)(\/)?$/);
        if (!match) continue;

        const moduleName = match[1];
        modules.add(moduleName);
    }

    for (const file of settingsFiles) {
        const match = file.match(/src\/modules\/([^/]+)\/settings\/persistence\.ts$/);
        if (!match) continue;

        const moduleName = match[1];
        const alias = `${sanitize(moduleName)}Settings`;
        settingsMap.set(moduleName, alias);

        outputLines.push(
            `import type { SerializedSettings as ${alias} } from "@modules/${moduleName}/settings/persistence";`,
        );
    }

    for (const file of viewFiles) {
        const match = file.match(/src\/modules\/([^/]+)\/view\/persistence\.ts$/);
        if (!match) continue;

        const moduleName = match[1];
        const alias = `${sanitize(moduleName)}View`;
        viewMap.set(moduleName, alias);

        outputLines.push(`import type { SerializedView as ${alias} } from "@modules/${moduleName}/view/persistence";`);
    }

    console.log("ðŸ§ª Matched modules:", Array.from(modules));

    console.log("ðŸ§ª Found settings files:", settingsFiles);
    console.log("ðŸ§ª Found view files:", viewFiles);

    const sortedModules = Array.from(modules).sort();
    const mapEntries = [];

    for (const moduleName of sortedModules) {
        const settingsAlias = settingsMap.get(moduleName) ? `${sanitize(moduleName)}Settings` : "never";
        const viewAlias = viewMap.get(moduleName) ? `${sanitize(moduleName)}View` : "never";

        mapEntries.push(
            `  "${moduleName}": {\n` +
                `    settings?: ${settingsAlias === "never" ? "never" : `Partial<${settingsAlias}>`},\n` +
                `    view?: ${viewAlias === "never" ? "never" : `Partial<${viewAlias}>`},\n` +
                `  },`,
        );
    }

    const fileContent =
        `// AUTO-GENERATED FILE. DO NOT EDIT.\n` +
        `// Generated by generateModuleSerializedStateMap CLI\n\n` +
        `${outputLines.join("\n")}\n\n` +
        `export type ModuleSerializedStateMap = {\n${mapEntries.join("\n")}\n};\n`;

    const outPath = path.resolve("src/modules/ModuleSerializedStateMap.ts");
    fs.mkdirSync(path.dirname(outPath), { recursive: true });
    fs.writeFileSync(outPath, fileContent + "\n", "utf-8");

    console.log(`[CLI] âœ… ModuleSerializedStateMap written to ${outPath}`);
}

generateModuleSerializedStateMap();
