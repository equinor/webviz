// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, getFields, getCases, getEnsembles, getEnsembleDetails, getVectorList, getRealizationsVectorData, getTimestampsList, getHistoricalVectorData, getStatisticalVectorData, getStatisticalVectorDataPerSensitivity, getRealizationVectorAtTimestamp, getTableDefinitions, postGetAggregatedPerRealizationTableData, postGetAggregatedStatisticalTableData, getRealizationSurfacesMetadata, getObservedSurfacesMetadata, getSurfaceData, postGetSurfaceIntersection, postSampleSurfaceInPoints, getDeltaSurfaceData, getMisfitSurfaceData, getParameterNamesAndDescription, getParameter, getParameters, isSensitivityRun, getSensitivities, getGridModelsInfo, isGridGeometryShared, gridSurface, gridParameter, postGetPolylineIntersection, getRealizationGroupTreeData, tableData, realizationsTablesAreEqual, getWellCompletionsData, getDrilledWellboreHeaders, getFieldWellTrajectories, getWellTrajectories, getWellborePicksAndStratigraphicUnits, getWellboreCompletions, getWellboreCasings, getWellborePerforations, getWellboreLogCurveHeaders, getLogCurveData, getSeismicCubeMetaList, postGetSeismicFence, getPolygonsDirectory, getPolygonsData, userInfo, getObservations, getRftInfo, getRealizationData, getVfpTableNames, getVfpTable, loginRoute, authorizedCallbackRoute, alive, aliveProtected, loggedInUser, root } from '../sdk.gen';
import type { GetCasesData_api, GetEnsemblesData_api, GetEnsembleDetailsData_api, GetVectorListData_api, GetRealizationsVectorDataData_api, GetTimestampsListData_api, GetHistoricalVectorDataData_api, GetStatisticalVectorDataData_api, GetStatisticalVectorDataPerSensitivityData_api, GetRealizationVectorAtTimestampData_api, GetTableDefinitionsData_api, PostGetAggregatedPerRealizationTableDataData_api, PostGetAggregatedPerRealizationTableDataError_api, PostGetAggregatedPerRealizationTableDataResponse_api, PostGetAggregatedStatisticalTableDataData_api, PostGetAggregatedStatisticalTableDataError_api, PostGetAggregatedStatisticalTableDataResponse_api, GetRealizationSurfacesMetadataData_api, GetObservedSurfacesMetadataData_api, GetSurfaceDataData_api, PostGetSurfaceIntersectionData_api, PostGetSurfaceIntersectionError_api, PostGetSurfaceIntersectionResponse_api, PostSampleSurfaceInPointsData_api, PostSampleSurfaceInPointsError_api, PostSampleSurfaceInPointsResponse_api, GetDeltaSurfaceDataData_api, GetMisfitSurfaceDataData_api, GetParameterNamesAndDescriptionData_api, GetParameterData_api, GetParametersData_api, IsSensitivityRunData_api, GetSensitivitiesData_api, GetGridModelsInfoData_api, IsGridGeometrySharedData_api, GridSurfaceData_api, GridParameterData_api, PostGetPolylineIntersectionData_api, PostGetPolylineIntersectionError_api, PostGetPolylineIntersectionResponse_api, GetRealizationGroupTreeDataData_api, TableDataData_api, RealizationsTablesAreEqualData_api, GetWellCompletionsDataData_api, GetDrilledWellboreHeadersData_api, GetFieldWellTrajectoriesData_api, GetWellTrajectoriesData_api, GetWellborePicksAndStratigraphicUnitsData_api, GetWellboreCompletionsData_api, GetWellboreCasingsData_api, GetWellborePerforationsData_api, GetWellboreLogCurveHeadersData_api, GetLogCurveDataData_api, GetSeismicCubeMetaListData_api, PostGetSeismicFenceData_api, PostGetSeismicFenceError_api, PostGetSeismicFenceResponse_api, GetPolygonsDirectoryData_api, GetPolygonsDataData_api, UserInfoData_api, GetObservationsData_api, GetRftInfoData_api, GetRealizationDataData_api, GetVfpTableNamesData_api, GetVfpTableData_api, LoginRouteData_api, LoggedInUserData_api } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getFieldsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getFields', options)
];

export const getFieldsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFieldsQueryKey(options)
    });
};

export const getCasesQueryKey = (options: OptionsLegacyParser<GetCasesData_api>) => [
    createQueryKey('getCases', options)
];

export const getCasesOptions = (options: OptionsLegacyParser<GetCasesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCases({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCasesQueryKey(options)
    });
};

export const getEnsemblesQueryKey = (options: OptionsLegacyParser<GetEnsemblesData_api>) => [
    createQueryKey('getEnsembles', options)
];

export const getEnsemblesOptions = (options: OptionsLegacyParser<GetEnsemblesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnsembles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEnsemblesQueryKey(options)
    });
};

export const getEnsembleDetailsQueryKey = (options: OptionsLegacyParser<GetEnsembleDetailsData_api>) => [
    createQueryKey('getEnsembleDetails', options)
];

export const getEnsembleDetailsOptions = (options: OptionsLegacyParser<GetEnsembleDetailsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnsembleDetails({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEnsembleDetailsQueryKey(options)
    });
};

export const getVectorListQueryKey = (options: OptionsLegacyParser<GetVectorListData_api>) => [
    createQueryKey('getVectorList', options)
];

export const getVectorListOptions = (options: OptionsLegacyParser<GetVectorListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVectorList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getVectorListQueryKey(options)
    });
};

export const getRealizationsVectorDataQueryKey = (options: OptionsLegacyParser<GetRealizationsVectorDataData_api>) => [
    createQueryKey('getRealizationsVectorData', options)
];

export const getRealizationsVectorDataOptions = (options: OptionsLegacyParser<GetRealizationsVectorDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationsVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRealizationsVectorDataQueryKey(options)
    });
};

export const getTimestampsListQueryKey = (options: OptionsLegacyParser<GetTimestampsListData_api>) => [
    createQueryKey('getTimestampsList', options)
];

export const getTimestampsListOptions = (options: OptionsLegacyParser<GetTimestampsListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTimestampsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTimestampsListQueryKey(options)
    });
};

export const getHistoricalVectorDataQueryKey = (options: OptionsLegacyParser<GetHistoricalVectorDataData_api>) => [
    createQueryKey('getHistoricalVectorData', options)
];

export const getHistoricalVectorDataOptions = (options: OptionsLegacyParser<GetHistoricalVectorDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHistoricalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHistoricalVectorDataQueryKey(options)
    });
};

export const getStatisticalVectorDataQueryKey = (options: OptionsLegacyParser<GetStatisticalVectorDataData_api>) => [
    createQueryKey('getStatisticalVectorData', options)
];

export const getStatisticalVectorDataOptions = (options: OptionsLegacyParser<GetStatisticalVectorDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatisticalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatisticalVectorDataQueryKey(options)
    });
};

export const getStatisticalVectorDataPerSensitivityQueryKey = (options: OptionsLegacyParser<GetStatisticalVectorDataPerSensitivityData_api>) => [
    createQueryKey('getStatisticalVectorDataPerSensitivity', options)
];

export const getStatisticalVectorDataPerSensitivityOptions = (options: OptionsLegacyParser<GetStatisticalVectorDataPerSensitivityData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatisticalVectorDataPerSensitivity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatisticalVectorDataPerSensitivityQueryKey(options)
    });
};

export const getRealizationVectorAtTimestampQueryKey = (options: OptionsLegacyParser<GetRealizationVectorAtTimestampData_api>) => [
    createQueryKey('getRealizationVectorAtTimestamp', options)
];

export const getRealizationVectorAtTimestampOptions = (options: OptionsLegacyParser<GetRealizationVectorAtTimestampData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationVectorAtTimestamp({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRealizationVectorAtTimestampQueryKey(options)
    });
};

export const getTableDefinitionsQueryKey = (options: OptionsLegacyParser<GetTableDefinitionsData_api>) => [
    createQueryKey('getTableDefinitions', options)
];

export const getTableDefinitionsOptions = (options: OptionsLegacyParser<GetTableDefinitionsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableDefinitions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTableDefinitionsQueryKey(options)
    });
};

export const postGetAggregatedPerRealizationTableDataQueryKey = (options: OptionsLegacyParser<PostGetAggregatedPerRealizationTableDataData_api>) => [
    createQueryKey('postGetAggregatedPerRealizationTableData', options)
];

export const postGetAggregatedPerRealizationTableDataOptions = (options: OptionsLegacyParser<PostGetAggregatedPerRealizationTableDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetAggregatedPerRealizationTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postGetAggregatedPerRealizationTableDataQueryKey(options)
    });
};

export const postGetAggregatedPerRealizationTableDataMutation = (options?: Partial<OptionsLegacyParser<PostGetAggregatedPerRealizationTableDataData_api>>) => {
    const mutationOptions: UseMutationOptions<PostGetAggregatedPerRealizationTableDataResponse_api, AxiosError<PostGetAggregatedPerRealizationTableDataError_api>, OptionsLegacyParser<PostGetAggregatedPerRealizationTableDataData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetAggregatedPerRealizationTableData({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postGetAggregatedStatisticalTableDataQueryKey = (options: OptionsLegacyParser<PostGetAggregatedStatisticalTableDataData_api>) => [
    createQueryKey('postGetAggregatedStatisticalTableData', options)
];

export const postGetAggregatedStatisticalTableDataOptions = (options: OptionsLegacyParser<PostGetAggregatedStatisticalTableDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetAggregatedStatisticalTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postGetAggregatedStatisticalTableDataQueryKey(options)
    });
};

export const postGetAggregatedStatisticalTableDataMutation = (options?: Partial<OptionsLegacyParser<PostGetAggregatedStatisticalTableDataData_api>>) => {
    const mutationOptions: UseMutationOptions<PostGetAggregatedStatisticalTableDataResponse_api, AxiosError<PostGetAggregatedStatisticalTableDataError_api>, OptionsLegacyParser<PostGetAggregatedStatisticalTableDataData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetAggregatedStatisticalTableData({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRealizationSurfacesMetadataQueryKey = (options: OptionsLegacyParser<GetRealizationSurfacesMetadataData_api>) => [
    createQueryKey('getRealizationSurfacesMetadata', options)
];

export const getRealizationSurfacesMetadataOptions = (options: OptionsLegacyParser<GetRealizationSurfacesMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationSurfacesMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRealizationSurfacesMetadataQueryKey(options)
    });
};

export const getObservedSurfacesMetadataQueryKey = (options: OptionsLegacyParser<GetObservedSurfacesMetadataData_api>) => [
    createQueryKey('getObservedSurfacesMetadata', options)
];

export const getObservedSurfacesMetadataOptions = (options: OptionsLegacyParser<GetObservedSurfacesMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservedSurfacesMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getObservedSurfacesMetadataQueryKey(options)
    });
};

export const getSurfaceDataQueryKey = (options: OptionsLegacyParser<GetSurfaceDataData_api>) => [
    createQueryKey('getSurfaceData', options)
];

export const getSurfaceDataOptions = (options: OptionsLegacyParser<GetSurfaceDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSurfaceDataQueryKey(options)
    });
};

export const postGetSurfaceIntersectionQueryKey = (options: OptionsLegacyParser<PostGetSurfaceIntersectionData_api>) => [
    createQueryKey('postGetSurfaceIntersection', options)
];

export const postGetSurfaceIntersectionOptions = (options: OptionsLegacyParser<PostGetSurfaceIntersectionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSurfaceIntersection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postGetSurfaceIntersectionQueryKey(options)
    });
};

export const postGetSurfaceIntersectionMutation = (options?: Partial<OptionsLegacyParser<PostGetSurfaceIntersectionData_api>>) => {
    const mutationOptions: UseMutationOptions<PostGetSurfaceIntersectionResponse_api, AxiosError<PostGetSurfaceIntersectionError_api>, OptionsLegacyParser<PostGetSurfaceIntersectionData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSurfaceIntersection({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postSampleSurfaceInPointsQueryKey = (options: OptionsLegacyParser<PostSampleSurfaceInPointsData_api>) => [
    createQueryKey('postSampleSurfaceInPoints', options)
];

export const postSampleSurfaceInPointsOptions = (options: OptionsLegacyParser<PostSampleSurfaceInPointsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postSampleSurfaceInPoints({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postSampleSurfaceInPointsQueryKey(options)
    });
};

export const postSampleSurfaceInPointsMutation = (options?: Partial<OptionsLegacyParser<PostSampleSurfaceInPointsData_api>>) => {
    const mutationOptions: UseMutationOptions<PostSampleSurfaceInPointsResponse_api, AxiosError<PostSampleSurfaceInPointsError_api>, OptionsLegacyParser<PostSampleSurfaceInPointsData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postSampleSurfaceInPoints({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDeltaSurfaceDataQueryKey = (options: OptionsLegacyParser<GetDeltaSurfaceDataData_api>) => [
    createQueryKey('getDeltaSurfaceData', options)
];

export const getDeltaSurfaceDataOptions = (options: OptionsLegacyParser<GetDeltaSurfaceDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDeltaSurfaceDataQueryKey(options)
    });
};

export const getMisfitSurfaceDataQueryKey = (options: OptionsLegacyParser<GetMisfitSurfaceDataData_api>) => [
    createQueryKey('getMisfitSurfaceData', options)
];

export const getMisfitSurfaceDataOptions = (options: OptionsLegacyParser<GetMisfitSurfaceDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMisfitSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMisfitSurfaceDataQueryKey(options)
    });
};

export const getParameterNamesAndDescriptionQueryKey = (options: OptionsLegacyParser<GetParameterNamesAndDescriptionData_api>) => [
    createQueryKey('getParameterNamesAndDescription', options)
];

export const getParameterNamesAndDescriptionOptions = (options: OptionsLegacyParser<GetParameterNamesAndDescriptionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameterNamesAndDescription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getParameterNamesAndDescriptionQueryKey(options)
    });
};

export const getParameterQueryKey = (options: OptionsLegacyParser<GetParameterData_api>) => [
    createQueryKey('getParameter', options)
];

export const getParameterOptions = (options: OptionsLegacyParser<GetParameterData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getParameterQueryKey(options)
    });
};

export const getParametersQueryKey = (options: OptionsLegacyParser<GetParametersData_api>) => [
    createQueryKey('getParameters', options)
];

export const getParametersOptions = (options: OptionsLegacyParser<GetParametersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getParametersQueryKey(options)
    });
};

export const isSensitivityRunQueryKey = (options: OptionsLegacyParser<IsSensitivityRunData_api>) => [
    createQueryKey('isSensitivityRun', options)
];

export const isSensitivityRunOptions = (options: OptionsLegacyParser<IsSensitivityRunData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await isSensitivityRun({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: isSensitivityRunQueryKey(options)
    });
};

export const getSensitivitiesQueryKey = (options: OptionsLegacyParser<GetSensitivitiesData_api>) => [
    createQueryKey('getSensitivities', options)
];

export const getSensitivitiesOptions = (options: OptionsLegacyParser<GetSensitivitiesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSensitivities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSensitivitiesQueryKey(options)
    });
};

export const getGridModelsInfoQueryKey = (options: OptionsLegacyParser<GetGridModelsInfoData_api>) => [
    createQueryKey('getGridModelsInfo', options)
];

export const getGridModelsInfoOptions = (options: OptionsLegacyParser<GetGridModelsInfoData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridModelsInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGridModelsInfoQueryKey(options)
    });
};

export const isGridGeometrySharedQueryKey = (options: OptionsLegacyParser<IsGridGeometrySharedData_api>) => [
    createQueryKey('isGridGeometryShared', options)
];

export const isGridGeometrySharedOptions = (options: OptionsLegacyParser<IsGridGeometrySharedData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await isGridGeometryShared({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: isGridGeometrySharedQueryKey(options)
    });
};

export const gridSurfaceQueryKey = (options: OptionsLegacyParser<GridSurfaceData_api>) => [
    createQueryKey('gridSurface', options)
];

export const gridSurfaceOptions = (options: OptionsLegacyParser<GridSurfaceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gridSurface({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gridSurfaceQueryKey(options)
    });
};

export const gridParameterQueryKey = (options: OptionsLegacyParser<GridParameterData_api>) => [
    createQueryKey('gridParameter', options)
];

export const gridParameterOptions = (options: OptionsLegacyParser<GridParameterData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gridParameter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gridParameterQueryKey(options)
    });
};

export const postGetPolylineIntersectionQueryKey = (options: OptionsLegacyParser<PostGetPolylineIntersectionData_api>) => [
    createQueryKey('postGetPolylineIntersection', options)
];

export const postGetPolylineIntersectionOptions = (options: OptionsLegacyParser<PostGetPolylineIntersectionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetPolylineIntersection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postGetPolylineIntersectionQueryKey(options)
    });
};

export const postGetPolylineIntersectionMutation = (options?: Partial<OptionsLegacyParser<PostGetPolylineIntersectionData_api>>) => {
    const mutationOptions: UseMutationOptions<PostGetPolylineIntersectionResponse_api, AxiosError<PostGetPolylineIntersectionError_api>, OptionsLegacyParser<PostGetPolylineIntersectionData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetPolylineIntersection({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRealizationGroupTreeDataQueryKey = (options: OptionsLegacyParser<GetRealizationGroupTreeDataData_api>) => [
    createQueryKey('getRealizationGroupTreeData', options)
];

export const getRealizationGroupTreeDataOptions = (options: OptionsLegacyParser<GetRealizationGroupTreeDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationGroupTreeData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRealizationGroupTreeDataQueryKey(options)
    });
};

export const tableDataQueryKey = (options: OptionsLegacyParser<TableDataData_api>) => [
    createQueryKey('tableData', options)
];

export const tableDataOptions = (options: OptionsLegacyParser<TableDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tableDataQueryKey(options)
    });
};

export const realizationsTablesAreEqualQueryKey = (options: OptionsLegacyParser<RealizationsTablesAreEqualData_api>) => [
    createQueryKey('realizationsTablesAreEqual', options)
];

export const realizationsTablesAreEqualOptions = (options: OptionsLegacyParser<RealizationsTablesAreEqualData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await realizationsTablesAreEqual({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: realizationsTablesAreEqualQueryKey(options)
    });
};

export const getWellCompletionsDataQueryKey = (options: OptionsLegacyParser<GetWellCompletionsDataData_api>) => [
    createQueryKey('getWellCompletionsData', options)
];

export const getWellCompletionsDataOptions = (options: OptionsLegacyParser<GetWellCompletionsDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellCompletionsData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellCompletionsDataQueryKey(options)
    });
};

export const getDrilledWellboreHeadersQueryKey = (options: OptionsLegacyParser<GetDrilledWellboreHeadersData_api>) => [
    createQueryKey('getDrilledWellboreHeaders', options)
];

export const getDrilledWellboreHeadersOptions = (options: OptionsLegacyParser<GetDrilledWellboreHeadersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDrilledWellboreHeaders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDrilledWellboreHeadersQueryKey(options)
    });
};

export const getFieldWellTrajectoriesQueryKey = (options: OptionsLegacyParser<GetFieldWellTrajectoriesData_api>) => [
    createQueryKey('getFieldWellTrajectories', options)
];

export const getFieldWellTrajectoriesOptions = (options: OptionsLegacyParser<GetFieldWellTrajectoriesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFieldWellTrajectories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFieldWellTrajectoriesQueryKey(options)
    });
};

export const getWellTrajectoriesQueryKey = (options: OptionsLegacyParser<GetWellTrajectoriesData_api>) => [
    createQueryKey('getWellTrajectories', options)
];

export const getWellTrajectoriesOptions = (options: OptionsLegacyParser<GetWellTrajectoriesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellTrajectories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellTrajectoriesQueryKey(options)
    });
};

export const getWellborePicksAndStratigraphicUnitsQueryKey = (options: OptionsLegacyParser<GetWellborePicksAndStratigraphicUnitsData_api>) => [
    createQueryKey('getWellborePicksAndStratigraphicUnits', options)
];

export const getWellborePicksAndStratigraphicUnitsOptions = (options: OptionsLegacyParser<GetWellborePicksAndStratigraphicUnitsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePicksAndStratigraphicUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellborePicksAndStratigraphicUnitsQueryKey(options)
    });
};

export const getWellboreCompletionsQueryKey = (options: OptionsLegacyParser<GetWellboreCompletionsData_api>) => [
    createQueryKey('getWellboreCompletions', options)
];

export const getWellboreCompletionsOptions = (options: OptionsLegacyParser<GetWellboreCompletionsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreCompletions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellboreCompletionsQueryKey(options)
    });
};

export const getWellboreCasingsQueryKey = (options: OptionsLegacyParser<GetWellboreCasingsData_api>) => [
    createQueryKey('getWellboreCasings', options)
];

export const getWellboreCasingsOptions = (options: OptionsLegacyParser<GetWellboreCasingsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreCasings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellboreCasingsQueryKey(options)
    });
};

export const getWellborePerforationsQueryKey = (options: OptionsLegacyParser<GetWellborePerforationsData_api>) => [
    createQueryKey('getWellborePerforations', options)
];

export const getWellborePerforationsOptions = (options: OptionsLegacyParser<GetWellborePerforationsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePerforations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellborePerforationsQueryKey(options)
    });
};

export const getWellboreLogCurveHeadersQueryKey = (options: OptionsLegacyParser<GetWellboreLogCurveHeadersData_api>) => [
    createQueryKey('getWellboreLogCurveHeaders', options)
];

export const getWellboreLogCurveHeadersOptions = (options: OptionsLegacyParser<GetWellboreLogCurveHeadersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreLogCurveHeaders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWellboreLogCurveHeadersQueryKey(options)
    });
};

export const getLogCurveDataQueryKey = (options: OptionsLegacyParser<GetLogCurveDataData_api>) => [
    createQueryKey('getLogCurveData', options)
];

export const getLogCurveDataOptions = (options: OptionsLegacyParser<GetLogCurveDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLogCurveData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLogCurveDataQueryKey(options)
    });
};

export const getSeismicCubeMetaListQueryKey = (options: OptionsLegacyParser<GetSeismicCubeMetaListData_api>) => [
    createQueryKey('getSeismicCubeMetaList', options)
];

export const getSeismicCubeMetaListOptions = (options: OptionsLegacyParser<GetSeismicCubeMetaListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeismicCubeMetaList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSeismicCubeMetaListQueryKey(options)
    });
};

export const postGetSeismicFenceQueryKey = (options: OptionsLegacyParser<PostGetSeismicFenceData_api>) => [
    createQueryKey('postGetSeismicFence', options)
];

export const postGetSeismicFenceOptions = (options: OptionsLegacyParser<PostGetSeismicFenceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSeismicFence({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postGetSeismicFenceQueryKey(options)
    });
};

export const postGetSeismicFenceMutation = (options?: Partial<OptionsLegacyParser<PostGetSeismicFenceData_api>>) => {
    const mutationOptions: UseMutationOptions<PostGetSeismicFenceResponse_api, AxiosError<PostGetSeismicFenceError_api>, OptionsLegacyParser<PostGetSeismicFenceData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSeismicFence({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPolygonsDirectoryQueryKey = (options: OptionsLegacyParser<GetPolygonsDirectoryData_api>) => [
    createQueryKey('getPolygonsDirectory', options)
];

export const getPolygonsDirectoryOptions = (options: OptionsLegacyParser<GetPolygonsDirectoryData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPolygonsDirectory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPolygonsDirectoryQueryKey(options)
    });
};

export const getPolygonsDataQueryKey = (options: OptionsLegacyParser<GetPolygonsDataData_api>) => [
    createQueryKey('getPolygonsData', options)
];

export const getPolygonsDataOptions = (options: OptionsLegacyParser<GetPolygonsDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPolygonsData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPolygonsDataQueryKey(options)
    });
};

export const userInfoQueryKey = (options: OptionsLegacyParser<UserInfoData_api>) => [
    createQueryKey('userInfo', options)
];

export const userInfoOptions = (options: OptionsLegacyParser<UserInfoData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userInfoQueryKey(options)
    });
};

export const getObservationsQueryKey = (options: OptionsLegacyParser<GetObservationsData_api>) => [
    createQueryKey('getObservations', options)
];

export const getObservationsOptions = (options: OptionsLegacyParser<GetObservationsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getObservationsQueryKey(options)
    });
};

export const getRftInfoQueryKey = (options: OptionsLegacyParser<GetRftInfoData_api>) => [
    createQueryKey('getRftInfo', options)
];

export const getRftInfoOptions = (options: OptionsLegacyParser<GetRftInfoData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRftInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRftInfoQueryKey(options)
    });
};

export const getRealizationDataQueryKey = (options: OptionsLegacyParser<GetRealizationDataData_api>) => [
    createQueryKey('getRealizationData', options)
];

export const getRealizationDataOptions = (options: OptionsLegacyParser<GetRealizationDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRealizationDataQueryKey(options)
    });
};

export const getVfpTableNamesQueryKey = (options: OptionsLegacyParser<GetVfpTableNamesData_api>) => [
    createQueryKey('getVfpTableNames', options)
];

export const getVfpTableNamesOptions = (options: OptionsLegacyParser<GetVfpTableNamesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVfpTableNames({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getVfpTableNamesQueryKey(options)
    });
};

export const getVfpTableQueryKey = (options: OptionsLegacyParser<GetVfpTableData_api>) => [
    createQueryKey('getVfpTable', options)
];

export const getVfpTableOptions = (options: OptionsLegacyParser<GetVfpTableData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVfpTable({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getVfpTableQueryKey(options)
    });
};

export const loginRouteQueryKey = (options?: OptionsLegacyParser<LoginRouteData_api>) => [
    createQueryKey('loginRoute', options)
];

export const loginRouteOptions = (options?: OptionsLegacyParser<LoginRouteData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginRouteQueryKey(options)
    });
};

export const authorizedCallbackRouteQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('authorizedCallbackRoute', options)
];

export const authorizedCallbackRouteOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authorizedCallbackRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authorizedCallbackRouteQueryKey(options)
    });
};

export const aliveQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('alive', options)
];

export const aliveOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await alive({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: aliveQueryKey(options)
    });
};

export const aliveProtectedQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('aliveProtected', options)
];

export const aliveProtectedOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await aliveProtected({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: aliveProtectedQueryKey(options)
    });
};

export const loggedInUserQueryKey = (options?: OptionsLegacyParser<LoggedInUserData_api>) => [
    createQueryKey('loggedInUser', options)
];

export const loggedInUserOptions = (options?: OptionsLegacyParser<LoggedInUserData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loggedInUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loggedInUserQueryKey(options)
    });
};

export const rootQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('root', options)
];

export const rootOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await root({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootQueryKey(options)
    });
};