// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetFieldsError, GetFieldsResponse, GetCasesData, GetCasesError, GetCasesResponse, GetEnsemblesData, GetEnsemblesError, GetEnsemblesResponse, GetEnsembleDetailsData, GetEnsembleDetailsError, GetEnsembleDetailsResponse, GetVectorListData, GetVectorListError, GetVectorListResponse, GetRealizationsVectorDataData, GetRealizationsVectorDataError, GetRealizationsVectorDataResponse, GetTimestampsListData, GetTimestampsListError, GetTimestampsListResponse, GetHistoricalVectorDataData, GetHistoricalVectorDataError, GetHistoricalVectorDataResponse, GetStatisticalVectorDataData, GetStatisticalVectorDataError, GetStatisticalVectorDataResponse, GetStatisticalVectorDataPerSensitivityData, GetStatisticalVectorDataPerSensitivityError, GetStatisticalVectorDataPerSensitivityResponse, GetRealizationVectorAtTimestampData, GetRealizationVectorAtTimestampError, GetRealizationVectorAtTimestampResponse, GetTableDefinitionsData, GetTableDefinitionsError, GetTableDefinitionsResponse, PostGetAggregatedPerRealizationTableDataData, PostGetAggregatedPerRealizationTableDataError, PostGetAggregatedPerRealizationTableDataResponse, PostGetAggregatedStatisticalTableDataData, PostGetAggregatedStatisticalTableDataError, PostGetAggregatedStatisticalTableDataResponse, GetRealizationSurfacesMetadataData, GetRealizationSurfacesMetadataError, GetRealizationSurfacesMetadataResponse, GetObservedSurfacesMetadataData, GetObservedSurfacesMetadataError, GetObservedSurfacesMetadataResponse, GetSurfaceDataData, GetSurfaceDataError, GetSurfaceDataResponse, PostGetSurfaceIntersectionData, PostGetSurfaceIntersectionError, PostGetSurfaceIntersectionResponse, PostSampleSurfaceInPointsData, PostSampleSurfaceInPointsError, PostSampleSurfaceInPointsResponse, GetDeltaSurfaceDataData, GetDeltaSurfaceDataError, GetDeltaSurfaceDataResponse, GetMisfitSurfaceDataData, GetMisfitSurfaceDataError, GetMisfitSurfaceDataResponse, GetParameterNamesAndDescriptionData, GetParameterNamesAndDescriptionError, GetParameterNamesAndDescriptionResponse, GetParameterData, GetParameterError, GetParameterResponse, GetParametersData, GetParametersError, GetParametersResponse, IsSensitivityRunData, IsSensitivityRunError, IsSensitivityRunResponse, GetSensitivitiesData, GetSensitivitiesError, GetSensitivitiesResponse, GetGridModelsInfoData, GetGridModelsInfoError, GetGridModelsInfoResponse, IsGridGeometrySharedData, IsGridGeometrySharedError, IsGridGeometrySharedResponse, GridSurfaceData, GridSurfaceError, GridSurfaceResponse, GridParameterData, GridParameterError, GridParameterResponse, PostGetPolylineIntersectionData, PostGetPolylineIntersectionError, PostGetPolylineIntersectionResponse, GetRealizationGroupTreeDataData, GetRealizationGroupTreeDataError, GetRealizationGroupTreeDataResponse, TableDataData, TableDataError, TableDataResponse, RealizationsTablesAreEqualData, RealizationsTablesAreEqualError, RealizationsTablesAreEqualResponse, GetWellCompletionsDataData, GetWellCompletionsDataError, GetWellCompletionsDataResponse, GetDrilledWellboreHeadersData, GetDrilledWellboreHeadersError, GetDrilledWellboreHeadersResponse, GetFieldWellTrajectoriesData, GetFieldWellTrajectoriesError, GetFieldWellTrajectoriesResponse, GetWellTrajectoriesData, GetWellTrajectoriesError, GetWellTrajectoriesResponse, GetWellborePicksAndStratigraphicUnitsData, GetWellborePicksAndStratigraphicUnitsError, GetWellborePicksAndStratigraphicUnitsResponse, GetWellboreCompletionsData, GetWellboreCompletionsError, GetWellboreCompletionsResponse, GetWellboreCasingsData, GetWellboreCasingsError, GetWellboreCasingsResponse, GetWellborePerforationsData, GetWellborePerforationsError, GetWellborePerforationsResponse, GetWellboreLogCurveHeadersData, GetWellboreLogCurveHeadersError, GetWellboreLogCurveHeadersResponse, GetLogCurveDataData, GetLogCurveDataError, GetLogCurveDataResponse, GetSeismicCubeMetaListData, GetSeismicCubeMetaListError, GetSeismicCubeMetaListResponse, PostGetSeismicFenceData, PostGetSeismicFenceError, PostGetSeismicFenceResponse, GetPolygonsDirectoryData, GetPolygonsDirectoryError, GetPolygonsDirectoryResponse, GetPolygonsDataData, GetPolygonsDataError, GetPolygonsDataResponse, UserInfoData, UserInfoError, UserInfoResponse, GetObservationsData, GetObservationsError, GetObservationsResponse, GetRftInfoData, GetRftInfoError, GetRftInfoResponse, GetRealizationDataData, GetRealizationDataError, GetRealizationDataResponse, GetVfpTableNamesData, GetVfpTableNamesError, GetVfpTableNamesResponse, GetVfpTableData, GetVfpTableError, GetVfpTableResponse, LoginRouteData, LoginRouteError, LoginRouteResponse, AuthorizedCallbackRouteError, AuthorizedCallbackRouteResponse, AliveError, AliveResponse, AliveProtectedError, AliveProtectedResponse, LoggedInUserData, LoggedInUserError, LoggedInUserResponse, RootError, RootResponse } from './types.gen';

export const client = createClient(createConfig());

export class ExploreService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Fields
     * Get list of fields
     */
    public getFields<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetFieldsResponse, GetFieldsError, ThrowOnError>({
            ...options,
            url: '/fields'
        });
    }
    
    /**
     * Get Cases
     * Get list of cases for specified field
     */
    public getCases<ThrowOnError extends boolean = false>(options: Options<GetCasesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCasesResponse, GetCasesError, ThrowOnError>({
            ...options,
            url: '/cases'
        });
    }
    
    /**
     * Get Ensembles
     * Get list of ensembles for a case
     */
    public getEnsembles<ThrowOnError extends boolean = false>(options: Options<GetEnsemblesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEnsemblesResponse, GetEnsemblesError, ThrowOnError>({
            ...options,
            url: '/cases/{case_uuid}/ensembles'
        });
    }
    
    /**
     * Get Ensemble Details
     * Get more detailed information for an ensemble
     */
    public getEnsembleDetails<ThrowOnError extends boolean = false>(options: Options<GetEnsembleDetailsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEnsembleDetailsResponse, GetEnsembleDetailsError, ThrowOnError>({
            ...options,
            url: '/cases/{case_uuid}/ensembles/{ensemble_name}'
        });
    }
    
}

export class TimeseriesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Vector List
     * Get list of all vectors in a given Sumo ensemble, excluding any historical vectors
     */
    public getVectorList<ThrowOnError extends boolean = false>(options: Options<GetVectorListData, ThrowOnError>) {
        return (options?.client ?? client).get<GetVectorListResponse, GetVectorListError, ThrowOnError>({
            ...options,
            url: '/timeseries/vector_list/'
        });
    }
    
    /**
     * Get Realizations Vector Data
     * Get vector data per realization
     */
    public getRealizationsVectorData<ThrowOnError extends boolean = false>(options: Options<GetRealizationsVectorDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRealizationsVectorDataResponse, GetRealizationsVectorDataError, ThrowOnError>({
            ...options,
            url: '/timeseries/realizations_vector_data/'
        });
    }
    
    /**
     * Get Timestamps List
     * Get the intersection of available timestamps.
     * Note that when resampling_frequency is None, the pure intersection of the
     * stored raw dates will be returned. Thus the returned list of dates will not include
     * dates from long running realizations.
     * For other resampling frequencies, the date range will be expanded to cover the entire
     * time range of all the requested realizations before computing the resampled dates.
     */
    public getTimestampsList<ThrowOnError extends boolean = false>(options: Options<GetTimestampsListData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTimestampsListResponse, GetTimestampsListError, ThrowOnError>({
            ...options,
            url: '/timeseries/timestamps_list/'
        });
    }
    
    /**
     * Get Historical Vector Data
     */
    public getHistoricalVectorData<ThrowOnError extends boolean = false>(options: Options<GetHistoricalVectorDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetHistoricalVectorDataResponse, GetHistoricalVectorDataError, ThrowOnError>({
            ...options,
            url: '/timeseries/historical_vector_data/'
        });
    }
    
    /**
     * Get Statistical Vector Data
     * Get statistical vector data for an ensemble
     */
    public getStatisticalVectorData<ThrowOnError extends boolean = false>(options: Options<GetStatisticalVectorDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetStatisticalVectorDataResponse, GetStatisticalVectorDataError, ThrowOnError>({
            ...options,
            url: '/timeseries/statistical_vector_data/'
        });
    }
    
    /**
     * Get Statistical Vector Data Per Sensitivity
     * Get statistical vector data for an ensemble per sensitivity
     */
    public getStatisticalVectorDataPerSensitivity<ThrowOnError extends boolean = false>(options: Options<GetStatisticalVectorDataPerSensitivityData, ThrowOnError>) {
        return (options?.client ?? client).get<GetStatisticalVectorDataPerSensitivityResponse, GetStatisticalVectorDataPerSensitivityError, ThrowOnError>({
            ...options,
            url: '/timeseries/statistical_vector_data_per_sensitivity/'
        });
    }
    
    /**
     * Get Realization Vector At Timestamp
     */
    public getRealizationVectorAtTimestamp<ThrowOnError extends boolean = false>(options: Options<GetRealizationVectorAtTimestampData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRealizationVectorAtTimestampResponse, GetRealizationVectorAtTimestampError, ThrowOnError>({
            ...options,
            url: '/timeseries/realization_vector_at_timestamp/'
        });
    }
    
}

export class InplaceVolumetricsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Table Definitions
     * Get the volumetric tables definitions for a given ensemble.
     */
    public getTableDefinitions<ThrowOnError extends boolean = false>(options: Options<GetTableDefinitionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTableDefinitionsResponse, GetTableDefinitionsError, ThrowOnError>({
            ...options,
            url: '/inplace_volumetrics/table_definitions/'
        });
    }
    
    /**
     * Post Get Aggregated Per Realization Table Data
     * Get aggregated volumetric data for a given table with data per realization based on requested results and categories/index filter.
     *
     * Note: This endpoint is a post endpoint because the list of identifiers with values can be quite large and may exceed the query string limit.
     * As the endpoint is post, the identifiers with values object is kept for convenience.
     */
    public postGetAggregatedPerRealizationTableData<ThrowOnError extends boolean = false>(options: Options<PostGetAggregatedPerRealizationTableDataData, ThrowOnError>) {
        return (options?.client ?? client).post<PostGetAggregatedPerRealizationTableDataResponse, PostGetAggregatedPerRealizationTableDataError, ThrowOnError>({
            ...options,
            url: '/inplace_volumetrics/get_aggregated_per_realization_table_data/'
        });
    }
    
    /**
     * Post Get Aggregated Statistical Table Data
     * Get statistical volumetric data across selected realizations for a given table based on requested results and categories/index filter.
     *
     * Note: This endpoint is a post endpoint because the list of identifiers with values can be quite large and may exceed the query string limit.
     * As the endpoint is post, the identifiers with values object is kept for convenience.
     */
    public postGetAggregatedStatisticalTableData<ThrowOnError extends boolean = false>(options: Options<PostGetAggregatedStatisticalTableDataData, ThrowOnError>) {
        return (options?.client ?? client).post<PostGetAggregatedStatisticalTableDataResponse, PostGetAggregatedStatisticalTableDataError, ThrowOnError>({
            ...options,
            url: '/inplace_volumetrics/get_aggregated_statistical_table_data/'
        });
    }
    
}

export class SurfaceService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Realization Surfaces Metadata
     * Get metadata for realization surfaces in a Sumo ensemble
     */
    public getRealizationSurfacesMetadata<ThrowOnError extends boolean = false>(options: Options<GetRealizationSurfacesMetadataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRealizationSurfacesMetadataResponse, GetRealizationSurfacesMetadataError, ThrowOnError>({
            ...options,
            url: '/surface/realization_surfaces_metadata/'
        });
    }
    
    /**
     * Get Observed Surfaces Metadata
     * Get metadata for observed surfaces in a Sumo case
     */
    public getObservedSurfacesMetadata<ThrowOnError extends boolean = false>(options: Options<GetObservedSurfacesMetadataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetObservedSurfacesMetadataResponse, GetObservedSurfacesMetadataError, ThrowOnError>({
            ...options,
            url: '/surface/observed_surfaces_metadata/'
        });
    }
    
    /**
     * Get Surface Data
     * Get surface data for the specified surface.
     *
     * ---
     * *General description of the types of surface addresses that exist. The specific address types supported by this endpoint can be a subset of these.*
     *
     * - *REAL* - Realization surface address. Addresses a specific realization surface within an ensemble. Always specifies a single realization number
     * - *OBS* - Observed surface address. Addresses an observed surface which is not associated with any specific ensemble.
     * - *STAT* - Statistical surface address. Fully specifies a statistical surface, including the statistic function and which realizations to include.
     * - *PARTIAL* - Partial surface address. Similar to a realization surface address, but does not include a specific realization number.
     *
     * Structure of the different types of address strings:
     *
     * ```
     * REAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<realization>[~~<iso_date_or_interval>]
     * STAT~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<stat_function>~~<stat_realizations>[~~<iso_date_or_interval>]
     * OBS~~<case_uuid>~~<surface_name>~~<attribute>~~<iso_date_or_interval>
     * PARTIAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>[~~<iso_date_or_interval>]
     * ```
     *
     * The `<stat_realizations>` component in a *STAT* address contains the list of realizations to include in the statistics
     * encoded as a `UintListStr` or "*" to include all realizations.
     */
    public getSurfaceData<ThrowOnError extends boolean = false>(options: Options<GetSurfaceDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSurfaceDataResponse, GetSurfaceDataError, ThrowOnError>({
            ...options,
            url: '/surface/surface_data'
        });
    }
    
    /**
     * Post Get Surface Intersection
     * Get surface intersection data for requested surface name.
     *
     * The surface intersection data for surface name contains: An array of z-points, i.e. one z-value/depth per (x, y)-point in polyline,
     * and cumulative lengths, the accumulated length at each z-point in the array.
     */
    public postGetSurfaceIntersection<ThrowOnError extends boolean = false>(options: Options<PostGetSurfaceIntersectionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostGetSurfaceIntersectionResponse, PostGetSurfaceIntersectionError, ThrowOnError>({
            ...options,
            url: '/surface/get_surface_intersection'
        });
    }
    
    /**
     * Post Sample Surface In Points
     */
    public postSampleSurfaceInPoints<ThrowOnError extends boolean = false>(options: Options<PostSampleSurfaceInPointsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostSampleSurfaceInPointsResponse, PostSampleSurfaceInPointsError, ThrowOnError>({
            ...options,
            url: '/surface/sample_surface_in_points'
        });
    }
    
    /**
     * Get Delta Surface Data
     */
    public getDeltaSurfaceData<ThrowOnError extends boolean = false>(options: Options<GetDeltaSurfaceDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDeltaSurfaceDataResponse, GetDeltaSurfaceDataError, ThrowOnError>({
            ...options,
            url: '/surface/delta_surface_data'
        });
    }
    
    /**
     * Get Misfit Surface Data
     */
    public getMisfitSurfaceData<ThrowOnError extends boolean = false>(options: Options<GetMisfitSurfaceDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMisfitSurfaceDataResponse, GetMisfitSurfaceDataError, ThrowOnError>({
            ...options,
            url: '/surface/misfit_surface_data'
        });
    }
    
}

export class ParametersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Parameter Names And Description
     * Retrieve parameter names and description for an ensemble
     */
    public getParameterNamesAndDescription<ThrowOnError extends boolean = false>(options: Options<GetParameterNamesAndDescriptionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetParameterNamesAndDescriptionResponse, GetParameterNamesAndDescriptionError, ThrowOnError>({
            ...options,
            url: '/parameters/parameter_names_and_description/'
        });
    }
    
    /**
     * Get Parameter
     * Get a parameter in a given Sumo ensemble
     */
    public getParameter<ThrowOnError extends boolean = false>(options: Options<GetParameterData, ThrowOnError>) {
        return (options?.client ?? client).get<GetParameterResponse, GetParameterError, ThrowOnError>({
            ...options,
            url: '/parameters/parameter/'
        });
    }
    
    /**
     * Get Parameters
     */
    public getParameters<ThrowOnError extends boolean = false>(options: Options<GetParametersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetParametersResponse, GetParametersError, ThrowOnError>({
            ...options,
            url: '/parameters/parameters/'
        });
    }
    
    /**
     * Is Sensitivity Run
     * Check if a given Sumo ensemble is a sensitivity run
     */
    public isSensitivityRun<ThrowOnError extends boolean = false>(options: Options<IsSensitivityRunData, ThrowOnError>) {
        return (options?.client ?? client).get<IsSensitivityRunResponse, IsSensitivityRunError, ThrowOnError>({
            ...options,
            url: '/parameters/is_sensitivity_run/'
        });
    }
    
    /**
     * Get Sensitivities
     * Get sensitivities in a given Sumo ensemble
     */
    public getSensitivities<ThrowOnError extends boolean = false>(options: Options<GetSensitivitiesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSensitivitiesResponse, GetSensitivitiesError, ThrowOnError>({
            ...options,
            url: '/parameters/sensitivities/'
        });
    }
    
}

export class Grid3DService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Grid Models Info
     * Get metadata for all 3D grid models, including bbox, dimensions and properties
     */
    public getGridModelsInfo<ThrowOnError extends boolean = false>(options: Options<GetGridModelsInfoData, ThrowOnError>) {
        return (options?.client ?? client).get<GetGridModelsInfoResponse, GetGridModelsInfoError, ThrowOnError>({
            ...options,
            url: '/grid3d/grid_models_info/'
        });
    }
    
    /**
     * Is Grid Geometry Shared
     * Check if a 3D grid geometry is shared across realizations
     */
    public isGridGeometryShared<ThrowOnError extends boolean = false>(options: Options<IsGridGeometrySharedData, ThrowOnError>) {
        return (options?.client ?? client).get<IsGridGeometrySharedResponse, IsGridGeometrySharedError, ThrowOnError>({
            ...options,
            url: '/grid3d/is_grid_geometry_shared/'
        });
    }
    
    /**
     * Grid Surface
     * Get a grid
     */
    public gridSurface<ThrowOnError extends boolean = false>(options: Options<GridSurfaceData, ThrowOnError>) {
        return (options?.client ?? client).get<GridSurfaceResponse, GridSurfaceError, ThrowOnError>({
            ...options,
            url: '/grid3d/grid_surface'
        });
    }
    
    /**
     * Grid Parameter
     * Get a grid parameter
     */
    public gridParameter<ThrowOnError extends boolean = false>(options: Options<GridParameterData, ThrowOnError>) {
        return (options?.client ?? client).get<GridParameterResponse, GridParameterError, ThrowOnError>({
            ...options,
            url: '/grid3d/grid_parameter'
        });
    }
    
    /**
     * Post Get Polyline Intersection
     */
    public postGetPolylineIntersection<ThrowOnError extends boolean = false>(options: Options<PostGetPolylineIntersectionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostGetPolylineIntersectionResponse, PostGetPolylineIntersectionError, ThrowOnError>({
            ...options,
            url: '/grid3d/get_polyline_intersection'
        });
    }
    
}

export class GroupTreeService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Realization Group Tree Data
     */
    public getRealizationGroupTreeData<ThrowOnError extends boolean = false>(options: Options<GetRealizationGroupTreeDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRealizationGroupTreeDataResponse, GetRealizationGroupTreeDataError, ThrowOnError>({
            ...options,
            url: '/group_tree/realization_group_tree_data/'
        });
    }
    
}

export class PvtService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Table Data
     * Get pvt table data for a given Sumo ensemble and realization
     */
    public tableData<ThrowOnError extends boolean = false>(options: Options<TableDataData, ThrowOnError>) {
        return (options?.client ?? client).get<TableDataResponse, TableDataError, ThrowOnError>({
            ...options,
            url: '/pvt/table_data/'
        });
    }
    
    /**
     * Realizations Tables Are Equal
     * Check if all realizations has the same pvt table
     */
    public realizationsTablesAreEqual<ThrowOnError extends boolean = false>(options: Options<RealizationsTablesAreEqualData, ThrowOnError>) {
        return (options?.client ?? client).get<RealizationsTablesAreEqualResponse, RealizationsTablesAreEqualError, ThrowOnError>({
            ...options,
            url: '/pvt/realizations_tables_are_equal/'
        });
    }
    
}

export class WellCompletionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Well Completions Data
     */
    public getWellCompletionsData<ThrowOnError extends boolean = false>(options: Options<GetWellCompletionsDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellCompletionsDataResponse, GetWellCompletionsDataError, ThrowOnError>({
            ...options,
            url: '/well_completions/well_completions_data/'
        });
    }
    
}

export class WellService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Drilled Wellbore Headers
     * Get wellbore headers for all wells in the field
     */
    public getDrilledWellboreHeaders<ThrowOnError extends boolean = false>(options: Options<GetDrilledWellboreHeadersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDrilledWellboreHeadersResponse, GetDrilledWellboreHeadersError, ThrowOnError>({
            ...options,
            url: '/well/drilled_wellbore_headers/'
        });
    }
    
    /**
     * Get Field Well Trajectories
     * Get well trajectories for field
     */
    public getFieldWellTrajectories<ThrowOnError extends boolean = false>(options: Options<GetFieldWellTrajectoriesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFieldWellTrajectoriesResponse, GetFieldWellTrajectoriesError, ThrowOnError>({
            ...options,
            url: '/well/field_well_trajectories/'
        });
    }
    
    /**
     * Get Well Trajectories
     * Get well trajectories
     */
    public getWellTrajectories<ThrowOnError extends boolean = false>(options: Options<GetWellTrajectoriesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellTrajectoriesResponse, GetWellTrajectoriesError, ThrowOnError>({
            ...options,
            url: '/well/well_trajectories/'
        });
    }
    
    /**
     * Get Wellbore Picks And Stratigraphic Units
     * Get well bore picks for a single well bore
     */
    public getWellborePicksAndStratigraphicUnits<ThrowOnError extends boolean = false>(options: Options<GetWellborePicksAndStratigraphicUnitsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellborePicksAndStratigraphicUnitsResponse, GetWellborePicksAndStratigraphicUnitsError, ThrowOnError>({
            ...options,
            url: '/well/wellbore_picks_and_stratigraphic_units/'
        });
    }
    
    /**
     * Get Wellbore Completions
     * Get well bore completions for a single well bore
     */
    public getWellboreCompletions<ThrowOnError extends boolean = false>(options: Options<GetWellboreCompletionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellboreCompletionsResponse, GetWellboreCompletionsError, ThrowOnError>({
            ...options,
            url: '/well/wellbore_completions/'
        });
    }
    
    /**
     * Get Wellbore Casings
     * Get well bore casings for a single well bore
     */
    public getWellboreCasings<ThrowOnError extends boolean = false>(options: Options<GetWellboreCasingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellboreCasingsResponse, GetWellboreCasingsError, ThrowOnError>({
            ...options,
            url: '/well/wellbore_casings/'
        });
    }
    
    /**
     * Get Wellbore Perforations
     * Get well bore casing for a single well bore
     */
    public getWellborePerforations<ThrowOnError extends boolean = false>(options: Options<GetWellborePerforationsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellborePerforationsResponse, GetWellborePerforationsError, ThrowOnError>({
            ...options,
            url: '/well/wellbore_perforations/'
        });
    }
    
    /**
     * Get Wellbore Log Curve Headers
     * Get all log curve headers for a single well bore
     */
    public getWellboreLogCurveHeaders<ThrowOnError extends boolean = false>(options: Options<GetWellboreLogCurveHeadersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWellboreLogCurveHeadersResponse, GetWellboreLogCurveHeadersError, ThrowOnError>({
            ...options,
            url: '/well/wellbore_log_curve_headers/'
        });
    }
    
    /**
     * Get Log Curve Data
     * Get log curve data
     */
    public getLogCurveData<ThrowOnError extends boolean = false>(options: Options<GetLogCurveDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogCurveDataResponse, GetLogCurveDataError, ThrowOnError>({
            ...options,
            url: '/well/log_curve_data/'
        });
    }
    
}

export class SeismicService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Seismic Cube Meta List
     * Get a list of seismic cube meta.
     */
    public getSeismicCubeMetaList<ThrowOnError extends boolean = false>(options: Options<GetSeismicCubeMetaListData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSeismicCubeMetaListResponse, GetSeismicCubeMetaListError, ThrowOnError>({
            ...options,
            url: '/seismic/seismic_cube_meta_list/'
        });
    }
    
    /**
     * Post Get Seismic Fence
     * Get a fence of seismic data from a polyline defined by a set of (x, y) coordinates in domain coordinate system.
     *
     * The fence data contains a set of traces perpendicular to the polyline, with one trace per (x, y)-point in polyline.
     * Each trace has equal number of samples, and is a set of sample values along the depth direction of the seismic cube.
     *
     * Returns:
     * A SeismicFenceData object with fence traces in encoded 1D array, metadata for trace array decoding and fence min/max depth.
     */
    public postGetSeismicFence<ThrowOnError extends boolean = false>(options: Options<PostGetSeismicFenceData, ThrowOnError>) {
        return (options?.client ?? client).post<PostGetSeismicFenceResponse, PostGetSeismicFenceError, ThrowOnError>({
            ...options,
            url: '/seismic/get_seismic_fence/'
        });
    }
    
}

export class PolygonsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Polygons Directory
     * Get a directory of polygons in a Sumo ensemble
     */
    public getPolygonsDirectory<ThrowOnError extends boolean = false>(options: Options<GetPolygonsDirectoryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPolygonsDirectoryResponse, GetPolygonsDirectoryError, ThrowOnError>({
            ...options,
            url: '/polygons/polygons_directory/'
        });
    }
    
    /**
     * Get Polygons Data
     */
    public getPolygonsData<ThrowOnError extends boolean = false>(options: Options<GetPolygonsDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPolygonsDataResponse, GetPolygonsDataError, ThrowOnError>({
            ...options,
            url: '/polygons/polygons_data/'
        });
    }
    
}

export class GraphService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * User Info
     * Get username, display name and avatar from Microsoft Graph API for a given user id
     */
    public userInfo<ThrowOnError extends boolean = false>(options: Options<UserInfoData, ThrowOnError>) {
        return (options?.client ?? client).get<UserInfoResponse, UserInfoError, ThrowOnError>({
            ...options,
            url: '/graph/user_photo/'
        });
    }
    
}

export class ObservationsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Observations
     * Retrieve all observations found in sumo case
     */
    public getObservations<ThrowOnError extends boolean = false>(options: Options<GetObservationsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetObservationsResponse, GetObservationsError, ThrowOnError>({
            ...options,
            url: '/observations/observations/'
        });
    }
    
}

export class RftService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Rft Info
     */
    public getRftInfo<ThrowOnError extends boolean = false>(options: Options<GetRftInfoData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRftInfoResponse, GetRftInfoError, ThrowOnError>({
            ...options,
            url: '/rft/rft_info'
        });
    }
    
    /**
     * Get Realization Data
     */
    public getRealizationData<ThrowOnError extends boolean = false>(options: Options<GetRealizationDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRealizationDataResponse, GetRealizationDataError, ThrowOnError>({
            ...options,
            url: '/rft/realization_data'
        });
    }
    
}

export class VfpService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Vfp Table Names
     */
    public getVfpTableNames<ThrowOnError extends boolean = false>(options: Options<GetVfpTableNamesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetVfpTableNamesResponse, GetVfpTableNamesError, ThrowOnError>({
            ...options,
            url: '/vfp/vfp_table_names/'
        });
    }
    
    /**
     * Get Vfp Table
     */
    public getVfpTable<ThrowOnError extends boolean = false>(options: Options<GetVfpTableData, ThrowOnError>) {
        return (options?.client ?? client).get<GetVfpTableResponse, GetVfpTableError, ThrowOnError>({
            ...options,
            url: '/vfp/vfp_table/'
        });
    }
    
}

export class DefaultService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     *  Login Route
     */
    public loginRoute<ThrowOnError extends boolean = false>(options?: Options<LoginRouteData, ThrowOnError>) {
        return (options?.client ?? client).get<LoginRouteResponse, LoginRouteError, ThrowOnError>({
            ...options,
            url: '/login'
        });
    }
    
    /**
     *  Authorized Callback Route
     */
    public authorizedCallbackRoute<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AuthorizedCallbackRouteResponse, AuthorizedCallbackRouteError, ThrowOnError>({
            ...options,
            url: '/auth-callback'
        });
    }
    
    /**
     * Alive
     */
    public alive<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AliveResponse, AliveError, ThrowOnError>({
            ...options,
            url: '/alive'
        });
    }
    
    /**
     * Alive Protected
     */
    public aliveProtected<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AliveProtectedResponse, AliveProtectedError, ThrowOnError>({
            ...options,
            url: '/alive_protected'
        });
    }
    
    /**
     * Logged In User
     */
    public loggedInUser<ThrowOnError extends boolean = false>(options?: Options<LoggedInUserData, ThrowOnError>) {
        return (options?.client ?? client).get<LoggedInUserResponse, LoggedInUserError, ThrowOnError>({
            ...options,
            url: '/logged_in_user'
        });
    }
    
    /**
     * Root
     */
    public root<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<RootResponse, RootError, ThrowOnError>({
            ...options,
            url: '/'
        });
    }
    
}