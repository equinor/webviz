// This file is auto-generated by @hey-api/openapi-ts

export const ALQSchema = {
    type: 'string',
    enum: ['GRAT', 'IGLR', 'TGLR', 'PUMP', 'COMP', 'DENO', 'DENG', 'BEAN', "''"],
    title: 'ALQ'
} as const;

export const B64FloatArraySchema = {
    properties: {
        element_type: {
            type: 'string',
            enum: ['float32', 'float64'],
            title: 'Element Type'
        },
        data_b64str: {
            type: 'string',
            title: 'Data B64Str'
        }
    },
    type: 'object',
    required: ['element_type', 'data_b64str'],
    title: 'B64FloatArray'
} as const;

export const B64UintArraySchema = {
    properties: {
        element_type: {
            type: 'string',
            enum: ['uint8', 'uint16', 'uint32', 'uint64'],
            title: 'Element Type'
        },
        data_b64str: {
            type: 'string',
            title: 'Data B64Str'
        }
    },
    type: 'object',
    required: ['element_type', 'data_b64str'],
    title: 'B64UintArray'
} as const;

export const Body_post_get_aggregated_per_realization_table_dataSchema = {
    properties: {
        identifiers_with_values: {
            items: {
                '$ref': '#/components/schemas/InplaceVolumetricsIdentifierWithValues'
            },
            type: 'array',
            title: 'Identifiers With Values',
            description: 'Selected identifiers and wanted values'
        }
    },
    type: 'object',
    required: ['identifiers_with_values'],
    title: 'Body_post_get_aggregated_per_realization_table_data'
} as const;

export const Body_post_get_aggregated_statistical_table_dataSchema = {
    properties: {
        identifiers_with_values: {
            items: {
                '$ref': '#/components/schemas/InplaceVolumetricsIdentifierWithValues'
            },
            type: 'array',
            title: 'Identifiers With Values',
            description: 'Selected identifiers and wanted values'
        }
    },
    type: 'object',
    required: ['identifiers_with_values'],
    title: 'Body_post_get_aggregated_statistical_table_data'
} as const;

export const Body_post_get_polyline_intersectionSchema = {
    properties: {
        polyline_utm_xy: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Polyline Utm Xy'
        }
    },
    type: 'object',
    required: ['polyline_utm_xy'],
    title: 'Body_post_get_polyline_intersection'
} as const;

export const Body_post_get_seismic_fenceSchema = {
    properties: {
        polyline: {
            '$ref': '#/components/schemas/SeismicFencePolyline'
        }
    },
    type: 'object',
    required: ['polyline'],
    title: 'Body_post_get_seismic_fence'
} as const;

export const Body_post_get_surface_intersectionSchema = {
    properties: {
        cumulative_length_polyline: {
            '$ref': '#/components/schemas/SurfaceIntersectionCumulativeLengthPolyline'
        }
    },
    type: 'object',
    required: ['cumulative_length_polyline'],
    title: 'Body_post_get_surface_intersection'
} as const;

export const Body_post_sample_surface_in_pointsSchema = {
    properties: {
        sample_points: {
            '$ref': '#/components/schemas/PointSetXY'
        }
    },
    type: 'object',
    required: ['sample_points'],
    title: 'Body_post_sample_surface_in_points'
} as const;

export const BoundingBox2dSchema = {
    properties: {
        min_x: {
            type: 'number',
            title: 'Min X'
        },
        min_y: {
            type: 'number',
            title: 'Min Y'
        },
        max_x: {
            type: 'number',
            title: 'Max X'
        },
        max_y: {
            type: 'number',
            title: 'Max Y'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['min_x', 'min_y', 'max_x', 'max_y'],
    title: 'BoundingBox2d'
} as const;

export const BoundingBox3dSchema = {
    properties: {
        xmin: {
            type: 'number',
            title: 'Xmin'
        },
        ymin: {
            type: 'number',
            title: 'Ymin'
        },
        zmin: {
            type: 'number',
            title: 'Zmin'
        },
        xmax: {
            type: 'number',
            title: 'Xmax'
        },
        ymax: {
            type: 'number',
            title: 'Ymax'
        },
        zmax: {
            type: 'number',
            title: 'Zmax'
        }
    },
    type: 'object',
    required: ['xmin', 'ymin', 'zmin', 'xmax', 'ymax', 'zmax'],
    title: 'BoundingBox3d',
    description: 'Bounding box for a 3D grid geometry'
} as const;

export const CaseInfoSchema = {
    properties: {
        uuid: {
            type: 'string',
            title: 'Uuid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        user: {
            type: 'string',
            title: 'User'
        }
    },
    type: 'object',
    required: ['uuid', 'name', 'status', 'user'],
    title: 'CaseInfo'
} as const;

export const CompletionsSchema = {
    properties: {
        sortedCompletionDateIndices: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Sortedcompletiondateindices'
        },
        open: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Open'
        },
        shut: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Shut'
        },
        khMean: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Khmean'
        },
        khMin: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Khmin'
        },
        khMax: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Khmax'
        }
    },
    type: 'object',
    required: ['sortedCompletionDateIndices', 'open', 'shut', 'khMean', 'khMin', 'khMax'],
    title: 'Completions'
} as const;

export const DatedTreeSchema = {
    properties: {
        dates: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Dates'
        },
        tree: {
            '$ref': '#/components/schemas/TreeNode'
        }
    },
    type: 'object',
    required: ['dates', 'tree'],
    title: 'DatedTree'
} as const;

export const EnsembleDetailsSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        field_identifier: {
            type: 'string',
            title: 'Field Identifier'
        },
        case_name: {
            type: 'string',
            title: 'Case Name'
        },
        case_uuid: {
            type: 'string',
            title: 'Case Uuid'
        },
        realizations: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Realizations'
        }
    },
    type: 'object',
    required: ['name', 'field_identifier', 'case_name', 'case_uuid', 'realizations'],
    title: 'EnsembleDetails'
} as const;

export const EnsembleInfoSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        realization_count: {
            type: 'integer',
            title: 'Realization Count'
        }
    },
    type: 'object',
    required: ['name', 'realization_count'],
    title: 'EnsembleInfo'
} as const;

export const EnsembleParameterSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        is_logarithmic: {
            type: 'boolean',
            title: 'Is Logarithmic'
        },
        is_numerical: {
            type: 'boolean',
            title: 'Is Numerical'
        },
        is_constant: {
            type: 'boolean',
            title: 'Is Constant'
        },
        group_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Name'
        },
        descriptive_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Descriptive Name'
        },
        realizations: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Realizations'
        },
        values: {
            anyOf: [
                {
                    items: {
                        type: 'number'
                    },
                    type: 'array'
                },
                {
                    items: {
                        type: 'integer'
                    },
                    type: 'array'
                },
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                }
            ],
            title: 'Values'
        }
    },
    type: 'object',
    required: ['name', 'is_logarithmic', 'is_numerical', 'is_constant', 'group_name', 'descriptive_name', 'realizations', 'values'],
    title: 'EnsembleParameter',
    description: 'Description/data for a single parameter in an ensemble'
} as const;

export const EnsembleParameterDescriptionSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Name'
        },
        descriptive_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Descriptive Name'
        },
        is_numerical: {
            type: 'boolean',
            title: 'Is Numerical'
        }
    },
    type: 'object',
    required: ['name', 'group_name', 'descriptive_name', 'is_numerical'],
    title: 'EnsembleParameterDescription'
} as const;

export const EnsembleScalarResponseSchema = {
    properties: {
        realizations: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Realizations'
        },
        values: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Values'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        unit: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Unit'
        }
    },
    type: 'object',
    required: ['realizations', 'values', 'name', 'unit'],
    title: 'EnsembleScalarResponse',
    description: 'A generic type for a scalar response from each of the members of the ensemble.'
} as const;

export const EnsembleSensitivitySchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        type: {
            '$ref': '#/components/schemas/SensitivityType'
        },
        cases: {
            items: {
                '$ref': '#/components/schemas/EnsembleSensitivityCase'
            },
            type: 'array',
            title: 'Cases'
        }
    },
    type: 'object',
    required: ['name', 'type', 'cases'],
    title: 'EnsembleSensitivity',
    description: 'Description/data for a single sensitivity in an ensemble'
} as const;

export const EnsembleSensitivityCaseSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        realizations: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Realizations'
        }
    },
    type: 'object',
    required: ['name', 'realizations'],
    title: 'EnsembleSensitivityCase',
    description: 'Description/data for a single sensitivity case in an ensemble'
} as const;

export const FenceMeshSectionSchema = {
    properties: {
        vertices_uz_b64arr: {
            '$ref': '#/components/schemas/B64FloatArray'
        },
        poly_indices_b64arr: {
            '$ref': '#/components/schemas/B64UintArray'
        },
        vertices_per_poly_b64arr: {
            '$ref': '#/components/schemas/B64UintArray'
        },
        poly_source_cell_indices_b64arr: {
            '$ref': '#/components/schemas/B64UintArray'
        },
        poly_props_b64arr: {
            '$ref': '#/components/schemas/B64FloatArray'
        },
        start_utm_x: {
            type: 'number',
            title: 'Start Utm X'
        },
        start_utm_y: {
            type: 'number',
            title: 'Start Utm Y'
        },
        end_utm_x: {
            type: 'number',
            title: 'End Utm X'
        },
        end_utm_y: {
            type: 'number',
            title: 'End Utm Y'
        }
    },
    type: 'object',
    required: ['vertices_uz_b64arr', 'poly_indices_b64arr', 'vertices_per_poly_b64arr', 'poly_source_cell_indices_b64arr', 'poly_props_b64arr', 'start_utm_x', 'start_utm_y', 'end_utm_x', 'end_utm_y'],
    title: 'FenceMeshSection'
} as const;

export const FieldInfoSchema = {
    properties: {
        field_identifier: {
            type: 'string',
            title: 'Field Identifier'
        }
    },
    type: 'object',
    required: ['field_identifier'],
    title: 'FieldInfo'
} as const;

export const FlowRateTypeSchema = {
    type: 'string',
    enum: ['OIL', 'LIQ', 'GAS', 'WG', 'TM', 'WAT'],
    title: 'FlowRateType'
} as const;

export const FluidZoneSchema = {
    type: 'string',
    enum: ['Oil', 'Gas', 'Water'],
    title: 'FluidZone'
} as const;

export const FrequencySchema = {
    type: 'string',
    enum: ['DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY'],
    title: 'Frequency'
} as const;

export const GFRSchema = {
    type: 'string',
    enum: ['GOR', 'GLR', 'OGR', 'MMW'],
    title: 'GFR'
} as const;

export const GraphUserPhotoSchema = {
    properties: {
        avatar_b64str: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar B64Str'
        }
    },
    type: 'object',
    required: ['avatar_b64str'],
    title: 'GraphUserPhoto'
} as const;

export const Grid3dDimensionsSchema = {
    properties: {
        i_count: {
            type: 'integer',
            title: 'I Count'
        },
        j_count: {
            type: 'integer',
            title: 'J Count'
        },
        k_count: {
            type: 'integer',
            title: 'K Count'
        },
        subgrids: {
            items: {
                '$ref': '#/components/schemas/Grid3dZone'
            },
            type: 'array',
            title: 'Subgrids'
        }
    },
    type: 'object',
    required: ['i_count', 'j_count', 'k_count', 'subgrids'],
    title: 'Grid3dDimensions',
    description: 'Specification of a 3D grid dimensions'
} as const;

export const Grid3dGeometrySchema = {
    properties: {
        polys_b64arr: {
            '$ref': '#/components/schemas/B64UintArray'
        },
        points_b64arr: {
            '$ref': '#/components/schemas/B64FloatArray'
        },
        poly_source_cell_indices_b64arr: {
            '$ref': '#/components/schemas/B64UintArray'
        },
        origin_utm_x: {
            type: 'number',
            title: 'Origin Utm X'
        },
        origin_utm_y: {
            type: 'number',
            title: 'Origin Utm Y'
        },
        xmin: {
            type: 'number',
            title: 'Xmin'
        },
        xmax: {
            type: 'number',
            title: 'Xmax'
        },
        ymin: {
            type: 'number',
            title: 'Ymin'
        },
        ymax: {
            type: 'number',
            title: 'Ymax'
        },
        zmin: {
            type: 'number',
            title: 'Zmin'
        },
        zmax: {
            type: 'number',
            title: 'Zmax'
        }
    },
    type: 'object',
    required: ['polys_b64arr', 'points_b64arr', 'poly_source_cell_indices_b64arr', 'origin_utm_x', 'origin_utm_y', 'xmin', 'xmax', 'ymin', 'ymax', 'zmin', 'zmax'],
    title: 'Grid3dGeometry'
} as const;

export const Grid3dInfoSchema = {
    properties: {
        grid_name: {
            type: 'string',
            title: 'Grid Name'
        },
        bbox: {
            '$ref': '#/components/schemas/BoundingBox3d'
        },
        dimensions: {
            '$ref': '#/components/schemas/Grid3dDimensions'
        },
        property_info_arr: {
            items: {
                '$ref': '#/components/schemas/Grid3dPropertyInfo'
            },
            type: 'array',
            title: 'Property Info Arr'
        }
    },
    type: 'object',
    required: ['grid_name', 'bbox', 'dimensions', 'property_info_arr'],
    title: 'Grid3dInfo',
    description: 'Metadata for a 3D grid model, including its properties and geometry'
} as const;

export const Grid3dMappedPropertySchema = {
    properties: {
        poly_props_b64arr: {
            '$ref': '#/components/schemas/B64FloatArray'
        },
        min_grid_prop_value: {
            type: 'number',
            title: 'Min Grid Prop Value'
        },
        max_grid_prop_value: {
            type: 'number',
            title: 'Max Grid Prop Value'
        }
    },
    type: 'object',
    required: ['poly_props_b64arr', 'min_grid_prop_value', 'max_grid_prop_value'],
    title: 'Grid3dMappedProperty'
} as const;

export const Grid3dPropertyInfoSchema = {
    properties: {
        property_name: {
            type: 'string',
            title: 'Property Name'
        },
        iso_date_or_interval: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Iso Date Or Interval'
        }
    },
    type: 'object',
    required: ['property_name', 'iso_date_or_interval'],
    title: 'Grid3dPropertyInfo',
    description: 'Metadata for a 3D grid property'
} as const;

export const Grid3dZoneSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        start_layer: {
            type: 'integer',
            title: 'Start Layer'
        },
        end_layer: {
            type: 'integer',
            title: 'End Layer'
        }
    },
    type: 'object',
    required: ['name', 'start_layer', 'end_layer'],
    title: 'Grid3dZone',
    description: 'Named subset of 3D grid layers (Zone)'
} as const;

export const GridDimensionsSchema = {
    properties: {
        i_count: {
            type: 'integer',
            title: 'I Count'
        },
        j_count: {
            type: 'integer',
            title: 'J Count'
        },
        k_count: {
            type: 'integer',
            title: 'K Count'
        }
    },
    type: 'object',
    required: ['i_count', 'j_count', 'k_count'],
    title: 'GridDimensions'
} as const;

export const GroupTreeDataSchema = {
    properties: {
        edge_metadata_list: {
            items: {
                '$ref': '#/components/schemas/GroupTreeMetadata'
            },
            type: 'array',
            title: 'Edge Metadata List'
        },
        node_metadata_list: {
            items: {
                '$ref': '#/components/schemas/GroupTreeMetadata'
            },
            type: 'array',
            title: 'Node Metadata List'
        },
        dated_trees: {
            items: {
                '$ref': '#/components/schemas/DatedTree'
            },
            type: 'array',
            title: 'Dated Trees'
        }
    },
    type: 'object',
    required: ['edge_metadata_list', 'node_metadata_list', 'dated_trees'],
    title: 'GroupTreeData'
} as const;

export const GroupTreeMetadataSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        label: {
            type: 'string',
            title: 'Label'
        }
    },
    type: 'object',
    required: ['key', 'label'],
    title: 'GroupTreeMetadata'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InplaceStatisticalVolumetricTableDataSchema = {
    properties: {
        fluidSelectionName: {
            type: 'string',
            title: 'Fluidselectionname'
        },
        selectorColumns: {
            items: {
                '$ref': '#/components/schemas/RepeatedTableColumnData'
            },
            type: 'array',
            title: 'Selectorcolumns'
        },
        resultColumnStatistics: {
            items: {
                '$ref': '#/components/schemas/TableColumnStatisticalData'
            },
            type: 'array',
            title: 'Resultcolumnstatistics'
        }
    },
    type: 'object',
    required: ['fluidSelectionName', 'selectorColumns', 'resultColumnStatistics'],
    title: 'InplaceStatisticalVolumetricTableData',
    description: `Statistical volumetric data for single volume table

Contains data for a single fluid zone, e.g. Oil, Gas, Water, or sum of fluid zones`
} as const;

export const InplaceStatisticalVolumetricTableDataPerFluidSelectionSchema = {
    properties: {
        tableDataPerFluidSelection: {
            items: {
                '$ref': '#/components/schemas/InplaceStatisticalVolumetricTableData'
            },
            type: 'array',
            title: 'Tabledataperfluidselection'
        }
    },
    type: 'object',
    required: ['tableDataPerFluidSelection'],
    title: 'InplaceStatisticalVolumetricTableDataPerFluidSelection',
    description: `Statistical volumetric data for a single table per fluid selection

Fluid selection can be single fluid zones, e.g. Oil, Gas, Water, or sum of fluid zones - Oil + Gas + Water`
} as const;

export const InplaceVolumetricResultNameSchema = {
    type: 'string',
    enum: ['BULK', 'NET', 'PORO', 'PORO_NET', 'PORV', 'HCPV', 'STOIIP', 'GIIP', 'NTG', 'ASSOCIATEDGAS', 'ASSOCIATEDOIL', 'BO', 'BG', 'SW', 'STOIIP_TOTAL', 'GIIP_TOTAL'],
    title: 'InplaceVolumetricResultName',
    description: 'Allowed volumetric response names'
} as const;

export const InplaceVolumetricStatisticSchema = {
    type: 'string',
    enum: ['mean', 'stddev', 'max', 'min', 'p10', 'p90'],
    title: 'InplaceVolumetricStatistic',
    description: 'Definition of possible statistics for a result column in an inplace volumetrics table'
} as const;

export const InplaceVolumetricTableDataSchema = {
    properties: {
        fluidSelectionName: {
            type: 'string',
            title: 'Fluidselectionname'
        },
        selectorColumns: {
            items: {
                '$ref': '#/components/schemas/RepeatedTableColumnData'
            },
            type: 'array',
            title: 'Selectorcolumns'
        },
        resultColumns: {
            items: {
                '$ref': '#/components/schemas/TableColumnData'
            },
            type: 'array',
            title: 'Resultcolumns'
        }
    },
    type: 'object',
    required: ['fluidSelectionName', 'selectorColumns', 'resultColumns'],
    title: 'InplaceVolumetricTableData',
    description: `Volumetric data for a single table

Contains data for a single fluid zone, e.g. Oil, Gas, Water, or sum of fluid zones`
} as const;

export const InplaceVolumetricTableDataPerFluidSelectionSchema = {
    properties: {
        tableDataPerFluidSelection: {
            items: {
                '$ref': '#/components/schemas/InplaceVolumetricTableData'
            },
            type: 'array',
            title: 'Tabledataperfluidselection'
        }
    },
    type: 'object',
    required: ['tableDataPerFluidSelection'],
    title: 'InplaceVolumetricTableDataPerFluidSelection',
    description: `Volumetric data for a single table per fluid selection

Fluid selection can be single fluid zones, e.g. Oil, Gas, Water, or sum of fluid zones - Oil + Gas + Water`
} as const;

export const InplaceVolumetricsIdentifierSchema = {
    type: 'string',
    enum: ['ZONE', 'REGION', 'FACIES', 'LICENSE'],
    title: 'InplaceVolumetricsIdentifier'
} as const;

export const InplaceVolumetricsIdentifierWithValuesSchema = {
    properties: {
        identifier: {
            '$ref': '#/components/schemas/InplaceVolumetricsIdentifier'
        },
        values: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['identifier', 'values'],
    title: 'InplaceVolumetricsIdentifierWithValues',
    description: `Unique values for an index column in a volumetric table
All values should ideally be strings, but it is common to see integers, especially for REGION`
} as const;

export const InplaceVolumetricsTableDefinitionSchema = {
    properties: {
        tableName: {
            type: 'string',
            title: 'Tablename'
        },
        fluidZones: {
            items: {
                '$ref': '#/components/schemas/FluidZone'
            },
            type: 'array',
            title: 'Fluidzones'
        },
        resultNames: {
            items: {
                '$ref': '#/components/schemas/InplaceVolumetricResultName'
            },
            type: 'array',
            title: 'Resultnames'
        },
        identifiersWithValues: {
            items: {
                '$ref': '#/components/schemas/InplaceVolumetricsIdentifierWithValues'
            },
            type: 'array',
            title: 'Identifierswithvalues'
        }
    },
    type: 'object',
    required: ['tableName', 'fluidZones', 'resultNames', 'identifiersWithValues'],
    title: 'InplaceVolumetricsTableDefinition',
    description: 'Definition of a volumetric table'
} as const;

export const NodeTypeSchema = {
    type: 'string',
    enum: ['prod', 'inj', 'other'],
    title: 'NodeType'
} as const;

export const ObservationsSchema = {
    properties: {
        summary: {
            items: {
                '$ref': '#/components/schemas/SummaryVectorObservations'
            },
            type: 'array',
            title: 'Summary',
            default: []
        },
        rft: {
            items: {
                '$ref': '#/components/schemas/RftObservations'
            },
            type: 'array',
            title: 'Rft',
            default: []
        }
    },
    type: 'object',
    required: ['summary', 'rft'],
    title: 'Observations',
    description: 'A collection of observations associated with a field/case/ensemble'
} as const;

export const PointSetXYSchema = {
    properties: {
        x_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'X Points'
        },
        y_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Y Points'
        }
    },
    type: 'object',
    required: ['x_points', 'y_points'],
    title: 'PointSetXY'
} as const;

export const PolygonDataSchema = {
    properties: {
        x_arr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'X Arr'
        },
        y_arr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Y Arr'
        },
        z_arr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Z Arr'
        },
        poly_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'string'
                }
            ],
            title: 'Poly Id'
        }
    },
    type: 'object',
    required: ['x_arr', 'y_arr', 'z_arr', 'poly_id'],
    title: 'PolygonData'
} as const;

export const PolygonsAttributeTypeSchema = {
    type: 'string',
    enum: ['depth', 'time', 'property', 'seismic', 'thickness', 'isochore', 'fluid_contact', 'field_outline', 'pinchout', 'subcrop', 'fault_lines'],
    title: 'PolygonsAttributeType',
    description: 'To be revisited later when the metadata is more mature.'
} as const;

export const PolygonsMetaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        name_is_stratigraphic_offical: {
            type: 'boolean',
            title: 'Name Is Stratigraphic Offical'
        },
        stratigraphic_identifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stratigraphic Identifier'
        },
        relative_stratigraphic_level: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Relative Stratigraphic Level'
        },
        parent_stratigraphic_identifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Stratigraphic Identifier'
        },
        attribute_name: {
            type: 'string',
            title: 'Attribute Name'
        },
        attribute_type: {
            '$ref': '#/components/schemas/PolygonsAttributeType'
        }
    },
    type: 'object',
    required: ['name', 'name_is_stratigraphic_offical', 'stratigraphic_identifier', 'relative_stratigraphic_level', 'parent_stratigraphic_identifier', 'attribute_name', 'attribute_type'],
    title: 'PolygonsMeta'
} as const;

export const PolylineIntersectionSchema = {
    properties: {
        fence_mesh_sections: {
            items: {
                '$ref': '#/components/schemas/FenceMeshSection'
            },
            type: 'array',
            title: 'Fence Mesh Sections'
        },
        grid_dimensions: {
            '$ref': '#/components/schemas/GridDimensions'
        },
        min_grid_prop_value: {
            type: 'number',
            title: 'Min Grid Prop Value'
        },
        max_grid_prop_value: {
            type: 'number',
            title: 'Max Grid Prop Value'
        }
    },
    type: 'object',
    required: ['fence_mesh_sections', 'grid_dimensions', 'min_grid_prop_value', 'max_grid_prop_value'],
    title: 'PolylineIntersection'
} as const;

export const PvtDataSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        phase: {
            type: 'string',
            title: 'Phase'
        },
        pvtnum: {
            type: 'integer',
            title: 'Pvtnum'
        },
        ratio: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Ratio'
        },
        pressure: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Pressure'
        },
        volumefactor: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Volumefactor'
        },
        viscosity: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Viscosity'
        },
        density: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Density'
        },
        pressure_unit: {
            type: 'string',
            title: 'Pressure Unit'
        },
        volumefactor_unit: {
            type: 'string',
            title: 'Volumefactor Unit'
        },
        viscosity_unit: {
            type: 'string',
            title: 'Viscosity Unit'
        },
        density_unit: {
            type: 'string',
            title: 'Density Unit'
        },
        ratio_unit: {
            type: 'string',
            title: 'Ratio Unit'
        }
    },
    type: 'object',
    required: ['name', 'phase', 'pvtnum', 'ratio', 'pressure', 'volumefactor', 'viscosity', 'density', 'pressure_unit', 'volumefactor_unit', 'viscosity_unit', 'density_unit', 'ratio_unit'],
    title: 'PvtData'
} as const;

export const RepeatedTableColumnDataSchema = {
    properties: {
        columnName: {
            type: 'string',
            title: 'Columnname'
        },
        uniqueValues: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Uniquevalues'
        },
        indices: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Indices'
        }
    },
    type: 'object',
    required: ['columnName', 'uniqueValues', 'indices'],
    title: 'RepeatedTableColumnData',
    description: `Data for a single column in a volumetric table

Length of index list should be equal to the number of rows in the table

- unique_values: List of unique values in the column
- indices: List of indices, in unique_values list, for each row in the table`
} as const;

export const RftInfoSchema = {
    properties: {
        well_name: {
            type: 'string',
            title: 'Well Name'
        },
        timestamps_utc_ms: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Timestamps Utc Ms'
        }
    },
    type: 'object',
    required: ['well_name', 'timestamps_utc_ms'],
    title: 'RftInfo'
} as const;

export const RftObservationSchema = {
    properties: {
        value: {
            type: 'number',
            title: 'Value'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        error: {
            type: 'number',
            title: 'Error'
        },
        zone: {
            type: 'string',
            title: 'Zone'
        },
        md_msl: {
            type: 'number',
            title: 'Md Msl'
        },
        x: {
            type: 'number',
            title: 'X'
        },
        y: {
            type: 'number',
            title: 'Y'
        },
        z: {
            type: 'number',
            title: 'Z'
        }
    },
    type: 'object',
    required: ['value', 'comment', 'error', 'zone', 'md_msl', 'x', 'y', 'z'],
    title: 'RftObservation',
    description: `A specific RFT (Repeat Formation Tester) observation.

Attributes:
    value (float): The measured value of the observation.
    comment (Optional[str]): An optional comment associated with the observation.
    error (float): The measurement error associated with the observation.
    zone (str): The zone or region associated with the observation.
    md_msl (float): Measured depth from mean sea level.
    x (float): X utm coordinate of the observation.
    y (float): Y utm coordinate of the observation.
    z (float): Z utm coordinate of the observation.`
} as const;

export const RftObservationsSchema = {
    properties: {
        well: {
            type: 'string',
            title: 'Well'
        },
        date: {
            type: 'string',
            title: 'Date'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        observations: {
            items: {
                '$ref': '#/components/schemas/RftObservation'
            },
            type: 'array',
            title: 'Observations'
        }
    },
    type: 'object',
    required: ['well', 'date', 'comment', 'observations'],
    title: 'RftObservations',
    description: `A collection of RFT (Repeat Formation Tester) observations for a specific well at a specific date.

Attributes:
    well (str): Unique well identifier
    date (str): Observation date
    comment (Optional[str]): An optional comment associated with the collection of observations.
    observations (List[RftObservation]): A list of RFT observations associated with this collection.`
} as const;

export const RftRealizationDataSchema = {
    properties: {
        well_name: {
            type: 'string',
            title: 'Well Name'
        },
        realization: {
            type: 'integer',
            title: 'Realization'
        },
        timestamp_utc_ms: {
            type: 'integer',
            title: 'Timestamp Utc Ms'
        },
        depth_arr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Depth Arr'
        },
        value_arr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Value Arr'
        }
    },
    type: 'object',
    required: ['well_name', 'realization', 'timestamp_utc_ms', 'depth_arr', 'value_arr'],
    title: 'RftRealizationData'
} as const;

export const SeismicCubeMetaSchema = {
    properties: {
        seismic_attribute: {
            type: 'string',
            title: 'Seismic Attribute'
        },
        iso_date_or_interval: {
            type: 'string',
            title: 'Iso Date Or Interval'
        },
        is_observation: {
            type: 'boolean',
            title: 'Is Observation'
        },
        is_depth: {
            type: 'boolean',
            title: 'Is Depth'
        }
    },
    type: 'object',
    required: ['seismic_attribute', 'iso_date_or_interval', 'is_observation', 'is_depth'],
    title: 'SeismicCubeMeta'
} as const;

export const SeismicFenceDataSchema = {
    properties: {
        fence_traces_b64arr: {
            '$ref': '#/components/schemas/B64FloatArray'
        },
        num_traces: {
            type: 'integer',
            title: 'Num Traces'
        },
        num_samples_per_trace: {
            type: 'integer',
            title: 'Num Samples Per Trace'
        },
        min_fence_depth: {
            type: 'number',
            title: 'Min Fence Depth'
        },
        max_fence_depth: {
            type: 'number',
            title: 'Max Fence Depth'
        }
    },
    type: 'object',
    required: ['fence_traces_b64arr', 'num_traces', 'num_samples_per_trace', 'min_fence_depth', 'max_fence_depth'],
    title: 'SeismicFenceData',
    description: `Definition of a fence of seismic data from a set of (x, y) coordinates in domain coordinate system.
Each (x, y) point provides a trace perpendicular to the x-y plane, with number of samples equal to the depth of the seismic cube.

Each trace is defined to be a set of depth value samples along the length direction of the fence.

\`Properties:\`
- \`fence_traces_b64arr\`: The fence trace array is base64 encoded 1D float array - where data is stored trace by trace.
- \`num_traces\`: The number of traces in the fence trace array. Equals the number of (x, y) coordinates in requested polyline.
- \`num_samples_per_trace\`: The number of samples in each trace.
- \`min_fence_depth\`: The minimum depth value of the fence.
- \`max_fence_depth\`: The maximum depth value of the fence.

\`Description - fence_traces_b64arr:\`

The encoded fence trace array is a flattened array of traces, where data is stored trace by trace.
With \`m = num_traces\`, and \`n = num_samples_per_trace\`, the flattened array has length \`mxn\`.

Fence traces 1D array: [trace_1_sample_1, trace_1_sample_2, ..., trace_1_sample_n, ..., trace_m_sample_1, trace_m_sample_2, ..., trace_m_sample_n] 


See:
- VdsAxis: https://github.com/equinor/vds-slice/blob/ab6f39789bf3d3b59a8df14f1c4682d340dc0bf3/internal/core/core.go#L37-L55`
} as const;

export const SeismicFencePolylineSchema = {
    properties: {
        x_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'X Points'
        },
        y_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Y Points'
        }
    },
    type: 'object',
    required: ['x_points', 'y_points'],
    title: 'SeismicFencePolyline',
    description: `(x, y) points defining a polyline in domain coordinate system, to retrieve fence of seismic data.

Expect equal number of x- and y-points.

Note: Coordinates are in domain coordinate system (UTM).

NOTE:
- Verify coordinates are in domain coordinate system (UTM)?
- Consider points_xy: List[float] - i.e. array with [x1, y1, x2, y2, ..., xn, yn] instead of x_points and y_points arrays?
- Ensure equal length of x_points and y_points arrays?`
} as const;

export const SensitivityTypeSchema = {
    type: 'string',
    enum: ['montecarlo', 'scenario'],
    title: 'SensitivityType'
} as const;

export const StatisticFunctionSchema = {
    type: 'string',
    enum: ['MEAN', 'MIN', 'MAX', 'P10', 'P90', 'P50'],
    title: 'StatisticFunction'
} as const;

export const StatisticValueObjectSchema = {
    properties: {
        statistic_function: {
            '$ref': '#/components/schemas/StatisticFunction'
        },
        values: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['statistic_function', 'values'],
    title: 'StatisticValueObject'
} as const;

export const StratigraphicUnitSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier'
        },
        top: {
            type: 'string',
            title: 'Top'
        },
        base: {
            type: 'string',
            title: 'Base'
        },
        stratUnitLevel: {
            type: 'integer',
            title: 'Stratunitlevel'
        },
        stratUnitType: {
            type: 'string',
            title: 'Stratunittype'
        },
        topAge: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Topage'
        },
        baseAge: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Baseage'
        },
        stratUnitParent: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stratunitparent'
        },
        colorR: {
            type: 'integer',
            title: 'Colorr'
        },
        colorG: {
            type: 'integer',
            title: 'Colorg'
        },
        colorB: {
            type: 'integer',
            title: 'Colorb'
        },
        lithologyType: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                },
                {
                    type: 'string'
                }
            ],
            title: 'Lithologytype',
            default: 'unknown'
        }
    },
    type: 'object',
    required: ['identifier', 'top', 'base', 'stratUnitLevel', 'stratUnitType', 'topAge', 'baseAge', 'stratUnitParent', 'colorR', 'colorG', 'colorB', 'lithologyType'],
    title: 'StratigraphicUnit',
    description: `Stratigraphic unit from SMDA

Camel case attributes needed for esvIntersection component in front-end`
} as const;

export const SummaryVectorDateObservationSchema = {
    properties: {
        date: {
            type: 'string',
            title: 'Date'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        value: {
            type: 'number',
            title: 'Value'
        },
        error: {
            type: 'number',
            title: 'Error'
        },
        label: {
            type: 'string',
            title: 'Label'
        }
    },
    type: 'object',
    required: ['date', 'comment', 'value', 'error', 'label'],
    title: 'SummaryVectorDateObservation',
    description: 'A single observation of a summary vector at a specific date.'
} as const;

export const SummaryVectorObservationsSchema = {
    properties: {
        vector_name: {
            type: 'string',
            title: 'Vector Name'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        observations: {
            items: {
                '$ref': '#/components/schemas/SummaryVectorDateObservation'
            },
            type: 'array',
            title: 'Observations'
        }
    },
    type: 'object',
    required: ['vector_name', 'comment', 'observations'],
    title: 'SummaryVectorObservations',
    description: 'A collection of observations of a summary vector.'
} as const;

export const SurfaceAttributeTypeSchema = {
    type: 'string',
    enum: ['depth', 'facies_thickness', 'fluid_contact', 'pinchout', 'property', 'seismic', 'subcrop', 'thickness', 'time', 'velocity', 'volumes', 'UNKNOWN'],
    title: 'SurfaceAttributeType',
    description: `A surface has a single array with values, e.g. depth, time, property, seismic, thickness.
Only surfaces with depth and time have z-values that can be plotted in 3D.
The other attributes are scalar values that can be plotted in 2D or used as colormapping for 3D surfaces.

Ideally if the attribute is a scalar, there should be corresponding z-values, but this information is not
available in the metadata.

To be revisited later when the metadata is more mature.`
} as const;

export const SurfaceDataFloatSchema = {
    properties: {
        format: {
            const: 'float',
            title: 'Format',
            default: 'float'
        },
        surface_def: {
            '$ref': '#/components/schemas/SurfaceDef'
        },
        transformed_bbox_utm: {
            '$ref': '#/components/schemas/BoundingBox2d'
        },
        value_min: {
            type: 'number',
            title: 'Value Min'
        },
        value_max: {
            type: 'number',
            title: 'Value Max'
        },
        values_b64arr: {
            '$ref': '#/components/schemas/B64FloatArray'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['format', 'surface_def', 'transformed_bbox_utm', 'value_min', 'value_max', 'values_b64arr'],
    title: 'SurfaceDataFloat'
} as const;

export const SurfaceDataPngSchema = {
    properties: {
        format: {
            const: 'png',
            title: 'Format',
            default: 'png'
        },
        surface_def: {
            '$ref': '#/components/schemas/SurfaceDef'
        },
        transformed_bbox_utm: {
            '$ref': '#/components/schemas/BoundingBox2d'
        },
        value_min: {
            type: 'number',
            title: 'Value Min'
        },
        value_max: {
            type: 'number',
            title: 'Value Max'
        },
        png_image_base64: {
            type: 'string',
            title: 'Png Image Base64'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['format', 'surface_def', 'transformed_bbox_utm', 'value_min', 'value_max', 'png_image_base64'],
    title: 'SurfaceDataPng'
} as const;

export const SurfaceDefSchema = {
    properties: {
        npoints_x: {
            type: 'integer',
            title: 'Npoints X'
        },
        npoints_y: {
            type: 'integer',
            title: 'Npoints Y'
        },
        inc_x: {
            type: 'number',
            title: 'Inc X'
        },
        inc_y: {
            type: 'number',
            title: 'Inc Y'
        },
        origin_utm_x: {
            type: 'number',
            title: 'Origin Utm X'
        },
        origin_utm_y: {
            type: 'number',
            title: 'Origin Utm Y'
        },
        rot_deg: {
            type: 'number',
            title: 'Rot Deg'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['npoints_x', 'npoints_y', 'inc_x', 'inc_y', 'origin_utm_x', 'origin_utm_y', 'rot_deg'],
    title: 'SurfaceDef'
} as const;

export const SurfaceIntersectionCumulativeLengthPolylineSchema = {
    properties: {
        x_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'X Points'
        },
        y_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Y Points'
        },
        cum_lengths: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Cum Lengths'
        }
    },
    type: 'object',
    required: ['x_points', 'y_points', 'cum_lengths'],
    title: 'SurfaceIntersectionCumulativeLengthPolyline',
    description: `(x, y) points defining a polyline in domain coordinate system, to retrieve intersection of a surface, with a cumulative length
between at each (x, y)-point coordinates in domain coordinate system.

Expect equal number of x- and y-points.

x_points: X-coordinates of polyline points.
y_points: Y-coordinates of polyline points.
cum_lengths: Cumulative lengths of the polyline segments, i.e. the length of the polyline up to each (x,y) point.

The cumulative lengths can be e.g. measured depth along a well path.

Note: Coordinates are in domain coordinate system (UTM)

Note: Verify if cum_lengths is necessary with respect to xtgeo`
} as const;

export const SurfaceIntersectionDataSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        z_points: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Z Points'
        },
        cum_lengths: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Cum Lengths'
        }
    },
    type: 'object',
    required: ['name', 'z_points', 'cum_lengths'],
    title: 'SurfaceIntersectionData',
    description: `Definition of a surface intersection made from a set of (x, y) coordinates.

name: Name of the surface
z_points: Array of z-points (depth values) at the intersection points, i.e. depth value for each (x,y) point.
cum_lengths: Cumulative length values at the intersection points, i.e. accumulated length between each element in the z points.`
} as const;

export const SurfaceMetaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        name_is_stratigraphic_offical: {
            type: 'boolean',
            title: 'Name Is Stratigraphic Offical'
        },
        attribute_name: {
            type: 'string',
            title: 'Attribute Name'
        },
        attribute_type: {
            '$ref': '#/components/schemas/SurfaceAttributeType'
        },
        time_type: {
            '$ref': '#/components/schemas/SurfaceTimeType'
        },
        is_observation: {
            type: 'boolean',
            title: 'Is Observation'
        },
        value_min: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value Min'
        },
        value_max: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value Max'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'name_is_stratigraphic_offical', 'attribute_name', 'attribute_type', 'time_type', 'is_observation', 'value_min', 'value_max'],
    title: 'SurfaceMeta'
} as const;

export const SurfaceMetaSetSchema = {
    properties: {
        surfaces: {
            items: {
                '$ref': '#/components/schemas/SurfaceMeta'
            },
            type: 'array',
            title: 'Surfaces'
        },
        time_points_iso_str: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Time Points Iso Str'
        },
        time_intervals_iso_str: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Time Intervals Iso Str'
        },
        surface_names_in_strat_order: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Surface Names In Strat Order'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['surfaces', 'time_points_iso_str', 'time_intervals_iso_str', 'surface_names_in_strat_order'],
    title: 'SurfaceMetaSet'
} as const;

export const SurfaceRealizationSampleValuesSchema = {
    properties: {
        realization: {
            type: 'integer',
            title: 'Realization'
        },
        sampled_values: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Sampled Values'
        }
    },
    type: 'object',
    required: ['realization', 'sampled_values'],
    title: 'SurfaceRealizationSampleValues'
} as const;

export const SurfaceStatisticFunctionSchema = {
    type: 'string',
    enum: ['MEAN', 'STD', 'MIN', 'MAX', 'P10', 'P90', 'P50'],
    title: 'SurfaceStatisticFunction'
} as const;

export const SurfaceTimeTypeSchema = {
    type: 'string',
    enum: ['NO_TIME', 'TIME_POINT', 'INTERVAL'],
    title: 'SurfaceTimeType'
} as const;

export const THPSchema = {
    const: 'THP',
    title: 'THP'
} as const;

export const TabTypeSchema = {
    type: 'string',
    enum: ['BHP', 'TEMP'],
    title: 'TabType'
} as const;

export const TableColumnDataSchema = {
    properties: {
        columnName: {
            type: 'string',
            title: 'Columnname'
        },
        columnValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Columnvalues'
        }
    },
    type: 'object',
    required: ['columnName', 'columnValues'],
    title: 'TableColumnData',
    description: `Data for a single column in a volumetric table

Length of column values should be equal to the number of rows in the table`
} as const;

export const TableColumnStatisticalDataSchema = {
    properties: {
        columnName: {
            type: 'string',
            title: 'Columnname'
        },
        statisticValues: {
            additionalProperties: {
                items: {
                    type: 'number'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Statisticvalues'
        }
    },
    type: 'object',
    required: ['columnName', 'statisticValues'],
    title: 'TableColumnStatisticalData',
    description: `Statistical data for a single result column in a volumetric table

Length of column values should be equal to the number of rows in the table`
} as const;

export const TreeNodeSchema = {
    properties: {
        node_type: {
            type: 'string',
            enum: ['Group', 'Well'],
            title: 'Node Type'
        },
        node_label: {
            type: 'string',
            title: 'Node Label'
        },
        edge_label: {
            type: 'string',
            title: 'Edge Label'
        },
        node_data: {
            additionalProperties: {
                items: {
                    type: 'number'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Node Data'
        },
        edge_data: {
            additionalProperties: {
                items: {
                    type: 'number'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Edge Data'
        },
        children: {
            items: {
                '$ref': '#/components/schemas/TreeNode'
            },
            type: 'array',
            title: 'Children'
        }
    },
    type: 'object',
    required: ['node_type', 'node_label', 'edge_label', 'node_data', 'edge_data', 'children'],
    title: 'TreeNode'
} as const;

export const UnitTypeSchema = {
    type: 'string',
    enum: ['METRIC', 'FIELD', 'LAB', 'PVT-M', 'DEFAULT'],
    title: 'UnitType'
} as const;

export const UserInfoSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username'
        },
        display_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Display Name'
        },
        avatar_b64str: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar B64Str'
        },
        has_sumo_access: {
            type: 'boolean',
            title: 'Has Sumo Access'
        },
        has_smda_access: {
            type: 'boolean',
            title: 'Has Smda Access'
        }
    },
    type: 'object',
    required: ['username', 'display_name', 'avatar_b64str', 'has_sumo_access', 'has_smda_access'],
    title: 'UserInfo'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const VectorDescriptionSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        descriptive_name: {
            type: 'string',
            title: 'Descriptive Name'
        },
        has_historical: {
            type: 'boolean',
            title: 'Has Historical'
        }
    },
    type: 'object',
    required: ['name', 'descriptive_name', 'has_historical'],
    title: 'VectorDescription'
} as const;

export const VectorHistoricalDataSchema = {
    properties: {
        timestamps_utc_ms: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Timestamps Utc Ms'
        },
        values: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Values'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        is_rate: {
            type: 'boolean',
            title: 'Is Rate'
        }
    },
    type: 'object',
    required: ['timestamps_utc_ms', 'values', 'unit', 'is_rate'],
    title: 'VectorHistoricalData'
} as const;

export const VectorRealizationDataSchema = {
    properties: {
        realization: {
            type: 'integer',
            title: 'Realization'
        },
        timestamps_utc_ms: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Timestamps Utc Ms'
        },
        values: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Values'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        is_rate: {
            type: 'boolean',
            title: 'Is Rate'
        }
    },
    type: 'object',
    required: ['realization', 'timestamps_utc_ms', 'values', 'unit', 'is_rate'],
    title: 'VectorRealizationData'
} as const;

export const VectorStatisticDataSchema = {
    properties: {
        realizations: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Realizations'
        },
        timestamps_utc_ms: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Timestamps Utc Ms'
        },
        value_objects: {
            items: {
                '$ref': '#/components/schemas/StatisticValueObject'
            },
            type: 'array',
            title: 'Value Objects'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        is_rate: {
            type: 'boolean',
            title: 'Is Rate'
        }
    },
    type: 'object',
    required: ['realizations', 'timestamps_utc_ms', 'value_objects', 'unit', 'is_rate'],
    title: 'VectorStatisticData'
} as const;

export const VectorStatisticSensitivityDataSchema = {
    properties: {
        realizations: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Realizations'
        },
        timestamps_utc_ms: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Timestamps Utc Ms'
        },
        value_objects: {
            items: {
                '$ref': '#/components/schemas/StatisticValueObject'
            },
            type: 'array',
            title: 'Value Objects'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        is_rate: {
            type: 'boolean',
            title: 'Is Rate'
        },
        sensitivity_name: {
            type: 'string',
            title: 'Sensitivity Name'
        },
        sensitivity_case: {
            type: 'string',
            title: 'Sensitivity Case'
        }
    },
    type: 'object',
    required: ['realizations', 'timestamps_utc_ms', 'value_objects', 'unit', 'is_rate', 'sensitivity_name', 'sensitivity_case'],
    title: 'VectorStatisticSensitivityData'
} as const;

export const VfpInjTableSchema = {
    properties: {
        isInjTable: {
            type: 'boolean',
            title: 'Isinjtable',
            default: true
        },
        tableNumber: {
            type: 'integer',
            title: 'Tablenumber'
        },
        datum: {
            type: 'number',
            title: 'Datum'
        },
        flowRateType: {
            '$ref': '#/components/schemas/FlowRateType'
        },
        unitType: {
            '$ref': '#/components/schemas/UnitType'
        },
        tabType: {
            '$ref': '#/components/schemas/TabType'
        },
        thpValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Thpvalues'
        },
        flowRateValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Flowratevalues'
        },
        bhpValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Bhpvalues'
        },
        flowRateUnit: {
            type: 'string',
            title: 'Flowrateunit'
        },
        thpUnit: {
            type: 'string',
            title: 'Thpunit'
        },
        bhpUnit: {
            type: 'string',
            title: 'Bhpunit'
        }
    },
    type: 'object',
    required: ['isInjTable', 'tableNumber', 'datum', 'flowRateType', 'unitType', 'tabType', 'thpValues', 'flowRateValues', 'bhpValues', 'flowRateUnit', 'thpUnit', 'bhpUnit'],
    title: 'VfpInjTable'
} as const;

export const VfpProdTableSchema = {
    properties: {
        isProdTable: {
            type: 'boolean',
            title: 'Isprodtable',
            default: true
        },
        tableNumber: {
            type: 'integer',
            title: 'Tablenumber'
        },
        datum: {
            type: 'number',
            title: 'Datum'
        },
        thpType: {
            '$ref': '#/components/schemas/THP'
        },
        wfrType: {
            '$ref': '#/components/schemas/WFR'
        },
        gfrType: {
            '$ref': '#/components/schemas/GFR'
        },
        alqType: {
            '$ref': '#/components/schemas/ALQ'
        },
        flowRateType: {
            '$ref': '#/components/schemas/FlowRateType'
        },
        unitType: {
            '$ref': '#/components/schemas/UnitType'
        },
        tabType: {
            '$ref': '#/components/schemas/TabType'
        },
        thpValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Thpvalues'
        },
        wfrValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Wfrvalues'
        },
        gfrValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Gfrvalues'
        },
        alqValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Alqvalues'
        },
        flowRateValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Flowratevalues'
        },
        bhpValues: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Bhpvalues'
        },
        flowRateUnit: {
            type: 'string',
            title: 'Flowrateunit'
        },
        thpUnit: {
            type: 'string',
            title: 'Thpunit'
        },
        wfrUnit: {
            type: 'string',
            title: 'Wfrunit'
        },
        gfrUnit: {
            type: 'string',
            title: 'Gfrunit'
        },
        alqUnit: {
            type: 'string',
            title: 'Alqunit'
        },
        bhpUnit: {
            type: 'string',
            title: 'Bhpunit'
        }
    },
    type: 'object',
    required: ['isProdTable', 'tableNumber', 'datum', 'thpType', 'wfrType', 'gfrType', 'alqType', 'flowRateType', 'unitType', 'tabType', 'thpValues', 'wfrValues', 'gfrValues', 'alqValues', 'flowRateValues', 'bhpValues', 'flowRateUnit', 'thpUnit', 'wfrUnit', 'gfrUnit', 'alqUnit', 'bhpUnit'],
    title: 'VfpProdTable'
} as const;

export const WFRSchema = {
    type: 'string',
    enum: ['WOR', 'WCT', 'WGR', 'WWR', 'WTF'],
    title: 'WFR'
} as const;

export const WellCompletionsDataSchema = {
    properties: {
        version: {
            type: 'string',
            title: 'Version'
        },
        units: {
            '$ref': '#/components/schemas/WellCompletionsUnits'
        },
        zones: {
            items: {
                '$ref': '#/components/schemas/WellCompletionsZone'
            },
            type: 'array',
            title: 'Zones'
        },
        sortedCompletionDates: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Sortedcompletiondates'
        },
        wells: {
            items: {
                '$ref': '#/components/schemas/WellCompletionsWell'
            },
            type: 'array',
            title: 'Wells'
        }
    },
    type: 'object',
    required: ['version', 'units', 'zones', 'sortedCompletionDates', 'wells'],
    title: 'WellCompletionsData',
    description: 'Type definition for well completions data'
} as const;

export const WellCompletionsUnitInfoSchema = {
    properties: {
        unit: {
            type: 'string',
            title: 'Unit'
        },
        decimalPlaces: {
            type: 'integer',
            title: 'Decimalplaces'
        }
    },
    type: 'object',
    required: ['unit', 'decimalPlaces'],
    title: 'WellCompletionsUnitInfo'
} as const;

export const WellCompletionsUnitsSchema = {
    properties: {
        kh: {
            '$ref': '#/components/schemas/WellCompletionsUnitInfo'
        }
    },
    type: 'object',
    required: ['kh'],
    title: 'WellCompletionsUnits'
} as const;

export const WellCompletionsWellSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        attributes: {
            additionalProperties: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'boolean'
                    }
                ]
            },
            type: 'object',
            title: 'Attributes'
        },
        completions: {
            additionalProperties: {
                '$ref': '#/components/schemas/Completions'
            },
            type: 'object',
            title: 'Completions'
        }
    },
    type: 'object',
    required: ['name', 'attributes', 'completions'],
    title: 'WellCompletionsWell'
} as const;

export const WellCompletionsZoneSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        subzones: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/WellCompletionsZone'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subzones'
        }
    },
    type: 'object',
    required: ['name', 'subzones'],
    title: 'WellCompletionsZone'
} as const;

export const WellboreCasingSchema = {
    properties: {
        itemType: {
            type: 'string',
            title: 'Itemtype'
        },
        diameterNumeric: {
            type: 'number',
            title: 'Diameternumeric'
        },
        diameterInner: {
            type: 'number',
            title: 'Diameterinner'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        remark: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Remark'
        },
        depthTopMd: {
            type: 'number',
            title: 'Depthtopmd'
        },
        depthBottomMd: {
            type: 'number',
            title: 'Depthbottommd'
        },
        totalDepthMd: {
            type: 'number',
            title: 'Totaldepthmd'
        },
        startDepth: {
            type: 'number',
            title: 'Startdepth'
        },
        endDepth: {
            type: 'number',
            title: 'Enddepth'
        }
    },
    type: 'object',
    required: ['itemType', 'diameterNumeric', 'diameterInner', 'description', 'remark', 'depthTopMd', 'depthBottomMd', 'totalDepthMd', 'startDepth', 'endDepth'],
    title: 'WellboreCasing'
} as const;

export const WellboreCompletionSchema = {
    properties: {
        mdTop: {
            type: 'number',
            title: 'Mdtop'
        },
        mdBottom: {
            type: 'number',
            title: 'Mdbottom'
        },
        tvdTop: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tvdtop'
        },
        tvdBottom: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tvdbottom'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        symbolName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Symbolname'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        }
    },
    type: 'object',
    required: ['mdTop', 'mdBottom', 'tvdTop', 'tvdBottom', 'description', 'symbolName', 'comment'],
    title: 'WellboreCompletion'
} as const;

export const WellboreHeaderSchema = {
    properties: {
        wellboreUuid: {
            type: 'string',
            title: 'Wellboreuuid'
        },
        uniqueWellboreIdentifier: {
            type: 'string',
            title: 'Uniquewellboreidentifier'
        },
        wellUuid: {
            type: 'string',
            title: 'Welluuid'
        },
        uniqueWellIdentifier: {
            type: 'string',
            title: 'Uniquewellidentifier'
        },
        wellEasting: {
            type: 'number',
            title: 'Welleasting'
        },
        wellNorthing: {
            type: 'number',
            title: 'Wellnorthing'
        },
        depthReferencePoint: {
            type: 'string',
            title: 'Depthreferencepoint'
        },
        depthReferenceElevation: {
            type: 'number',
            title: 'Depthreferenceelevation'
        }
    },
    type: 'object',
    required: ['wellboreUuid', 'uniqueWellboreIdentifier', 'wellUuid', 'uniqueWellIdentifier', 'wellEasting', 'wellNorthing', 'depthReferencePoint', 'depthReferenceElevation'],
    title: 'WellboreHeader'
} as const;

export const WellboreLogCurveDataSchema = {
    properties: {
        indexMin: {
            type: 'number',
            title: 'Indexmin'
        },
        indexMax: {
            type: 'number',
            title: 'Indexmax'
        },
        minCurveValue: {
            type: 'number',
            title: 'Mincurvevalue'
        },
        maxCurveValue: {
            type: 'number',
            title: 'Maxcurvevalue'
        },
        dataPoints: {
            items: {
                items: {
                    anyOf: [
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ]
                },
                type: 'array'
            },
            type: 'array',
            title: 'Datapoints'
        },
        curveAlias: {
            type: 'string',
            title: 'Curvealias'
        },
        curveDescription: {
            type: 'string',
            title: 'Curvedescription'
        },
        indexUnit: {
            type: 'string',
            title: 'Indexunit'
        },
        noDataValue: {
            type: 'number',
            title: 'Nodatavalue'
        }
    },
    type: 'object',
    required: ['indexMin', 'indexMax', 'minCurveValue', 'maxCurveValue', 'dataPoints', 'curveAlias', 'curveDescription', 'indexUnit', 'noDataValue'],
    title: 'WellboreLogCurveData'
} as const;

export const WellboreLogCurveHeaderSchema = {
    properties: {
        logName: {
            type: 'string',
            title: 'Logname'
        },
        curveName: {
            type: 'string',
            title: 'Curvename'
        },
        curveUnit: {
            type: 'string',
            title: 'Curveunit'
        }
    },
    type: 'object',
    required: ['logName', 'curveName', 'curveUnit'],
    title: 'WellboreLogCurveHeader'
} as const;

export const WellborePerforationSchema = {
    properties: {
        mdTop: {
            type: 'number',
            title: 'Mdtop'
        },
        mdBottom: {
            type: 'number',
            title: 'Mdbottom'
        },
        tvdTop: {
            type: 'number',
            title: 'Tvdtop'
        },
        tvdBottom: {
            type: 'number',
            title: 'Tvdbottom'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        completionMode: {
            type: 'string',
            title: 'Completionmode'
        }
    },
    type: 'object',
    required: ['mdTop', 'mdBottom', 'tvdTop', 'tvdBottom', 'status', 'completionMode'],
    title: 'WellborePerforation'
} as const;

export const WellborePickSchema = {
    properties: {
        northing: {
            type: 'number',
            title: 'Northing'
        },
        easting: {
            type: 'number',
            title: 'Easting'
        },
        tvd: {
            type: 'number',
            title: 'Tvd'
        },
        tvdMsl: {
            type: 'number',
            title: 'Tvdmsl'
        },
        md: {
            type: 'number',
            title: 'Md'
        },
        mdMsl: {
            type: 'number',
            title: 'Mdmsl'
        },
        uniqueWellboreIdentifier: {
            type: 'string',
            title: 'Uniquewellboreidentifier'
        },
        pickIdentifier: {
            type: 'string',
            title: 'Pickidentifier'
        },
        confidence: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Confidence'
        },
        depthReferencePoint: {
            type: 'string',
            title: 'Depthreferencepoint'
        },
        mdUnit: {
            type: 'string',
            title: 'Mdunit'
        }
    },
    type: 'object',
    required: ['northing', 'easting', 'tvd', 'tvdMsl', 'md', 'mdMsl', 'uniqueWellboreIdentifier', 'pickIdentifier', 'confidence', 'depthReferencePoint', 'mdUnit'],
    title: 'WellborePick',
    description: `Wellbore pick from SMDA

Camel case attributes needed for esvIntersection component in front-end`
} as const;

export const WellborePicksAndStratigraphicUnitsSchema = {
    properties: {
        wellbore_picks: {
            items: {
                '$ref': '#/components/schemas/WellborePick'
            },
            type: 'array',
            title: 'Wellbore Picks',
            default: []
        },
        stratigraphic_units: {
            items: {
                '$ref': '#/components/schemas/StratigraphicUnit'
            },
            type: 'array',
            title: 'Stratigraphic Units',
            default: []
        }
    },
    type: 'object',
    required: ['wellbore_picks', 'stratigraphic_units'],
    title: 'WellborePicksAndStratigraphicUnits'
} as const;

export const WellboreTrajectorySchema = {
    properties: {
        wellboreUuid: {
            type: 'string',
            title: 'Wellboreuuid'
        },
        uniqueWellboreIdentifier: {
            type: 'string',
            title: 'Uniquewellboreidentifier'
        },
        tvdMslArr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Tvdmslarr'
        },
        mdArr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Mdarr'
        },
        eastingArr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Eastingarr'
        },
        northingArr: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Northingarr'
        }
    },
    type: 'object',
    required: ['wellboreUuid', 'uniqueWellboreIdentifier', 'tvdMslArr', 'mdArr', 'eastingArr', 'northingArr'],
    title: 'WellboreTrajectory'
} as const;