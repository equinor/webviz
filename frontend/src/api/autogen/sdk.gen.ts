// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import type {
    AuthorizedCallbackRouteData_api,
    AuthorizedCallbackRouteResponses_api,
    DeprecatedGetStratigraphicUnitsData_api,
    DeprecatedGetStratigraphicUnitsErrors_api,
    DeprecatedGetStratigraphicUnitsResponses_api,
    DeprecatedGetWellborePicksForWellboreData_api,
    DeprecatedGetWellborePicksForWellboreErrors_api,
    DeprecatedGetWellborePicksForWellboreResponses_api,
    GetAliveData_api,
    GetAliveProtectedData_api,
    GetAliveProtectedResponses_api,
    GetAliveResponses_api,
    GetCasesData_api,
    GetCasesErrors_api,
    GetCasesResponses_api,
    GetCrosslineSliceData_api,
    GetCrosslineSliceErrors_api,
    GetCrosslineSliceResponses_api,
    GetDeltaEnsembleRealizationsVectorDataData_api,
    GetDeltaEnsembleRealizationsVectorDataErrors_api,
    GetDeltaEnsembleRealizationsVectorDataResponses_api,
    GetDeltaEnsembleStatisticalVectorDataData_api,
    GetDeltaEnsembleStatisticalVectorDataErrors_api,
    GetDeltaEnsembleStatisticalVectorDataResponses_api,
    GetDeltaEnsembleVectorListData_api,
    GetDeltaEnsembleVectorListErrors_api,
    GetDeltaEnsembleVectorListResponses_api,
    GetDeltaSurfaceDataData_api,
    GetDeltaSurfaceDataErrors_api,
    GetDeltaSurfaceDataResponses_api,
    GetDepthSliceData_api,
    GetDepthSliceErrors_api,
    GetDepthSliceResponses_api,
    GetDrilledWellboreHeadersData_api,
    GetDrilledWellboreHeadersErrors_api,
    GetDrilledWellboreHeadersResponses_api,
    GetEnsembleDetailsData_api,
    GetEnsembleDetailsErrors_api,
    GetEnsembleDetailsResponses_api,
    GetFieldsData_api,
    GetFieldsResponses_api,
    GetGridModelsInfoData_api,
    GetGridModelsInfoErrors_api,
    GetGridModelsInfoResponses_api,
    GetGridParameterData_api,
    GetGridParameterErrors_api,
    GetGridParameterResponses_api,
    GetGridSurfaceData_api,
    GetGridSurfaceErrors_api,
    GetGridSurfaceResponses_api,
    GetHistoricalVectorDataData_api,
    GetHistoricalVectorDataErrors_api,
    GetHistoricalVectorDataResponses_api,
    GetInlineSliceData_api,
    GetInlineSliceErrors_api,
    GetInlineSliceResponses_api,
    GetIsSensitivityRunData_api,
    GetIsSensitivityRunErrors_api,
    GetIsSensitivityRunResponses_api,
    GetLogCurveDataData_api,
    GetLogCurveDataErrors_api,
    GetLogCurveDataResponses_api,
    GetLoggedInUserData_api,
    GetLoggedInUserErrors_api,
    GetLoggedInUserResponses_api,
    GetMisfitSurfaceDataData_api,
    GetMisfitSurfaceDataErrors_api,
    GetMisfitSurfaceDataResponses_api,
    GetObservationsData_api,
    GetObservationsErrors_api,
    GetObservationsResponses_api,
    GetObservedSurfacesMetadataData_api,
    GetObservedSurfacesMetadataErrors_api,
    GetObservedSurfacesMetadataResponses_api,
    GetParameterData_api,
    GetParameterErrors_api,
    GetParameterNamesAndDescriptionData_api,
    GetParameterNamesAndDescriptionErrors_api,
    GetParameterNamesAndDescriptionResponses_api,
    GetParameterResponses_api,
    GetParametersData_api,
    GetParametersErrors_api,
    GetParametersResponses_api,
    GetPolygonsDataData_api,
    GetPolygonsDataErrors_api,
    GetPolygonsDataResponses_api,
    GetPolygonsDirectoryData_api,
    GetPolygonsDirectoryErrors_api,
    GetPolygonsDirectoryResponses_api,
    GetRealizationDataData_api,
    GetRealizationDataErrors_api,
    GetRealizationDataResponses_api,
    GetRealizationFlowNetworkData_api,
    GetRealizationFlowNetworkErrors_api,
    GetRealizationFlowNetworkResponses_api,
    GetRealizationSurfacesMetadataData_api,
    GetRealizationSurfacesMetadataErrors_api,
    GetRealizationSurfacesMetadataResponses_api,
    GetRealizationsVectorDataData_api,
    GetRealizationsVectorDataErrors_api,
    GetRealizationsVectorDataResponses_api,
    GetRealizationVectorAtTimestampData_api,
    GetRealizationVectorAtTimestampErrors_api,
    GetRealizationVectorAtTimestampResponses_api,
    GetSeismicCubeMetaListData_api,
    GetSeismicCubeMetaListErrors_api,
    GetSeismicCubeMetaListResponses_api,
    GetSeismicSlicesData_api,
    GetSeismicSlicesErrors_api,
    GetSeismicSlicesResponses_api,
    GetSensitivitiesData_api,
    GetSensitivitiesErrors_api,
    GetSensitivitiesResponses_api,
    GetStatisticalSurfaceDataHybridData_api,
    GetStatisticalSurfaceDataHybridErrors_api,
    GetStatisticalSurfaceDataHybridResponses_api,
    GetStatisticalVectorDataData_api,
    GetStatisticalVectorDataErrors_api,
    GetStatisticalVectorDataPerSensitivityData_api,
    GetStatisticalVectorDataPerSensitivityErrors_api,
    GetStatisticalVectorDataPerSensitivityResponses_api,
    GetStatisticalVectorDataResponses_api,
    GetStratigraphicUnitsForStratColumnData_api,
    GetStratigraphicUnitsForStratColumnErrors_api,
    GetStratigraphicUnitsForStratColumnResponses_api,
    GetSurfaceDataData_api,
    GetSurfaceDataErrors_api,
    GetSurfaceDataResponses_api,
    GetTableDataData_api,
    GetTableDataErrors_api,
    GetTableDataResponses_api,
    GetTableDefinitionData_api,
    GetTableDefinitionErrors_api,
    GetTableDefinitionResponses_api,
    GetTableDefinitionsData_api,
    GetTableDefinitionsErrors_api,
    GetTableDefinitionsResponses_api,
    GetTimestampsListData_api,
    GetTimestampsListErrors_api,
    GetTimestampsListResponses_api,
    GetUserInfoData_api,
    GetUserInfoErrors_api,
    GetUserInfoResponses_api,
    GetUserPhotoData_api,
    GetUserPhotoErrors_api,
    GetUserPhotoResponses_api,
    GetVectorListData_api,
    GetVectorListErrors_api,
    GetVectorListResponses_api,
    GetVfpTableData_api,
    GetVfpTableErrors_api,
    GetVfpTableNamesData_api,
    GetVfpTableNamesErrors_api,
    GetVfpTableNamesResponses_api,
    GetVfpTableResponses_api,
    GetWellboreCasingsData_api,
    GetWellboreCasingsErrors_api,
    GetWellboreCasingsResponses_api,
    GetWellboreCompletionsData_api,
    GetWellboreCompletionsErrors_api,
    GetWellboreCompletionsResponses_api,
    GetWellboreLogCurveHeadersData_api,
    GetWellboreLogCurveHeadersErrors_api,
    GetWellboreLogCurveHeadersResponses_api,
    GetWellborePerforationsData_api,
    GetWellborePerforationsErrors_api,
    GetWellborePerforationsResponses_api,
    GetWellborePickIdentifiersData_api,
    GetWellborePickIdentifiersErrors_api,
    GetWellborePickIdentifiersResponses_api,
    GetWellborePicksForPickIdentifierData_api,
    GetWellborePicksForPickIdentifierErrors_api,
    GetWellborePicksForPickIdentifierResponses_api,
    GetWellborePicksInStratColumnData_api,
    GetWellborePicksInStratColumnErrors_api,
    GetWellborePicksInStratColumnResponses_api,
    GetWellboreStratigraphicColumnsData_api,
    GetWellboreStratigraphicColumnsErrors_api,
    GetWellboreStratigraphicColumnsResponses_api,
    GetWellCompletionsDataData_api,
    GetWellCompletionsDataErrors_api,
    GetWellCompletionsDataResponses_api,
    GetWellTrajectoriesData_api,
    GetWellTrajectoriesErrors_api,
    GetWellTrajectoriesResponses_api,
    LoginRouteData_api,
    LoginRouteErrors_api,
    LoginRouteResponses_api,
    PostGetAggregatedPerRealizationTableDataData_api,
    PostGetAggregatedPerRealizationTableDataErrors_api,
    PostGetAggregatedPerRealizationTableDataResponses_api,
    PostGetAggregatedStatisticalTableDataData_api,
    PostGetAggregatedStatisticalTableDataErrors_api,
    PostGetAggregatedStatisticalTableDataResponses_api,
    PostGetPolylineIntersectionData_api,
    PostGetPolylineIntersectionErrors_api,
    PostGetPolylineIntersectionResponses_api,
    PostGetSampleSurfaceInPointsData_api,
    PostGetSampleSurfaceInPointsErrors_api,
    PostGetSampleSurfaceInPointsResponses_api,
    PostGetSeismicFenceData_api,
    PostGetSeismicFenceErrors_api,
    PostGetSeismicFenceResponses_api,
    PostGetSurfaceIntersectionData_api,
    PostGetSurfaceIntersectionErrors_api,
    PostGetSurfaceIntersectionResponses_api,
    PostLogoutData_api,
    PostLogoutResponses_api,
    PostRefreshFingerprintsForEnsemblesData_api,
    PostRefreshFingerprintsForEnsemblesErrors_api,
    PostRefreshFingerprintsForEnsemblesResponses_api,
    RootData_api,
    RootResponses_api,
} from "./types.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<
    TData,
    ThrowOnError
> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Fields
 *
 * Get list of fields
 */
export const getFields = <ThrowOnError extends boolean = false>(options?: Options<GetFieldsData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFieldsResponses_api, unknown, ThrowOnError>({
        responseType: "json",
        url: "/fields",
        ...options,
    });
};

/**
 * Get Cases
 *
 * Get list of cases for specified field
 */
export const getCases = <ThrowOnError extends boolean = false>(options: Options<GetCasesData_api, ThrowOnError>) => {
    return (options.client ?? client).get<GetCasesResponses_api, GetCasesErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/cases",
        ...options,
    });
};

/**
 * Get Ensemble Details
 *
 * Get more detailed information for an ensemble
 */
export const getEnsembleDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetEnsembleDetailsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetEnsembleDetailsResponses_api, GetEnsembleDetailsErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/cases/{case_uuid}/ensembles/{ensemble_name}",
        ...options,
    });
};

/**
 * Post Refresh Fingerprints For Ensembles
 *
 * Retrieves freshly calculated fingerprints for a list of ensembles
 */
export const postRefreshFingerprintsForEnsembles = <ThrowOnError extends boolean = false>(
    options: Options<PostRefreshFingerprintsForEnsemblesData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostRefreshFingerprintsForEnsemblesResponses_api,
        PostRefreshFingerprintsForEnsemblesErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/ensembles/refresh_fingerprints",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Get Vector List
 *
 * Get list of all vectors in a given Sumo ensemble, excluding any historical vectors
 *
 * Optionally include derived vectors.
 */
export const getVectorList = <ThrowOnError extends boolean = false>(
    options: Options<GetVectorListData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetVectorListResponses_api, GetVectorListErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/timeseries/vector_list/",
        ...options,
    });
};

/**
 * Get Delta Ensemble Vector List
 *
 * Get list of all vectors for a delta ensemble based on all vectors in a given Sumo ensemble, excluding any historical vectors
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleVectorList = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleVectorListData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetDeltaEnsembleVectorListResponses_api,
        GetDeltaEnsembleVectorListErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/delta_ensemble_vector_list/",
        ...options,
    });
};

/**
 * Get Realizations Vector Data
 *
 * Get vector data per realization
 */
export const getRealizationsVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationsVectorDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetRealizationsVectorDataResponses_api,
        GetRealizationsVectorDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/realizations_vector_data/",
        ...options,
    });
};

/**
 * Get Delta Ensemble Realizations Vector Data
 *
 * Get vector data per realization
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleRealizationsVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleRealizationsVectorDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetDeltaEnsembleRealizationsVectorDataResponses_api,
        GetDeltaEnsembleRealizationsVectorDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/delta_ensemble_realizations_vector_data/",
        ...options,
    });
};

/**
 * Get Timestamps List
 *
 * Get the intersection of available timestamps.
 * Note that when resampling_frequency is None, the pure intersection of the
 * stored raw dates will be returned. Thus the returned list of dates will not include
 * dates from long running realizations.
 * For other resampling frequencies, the date range will be expanded to cover the entire
 * time range of all the requested realizations before computing the resampled dates.
 */
export const getTimestampsList = <ThrowOnError extends boolean = false>(
    options: Options<GetTimestampsListData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetTimestampsListResponses_api, GetTimestampsListErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/timeseries/timestamps_list/",
        ...options,
    });
};

/**
 * Get Historical Vector Data
 */
export const getHistoricalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetHistoricalVectorDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetHistoricalVectorDataResponses_api,
        GetHistoricalVectorDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/historical_vector_data/",
        ...options,
    });
};

/**
 * Get Statistical Vector Data
 *
 * Get statistical vector data for an ensemble
 */
export const getStatisticalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalVectorDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetStatisticalVectorDataResponses_api,
        GetStatisticalVectorDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/statistical_vector_data/",
        ...options,
    });
};

/**
 * Get Delta Ensemble Statistical Vector Data
 *
 * Get statistical vector data for an ensemble
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleStatisticalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleStatisticalVectorDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetDeltaEnsembleStatisticalVectorDataResponses_api,
        GetDeltaEnsembleStatisticalVectorDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/delta_ensemble_statistical_vector_data/",
        ...options,
    });
};

/**
 * Get Statistical Vector Data Per Sensitivity
 *
 * Get statistical vector data for an ensemble per sensitivity
 */
export const getStatisticalVectorDataPerSensitivity = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalVectorDataPerSensitivityData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetStatisticalVectorDataPerSensitivityResponses_api,
        GetStatisticalVectorDataPerSensitivityErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/statistical_vector_data_per_sensitivity/",
        ...options,
    });
};

/**
 * Get Realization Vector At Timestamp
 */
export const getRealizationVectorAtTimestamp = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationVectorAtTimestampData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetRealizationVectorAtTimestampResponses_api,
        GetRealizationVectorAtTimestampErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/timeseries/realization_vector_at_timestamp/",
        ...options,
    });
};

/**
 * Get Table Definitions
 *
 * Get the inplace volumes tables definitions for a given ensemble.
 */
export const getTableDefinitions = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDefinitionsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetTableDefinitionsResponses_api,
        GetTableDefinitionsErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/inplace_volumes/table_definitions/",
        ...options,
    });
};

/**
 * Post Get Aggregated Per Realization Table Data
 *
 * Get aggregated inplace volume data for a given table with data per realization based on requested results and categories/index filter.
 *
 * Note: This endpoint is a post endpoint because the list of indices with values can be quite large and may exceed the query string limit.
 * As the endpoint is post, the indices with values object is kept for convenience.
 */
export const postGetAggregatedPerRealizationTableData = <ThrowOnError extends boolean = false>(
    options: Options<PostGetAggregatedPerRealizationTableDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostGetAggregatedPerRealizationTableDataResponses_api,
        PostGetAggregatedPerRealizationTableDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/inplace_volumes/get_aggregated_per_realization_table_data/",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Post Get Aggregated Statistical Table Data
 *
 * Get statistical inplace volumes data across selected realizations for a given table based on requested results and categories/index filter.
 *
 * Note: This endpoint is a post endpoint because the list of indices with values can be quite large and may exceed the query string limit.
 * As the endpoint is post, the indices with values object is kept for convenience.
 */
export const postGetAggregatedStatisticalTableData = <ThrowOnError extends boolean = false>(
    options: Options<PostGetAggregatedStatisticalTableDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostGetAggregatedStatisticalTableDataResponses_api,
        PostGetAggregatedStatisticalTableDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/inplace_volumes/get_aggregated_statistical_table_data/",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Get Realization Surfaces Metadata
 *
 * Get metadata for realization surfaces in a Sumo ensemble
 */
export const getRealizationSurfacesMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationSurfacesMetadataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetRealizationSurfacesMetadataResponses_api,
        GetRealizationSurfacesMetadataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/realization_surfaces_metadata/",
        ...options,
    });
};

/**
 * Get Observed Surfaces Metadata
 *
 * Get metadata for observed surfaces in a Sumo case
 */
export const getObservedSurfacesMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetObservedSurfacesMetadataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetObservedSurfacesMetadataResponses_api,
        GetObservedSurfacesMetadataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/observed_surfaces_metadata/",
        ...options,
    });
};

/**
 * Get Surface Data
 *
 * Get surface data for the specified surface.
 *
 * ---
 * *General description of the types of surface addresses that exist. The specific address types supported by this endpoint can be a subset of these.*
 *
 * - *REAL* - Realization surface address. Addresses a specific realization surface within an ensemble. Always specifies a single realization number
 * - *OBS* - Observed surface address. Addresses an observed surface which is not associated with any specific ensemble.
 * - *STAT* - Statistical surface address. Fully specifies a statistical surface, including the statistic function and which realizations to include.
 * - *PARTIAL* - Partial surface address. Similar to a realization surface address, but does not include a specific realization number.
 *
 * Structure of the different types of address strings:
 *
 * ```
 * REAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<realization>[~~<iso_date_or_interval>]
 * STAT~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<stat_function>~~<stat_realizations>[~~<iso_date_or_interval>]
 * OBS~~<case_uuid>~~<surface_name>~~<attribute>~~<iso_date_or_interval>
 * PARTIAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>[~~<iso_date_or_interval>]
 * ```
 *
 * The `<stat_realizations>` component in a *STAT* address contains the list of realizations to include in the statistics
 * encoded as a `UintListStr` or "*" to include all realizations.
 */
export const getSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetSurfaceDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetSurfaceDataResponses_api, GetSurfaceDataErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/surface/surface_data",
        ...options,
    });
};

/**
 * Get Statistical Surface Data Hybrid
 */
export const getStatisticalSurfaceDataHybrid = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalSurfaceDataHybridData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetStatisticalSurfaceDataHybridResponses_api,
        GetStatisticalSurfaceDataHybridErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/statistical_surface_data/hybrid",
        ...options,
    });
};

/**
 * Post Get Surface Intersection
 *
 * Get surface intersection data for requested surface name.
 *
 * The surface intersection data for surface name contains: An array of z-points, i.e. one z-value/depth per (x, y)-point in polyline,
 * and cumulative lengths, the accumulated length at each z-point in the array.
 */
export const postGetSurfaceIntersection = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSurfaceIntersectionData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostGetSurfaceIntersectionResponses_api,
        PostGetSurfaceIntersectionErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/get_surface_intersection",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Post Get Sample Surface In Points
 */
export const postGetSampleSurfaceInPoints = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSampleSurfaceInPointsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostGetSampleSurfaceInPointsResponses_api,
        PostGetSampleSurfaceInPointsErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/get_sample_surface_in_points",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Get Delta Surface Data
 */
export const getDeltaSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaSurfaceDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetDeltaSurfaceDataResponses_api,
        GetDeltaSurfaceDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/delta_surface_data",
        ...options,
    });
};

/**
 * Get Misfit Surface Data
 */
export const getMisfitSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetMisfitSurfaceDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetMisfitSurfaceDataResponses_api,
        GetMisfitSurfaceDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/misfit_surface_data",
        ...options,
    });
};

/**
 * Deprecated Get Stratigraphic Units
 *
 * NOTE: This endpoint is deprecated and is to be deleted when refactoring intersection module
 */
export const deprecatedGetStratigraphicUnits = <ThrowOnError extends boolean = false>(
    options: Options<DeprecatedGetStratigraphicUnitsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        DeprecatedGetStratigraphicUnitsResponses_api,
        DeprecatedGetStratigraphicUnitsErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/deprecated_stratigraphic_units",
        ...options,
    });
};

/**
 * Get Stratigraphic Units For Strat Column
 */
export const getStratigraphicUnitsForStratColumn = <ThrowOnError extends boolean = false>(
    options: Options<GetStratigraphicUnitsForStratColumnData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetStratigraphicUnitsForStratColumnResponses_api,
        GetStratigraphicUnitsForStratColumnErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/surface/stratigraphic_units_for_strat_column",
        ...options,
    });
};

/**
 * Get Parameter Names And Description
 *
 * Retrieve parameter names and description for an ensemble
 */
export const getParameterNamesAndDescription = <ThrowOnError extends boolean = false>(
    options: Options<GetParameterNamesAndDescriptionData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetParameterNamesAndDescriptionResponses_api,
        GetParameterNamesAndDescriptionErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/parameters/parameter_names_and_description/",
        ...options,
    });
};

/**
 * Get Parameter
 *
 * Get a parameter in a given Sumo ensemble
 */
export const getParameter = <ThrowOnError extends boolean = false>(
    options: Options<GetParameterData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetParameterResponses_api, GetParameterErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/parameters/parameter/",
        ...options,
    });
};

/**
 * Get Parameters
 */
export const getParameters = <ThrowOnError extends boolean = false>(
    options: Options<GetParametersData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetParametersResponses_api, GetParametersErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/parameters/parameters/",
        ...options,
    });
};

/**
 * Get Is Sensitivity Run
 *
 * Check if a given Sumo ensemble is a sensitivity run
 */
export const getIsSensitivityRun = <ThrowOnError extends boolean = false>(
    options: Options<GetIsSensitivityRunData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetIsSensitivityRunResponses_api,
        GetIsSensitivityRunErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/parameters/is_sensitivity_run/",
        ...options,
    });
};

/**
 * Get Sensitivities
 *
 * Get sensitivities in a given Sumo ensemble
 */
export const getSensitivities = <ThrowOnError extends boolean = false>(
    options: Options<GetSensitivitiesData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetSensitivitiesResponses_api, GetSensitivitiesErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/parameters/sensitivities/",
        ...options,
    });
};

/**
 * Get Grid Models Info
 *
 * Get metadata for all 3D grid models, including bbox, dimensions and properties
 */
export const getGridModelsInfo = <ThrowOnError extends boolean = false>(
    options: Options<GetGridModelsInfoData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetGridModelsInfoResponses_api, GetGridModelsInfoErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/grid3d/grid_models_info/",
        ...options,
    });
};

/**
 * Get Grid Surface
 *
 * Get a grid
 */
export const getGridSurface = <ThrowOnError extends boolean = false>(
    options: Options<GetGridSurfaceData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetGridSurfaceResponses_api, GetGridSurfaceErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/grid3d/grid_surface",
        ...options,
    });
};

/**
 * Get Grid Parameter
 *
 * Get a grid parameter
 */
export const getGridParameter = <ThrowOnError extends boolean = false>(
    options: Options<GetGridParameterData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetGridParameterResponses_api, GetGridParameterErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/grid3d/grid_parameter",
        ...options,
    });
};

/**
 * Post Get Polyline Intersection
 */
export const postGetPolylineIntersection = <ThrowOnError extends boolean = false>(
    options: Options<PostGetPolylineIntersectionData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostGetPolylineIntersectionResponses_api,
        PostGetPolylineIntersectionErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/grid3d/get_polyline_intersection",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Get Realization Flow Network
 */
export const getRealizationFlowNetwork = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationFlowNetworkData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetRealizationFlowNetworkResponses_api,
        GetRealizationFlowNetworkErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/flow_network/realization_flow_network/",
        ...options,
    });
};

/**
 * Get Table Data
 *
 * Get pvt table data for a given Sumo ensemble and realization
 */
export const getTableData = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetTableDataResponses_api, GetTableDataErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/pvt/table_data/",
        ...options,
    });
};

/**
 * Get Well Completions Data
 */
export const getWellCompletionsData = <ThrowOnError extends boolean = false>(
    options: Options<GetWellCompletionsDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellCompletionsDataResponses_api,
        GetWellCompletionsDataErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well_completions/well_completions_data/",
        ...options,
    });
};

/**
 * Get Drilled Wellbore Headers
 *
 * Get wellbore headers for all wells in the field
 */
export const getDrilledWellboreHeaders = <ThrowOnError extends boolean = false>(
    options: Options<GetDrilledWellboreHeadersData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetDrilledWellboreHeadersResponses_api,
        GetDrilledWellboreHeadersErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/drilled_wellbore_headers/",
        ...options,
    });
};

/**
 * Get Well Trajectories
 *
 * Get well trajectories for field
 */
export const getWellTrajectories = <ThrowOnError extends boolean = false>(
    options: Options<GetWellTrajectoriesData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellTrajectoriesResponses_api,
        GetWellTrajectoriesErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/well_trajectories/",
        ...options,
    });
};

/**
 * Get Wellbore Pick Identifiers
 *
 * Get wellbore pick identifiers for field and stratigraphic column
 */
export const getWellborePickIdentifiers = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePickIdentifiersData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellborePickIdentifiersResponses_api,
        GetWellborePickIdentifiersErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_pick_identifiers/",
        ...options,
    });
};

/**
 * Get Wellbore Picks For Pick Identifier
 *
 * Get picks for wellbores for field and pick identifier
 *
 * This implies picks for multiple wellbores for given field and pick identifier.
 * E.g. picks for all wellbores in a given surface in a field.
 */
export const getWellborePicksForPickIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksForPickIdentifierData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellborePicksForPickIdentifierResponses_api,
        GetWellborePicksForPickIdentifierErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_picks_for_pick_identifier/",
        ...options,
    });
};

/**
 * Deprecated Get Wellbore Picks For Wellbore
 *
 * Get wellbore picks for field and pick identifier
 *
 * NOTE: This endpoint is deprecated and is to be deleted when refactoring intersection module
 */
export const deprecatedGetWellborePicksForWellbore = <ThrowOnError extends boolean = false>(
    options: Options<DeprecatedGetWellborePicksForWellboreData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        DeprecatedGetWellborePicksForWellboreResponses_api,
        DeprecatedGetWellborePicksForWellboreErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/deprecated_wellbore_picks_for_wellbore/",
        ...options,
    });
};

/**
 * Get Wellbore Picks In Strat Column
 *
 * Get wellbore picks for a single wellbore with stratigraphic column identifier
 */
export const getWellborePicksInStratColumn = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksInStratColumnData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellborePicksInStratColumnResponses_api,
        GetWellborePicksInStratColumnErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_picks_in_strat_column",
        ...options,
    });
};

/**
 * Get Wellbore Stratigraphic Columns
 */
export const getWellboreStratigraphicColumns = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreStratigraphicColumnsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellboreStratigraphicColumnsResponses_api,
        GetWellboreStratigraphicColumnsErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_stratigraphic_columns/",
        ...options,
    });
};

/**
 * Get Wellbore Completions
 *
 * Get well bore completions for a single well bore
 */
export const getWellboreCompletions = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreCompletionsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellboreCompletionsResponses_api,
        GetWellboreCompletionsErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_completions/",
        ...options,
    });
};

/**
 * Get Wellbore Casings
 *
 * Get well bore casings for a single well bore
 */
export const getWellboreCasings = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreCasingsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetWellboreCasingsResponses_api, GetWellboreCasingsErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/well/wellbore_casings/",
        ...options,
    });
};

/**
 * Get Wellbore Perforations
 *
 * Get well bore casing for a single well bore
 */
export const getWellborePerforations = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePerforationsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellborePerforationsResponses_api,
        GetWellborePerforationsErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_perforations/",
        ...options,
    });
};

/**
 * Get Wellbore Log Curve Headers
 *
 * Get all log curve headers for a single well bore.
 * Logs are available from multiple sources, which can be specificed by the "sources" parameter.
 */
export const getWellboreLogCurveHeaders = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreLogCurveHeadersData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetWellboreLogCurveHeadersResponses_api,
        GetWellboreLogCurveHeadersErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/well/wellbore_log_curve_headers/",
        ...options,
    });
};

/**
 * Get Log Curve Data
 *
 * Get log curve data
 */
export const getLogCurveData = <ThrowOnError extends boolean = false>(
    options: Options<GetLogCurveDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetLogCurveDataResponses_api, GetLogCurveDataErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/well/log_curve_data/",
        ...options,
    });
};

/**
 * Get Seismic Cube Meta List
 *
 * Get a list of seismic cube meta.
 */
export const getSeismicCubeMetaList = <ThrowOnError extends boolean = false>(
    options: Options<GetSeismicCubeMetaListData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetSeismicCubeMetaListResponses_api,
        GetSeismicCubeMetaListErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/seismic/seismic_cube_meta_list/",
        ...options,
    });
};

/**
 * Get Inline Slice
 *
 * Get a seismic inline from a seismic cube.
 */
export const getInlineSlice = <ThrowOnError extends boolean = false>(
    options: Options<GetInlineSliceData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetInlineSliceResponses_api, GetInlineSliceErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/seismic/get_inline_slice/",
        ...options,
    });
};

/**
 * Get Crossline Slice
 *
 * Get a seismic crossline from a seismic cube.
 */
export const getCrosslineSlice = <ThrowOnError extends boolean = false>(
    options: Options<GetCrosslineSliceData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetCrosslineSliceResponses_api, GetCrosslineSliceErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/seismic/get_crossline_slice/",
        ...options,
    });
};

/**
 * Get Depth Slice
 *
 * Get a seismic depth slice from a seismic cube.
 */
export const getDepthSlice = <ThrowOnError extends boolean = false>(
    options: Options<GetDepthSliceData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetDepthSliceResponses_api, GetDepthSliceErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/seismic/get_depth_slice/",
        ...options,
    });
};

/**
 * Get Seismic Slices
 *
 * Get a seismic depth slice from a seismic cube.
 */
export const getSeismicSlices = <ThrowOnError extends boolean = false>(
    options: Options<GetSeismicSlicesData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetSeismicSlicesResponses_api, GetSeismicSlicesErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/seismic/get_seismic_slices/",
        ...options,
    });
};

/**
 * Post Get Seismic Fence
 *
 * Get a fence of seismic data from a polyline defined by a set of (x, y) coordinates in domain coordinate system.
 *
 * The fence data contains a set of traces perpendicular to the polyline, with one trace per (x, y)-point in polyline.
 * Each trace has equal number of samples, and is a set of sample values along the depth direction of the seismic cube.
 *
 * Returns:
 * A SeismicFenceData object with fence traces in encoded 1D array, metadata for trace array decoding and fence min/max depth.
 */
export const postGetSeismicFence = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSeismicFenceData_api, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        PostGetSeismicFenceResponses_api,
        PostGetSeismicFenceErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/seismic/get_seismic_fence/",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Get Polygons Directory
 *
 * Get a directory of polygons in a Sumo ensemble
 */
export const getPolygonsDirectory = <ThrowOnError extends boolean = false>(
    options: Options<GetPolygonsDirectoryData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetPolygonsDirectoryResponses_api,
        GetPolygonsDirectoryErrors_api,
        ThrowOnError
    >({
        responseType: "json",
        url: "/polygons/polygons_directory/",
        ...options,
    });
};

/**
 * Get Polygons Data
 */
export const getPolygonsData = <ThrowOnError extends boolean = false>(
    options: Options<GetPolygonsDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetPolygonsDataResponses_api, GetPolygonsDataErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/polygons/polygons_data/",
        ...options,
    });
};

/**
 * Get User Info
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(
    options: Options<GetUserInfoData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetUserInfoResponses_api, GetUserInfoErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/graph/user_info/{user_id_or_email}",
        ...options,
    });
};

/**
 * Get User Photo
 *
 * Get username, display name and avatar from Microsoft Graph API for a given user email or graph identity
 */
export const getUserPhoto = <ThrowOnError extends boolean = false>(
    options: Options<GetUserPhotoData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetUserPhotoResponses_api, GetUserPhotoErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/graph/user_photo/",
        ...options,
    });
};

/**
 * Get Observations
 *
 * Retrieve all observations found in sumo case
 */
export const getObservations = <ThrowOnError extends boolean = false>(
    options: Options<GetObservationsData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetObservationsResponses_api, GetObservationsErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/observations/observations/",
        ...options,
    });
};

/**
 * Get Table Definition
 */
export const getTableDefinition = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDefinitionData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetTableDefinitionResponses_api, GetTableDefinitionErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/rft/table_definition",
        ...options,
    });
};

/**
 * Get Realization Data
 */
export const getRealizationData = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationDataData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetRealizationDataResponses_api, GetRealizationDataErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/rft/realization_data",
        ...options,
    });
};

/**
 * Get Vfp Table Names
 */
export const getVfpTableNames = <ThrowOnError extends boolean = false>(
    options: Options<GetVfpTableNamesData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetVfpTableNamesResponses_api, GetVfpTableNamesErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/vfp/vfp_table_names/",
        ...options,
    });
};

/**
 * Get Vfp Table
 */
export const getVfpTable = <ThrowOnError extends boolean = false>(
    options: Options<GetVfpTableData_api, ThrowOnError>,
) => {
    return (options.client ?? client).get<GetVfpTableResponses_api, GetVfpTableErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/vfp/vfp_table/",
        ...options,
    });
};

/**
 *  Login Route
 */
export const loginRoute = <ThrowOnError extends boolean = false>(
    options?: Options<LoginRouteData_api, ThrowOnError>,
) => {
    return (options?.client ?? client).get<LoginRouteResponses_api, LoginRouteErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/login",
        ...options,
    });
};

/**
 *  Authorized Callback Route
 */
export const authorizedCallbackRoute = <ThrowOnError extends boolean = false>(
    options?: Options<AuthorizedCallbackRouteData_api, ThrowOnError>,
) => {
    return (options?.client ?? client).get<AuthorizedCallbackRouteResponses_api, unknown, ThrowOnError>({
        responseType: "json",
        url: "/auth-callback",
        ...options,
    });
};

/**
 * Get Alive
 */
export const getAlive = <ThrowOnError extends boolean = false>(options?: Options<GetAliveData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAliveResponses_api, unknown, ThrowOnError>({
        responseType: "json",
        url: "/alive",
        ...options,
    });
};

/**
 * Get Alive Protected
 */
export const getAliveProtected = <ThrowOnError extends boolean = false>(
    options?: Options<GetAliveProtectedData_api, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetAliveProtectedResponses_api, unknown, ThrowOnError>({
        responseType: "json",
        url: "/alive_protected",
        ...options,
    });
};

/**
 * Post Logout
 */
export const postLogout = <ThrowOnError extends boolean = false>(
    options?: Options<PostLogoutData_api, ThrowOnError>,
) => {
    return (options?.client ?? client).post<PostLogoutResponses_api, unknown, ThrowOnError>({
        responseType: "json",
        url: "/logout",
        ...options,
    });
};

/**
 * Get Logged In User
 */
export const getLoggedInUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetLoggedInUserData_api, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetLoggedInUserResponses_api, GetLoggedInUserErrors_api, ThrowOnError>({
        responseType: "json",
        url: "/logged_in_user",
        ...options,
    });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(options?: Options<RootData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<RootResponses_api, unknown, ThrowOnError>({
        responseType: "json",
        url: "/",
        ...options,
    });
};
