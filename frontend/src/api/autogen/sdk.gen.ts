// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-axios";
import type {
    GetFieldsData,
    GetFieldsResponse,
    GetCasesData,
    GetCasesResponse,
    GetCasesError,
    GetEnsemblesData,
    GetEnsemblesResponse,
    GetEnsemblesError,
    GetEnsembleDetailsData,
    GetEnsembleDetailsResponse,
    GetEnsembleDetailsError,
    GetVectorListData,
    GetVectorListResponse,
    GetVectorListError,
    GetDeltaEnsembleVectorListData,
    GetDeltaEnsembleVectorListResponse,
    GetDeltaEnsembleVectorListError,
    GetRealizationsVectorDataData,
    GetRealizationsVectorDataResponse,
    GetRealizationsVectorDataError,
    GetDeltaEnsembleRealizationsVectorDataData,
    GetDeltaEnsembleRealizationsVectorDataResponse,
    GetDeltaEnsembleRealizationsVectorDataError,
    GetTimestampsListData,
    GetTimestampsListResponse,
    GetTimestampsListError,
    GetHistoricalVectorDataData,
    GetHistoricalVectorDataResponse,
    GetHistoricalVectorDataError,
    GetStatisticalVectorDataData,
    GetStatisticalVectorDataResponse,
    GetStatisticalVectorDataError,
    GetDeltaEnsembleStatisticalVectorDataData,
    GetDeltaEnsembleStatisticalVectorDataResponse,
    GetDeltaEnsembleStatisticalVectorDataError,
    GetStatisticalVectorDataPerSensitivityData,
    GetStatisticalVectorDataPerSensitivityResponse,
    GetStatisticalVectorDataPerSensitivityError,
    GetRealizationVectorAtTimestampData,
    GetRealizationVectorAtTimestampResponse,
    GetRealizationVectorAtTimestampError,
    GetTableDefinitionsData,
    GetTableDefinitionsResponse,
    GetTableDefinitionsError,
    PostGetAggregatedPerRealizationTableDataData,
    PostGetAggregatedPerRealizationTableDataResponse,
    PostGetAggregatedPerRealizationTableDataError,
    PostGetAggregatedStatisticalTableDataData,
    PostGetAggregatedStatisticalTableDataResponse,
    PostGetAggregatedStatisticalTableDataError,
    GetRealizationSurfacesMetadataData,
    GetRealizationSurfacesMetadataResponse,
    GetRealizationSurfacesMetadataError,
    GetObservedSurfacesMetadataData,
    GetObservedSurfacesMetadataResponse,
    GetObservedSurfacesMetadataError,
    GetSurfaceDataData,
    GetSurfaceDataResponse,
    GetSurfaceDataError,
    PostGetSurfaceIntersectionData,
    PostGetSurfaceIntersectionResponse,
    PostGetSurfaceIntersectionError,
    PostGetSampleSurfaceInPointsData,
    PostGetSampleSurfaceInPointsResponse,
    PostGetSampleSurfaceInPointsError,
    GetDeltaSurfaceDataData,
    GetDeltaSurfaceDataResponse,
    GetDeltaSurfaceDataError,
    GetMisfitSurfaceDataData,
    GetMisfitSurfaceDataResponse,
    GetMisfitSurfaceDataError,
    GetWellboreStratigraphicColumnsData,
    GetWellboreStratigraphicColumnsResponse,
    GetWellboreStratigraphicColumnsError,
    GetStratigraphicUnitsData,
    GetStratigraphicUnitsResponse,
    GetStratigraphicUnitsError,
    GetParameterNamesAndDescriptionData,
    GetParameterNamesAndDescriptionResponse,
    GetParameterNamesAndDescriptionError,
    GetParameterData,
    GetParameterResponse,
    GetParameterError,
    GetParametersData,
    GetParametersResponse,
    GetParametersError,
    GetIsSensitivityRunData,
    GetIsSensitivityRunResponse,
    GetIsSensitivityRunError,
    GetSensitivitiesData,
    GetSensitivitiesResponse,
    GetSensitivitiesError,
    GetGridModelsInfoData,
    GetGridModelsInfoResponse,
    GetGridModelsInfoError,
    GetGridSurfaceData,
    GetGridSurfaceResponse,
    GetGridSurfaceError,
    GetGridParameterData,
    GetGridParameterResponse,
    GetGridParameterError,
    PostGetPolylineIntersectionData,
    PostGetPolylineIntersectionResponse,
    PostGetPolylineIntersectionError,
    GetRealizationFlowNetworkData,
    GetRealizationFlowNetworkResponse,
    GetRealizationFlowNetworkError,
    GetTableDataData,
    GetTableDataResponse,
    GetTableDataError,
    GetWellCompletionsDataData,
    GetWellCompletionsDataResponse,
    GetWellCompletionsDataError,
    GetDrilledWellboreHeadersData,
    GetDrilledWellboreHeadersResponse,
    GetDrilledWellboreHeadersError,
    GetWellTrajectoriesData,
    GetWellTrajectoriesResponse,
    GetWellTrajectoriesError,
    GetWellborePickIdentifiersData,
    GetWellborePickIdentifiersResponse,
    GetWellborePickIdentifiersError,
    GetWellborePicksForPickIdentifierData,
    GetWellborePicksForPickIdentifierResponse,
    GetWellborePicksForPickIdentifierError,
    GetWellborePicksForWellboreData,
    GetWellborePicksForWellboreResponse,
    GetWellborePicksForWellboreError,
    GetWellborePicksInStratColumnData,
    GetWellborePicksInStratColumnResponse,
    GetWellborePicksInStratColumnError,
    GetWellboreCompletionsData,
    GetWellboreCompletionsResponse,
    GetWellboreCompletionsError,
    GetWellboreCasingsData,
    GetWellboreCasingsResponse,
    GetWellboreCasingsError,
    GetWellborePerforationsData,
    GetWellborePerforationsResponse,
    GetWellborePerforationsError,
    GetWellboreLogCurveHeadersData,
    GetWellboreLogCurveHeadersResponse,
    GetWellboreLogCurveHeadersError,
    GetLogCurveDataData,
    GetLogCurveDataResponse,
    GetLogCurveDataError,
    GetSeismicCubeMetaListData,
    GetSeismicCubeMetaListResponse,
    GetSeismicCubeMetaListError,
    GetInlineSliceData,
    GetInlineSliceResponse,
    GetInlineSliceError,
    GetCrosslineSliceData,
    GetCrosslineSliceResponse,
    GetCrosslineSliceError,
    GetDepthSliceData,
    GetDepthSliceResponse,
    GetDepthSliceError,
    PostGetSeismicFenceData,
    PostGetSeismicFenceResponse,
    PostGetSeismicFenceError,
    GetPolygonsDirectoryData,
    GetPolygonsDirectoryResponse,
    GetPolygonsDirectoryError,
    GetPolygonsDataData,
    GetPolygonsDataResponse,
    GetPolygonsDataError,
    GetUserPhotoData,
    GetUserPhotoResponse,
    GetUserPhotoError,
    GetObservationsData,
    GetObservationsResponse,
    GetObservationsError,
    GetTableDefinitionData,
    GetTableDefinitionResponse,
    GetTableDefinitionError,
    GetRealizationDataData,
    GetRealizationDataResponse,
    GetRealizationDataError,
    GetVfpTableNamesData,
    GetVfpTableNamesResponse,
    GetVfpTableNamesError,
    GetVfpTableData,
    GetVfpTableResponse,
    GetVfpTableError,
    LoginRouteData,
    LoginRouteError,
    AuthorizedCallbackRouteData,
    GetAliveData,
    GetAliveResponse,
    GetAliveProtectedData,
    GetAliveProtectedResponse,
    PostLogoutData,
    PostLogoutResponse,
    GetLoggedInUserData,
    GetLoggedInUserResponse,
    GetLoggedInUserError,
    RootData,
    RootResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get Fields
 * Get list of fields
 */
export const getFields = <ThrowOnError extends boolean = false>(options?: Options<GetFieldsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFieldsResponse, unknown, ThrowOnError>({
        ...options,
        url: "/fields",
    });
};

/**
 * Get Cases
 * Get list of cases for specified field
 */
export const getCases = <ThrowOnError extends boolean = false>(options: Options<GetCasesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCasesResponse, GetCasesError, ThrowOnError>({
        ...options,
        url: "/cases",
    });
};

/**
 * Get Ensembles
 * Get list of ensembles for a case
 */
export const getEnsembles = <ThrowOnError extends boolean = false>(
    options: Options<GetEnsemblesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEnsemblesResponse, GetEnsemblesError, ThrowOnError>({
        ...options,
        url: "/cases/{case_uuid}/ensembles",
    });
};

/**
 * Get Ensemble Details
 * Get more detailed information for an ensemble
 */
export const getEnsembleDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetEnsembleDetailsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEnsembleDetailsResponse, GetEnsembleDetailsError, ThrowOnError>({
        ...options,
        url: "/cases/{case_uuid}/ensembles/{ensemble_name}",
    });
};

/**
 * Get Vector List
 * Get list of all vectors in a given Sumo ensemble, excluding any historical vectors
 *
 * Optionally include derived vectors.
 */
export const getVectorList = <ThrowOnError extends boolean = false>(
    options: Options<GetVectorListData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetVectorListResponse, GetVectorListError, ThrowOnError>({
        ...options,
        url: "/timeseries/vector_list/",
    });
};

/**
 * Get Delta Ensemble Vector List
 * Get list of all vectors for a delta ensemble based on all vectors in a given Sumo ensemble, excluding any historical vectors
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleVectorList = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleVectorListData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDeltaEnsembleVectorListResponse,
        GetDeltaEnsembleVectorListError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/delta_ensemble_vector_list/",
    });
};

/**
 * Get Realizations Vector Data
 * Get vector data per realization
 */
export const getRealizationsVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationsVectorDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRealizationsVectorDataResponse,
        GetRealizationsVectorDataError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/realizations_vector_data/",
    });
};

/**
 * Get Delta Ensemble Realizations Vector Data
 * Get vector data per realization
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleRealizationsVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleRealizationsVectorDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDeltaEnsembleRealizationsVectorDataResponse,
        GetDeltaEnsembleRealizationsVectorDataError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/delta_ensemble_realizations_vector_data/",
    });
};

/**
 * Get Timestamps List
 * Get the intersection of available timestamps.
 * Note that when resampling_frequency is None, the pure intersection of the
 * stored raw dates will be returned. Thus the returned list of dates will not include
 * dates from long running realizations.
 * For other resampling frequencies, the date range will be expanded to cover the entire
 * time range of all the requested realizations before computing the resampled dates.
 */
export const getTimestampsList = <ThrowOnError extends boolean = false>(
    options: Options<GetTimestampsListData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetTimestampsListResponse, GetTimestampsListError, ThrowOnError>({
        ...options,
        url: "/timeseries/timestamps_list/",
    });
};

/**
 * Get Historical Vector Data
 */
export const getHistoricalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetHistoricalVectorDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetHistoricalVectorDataResponse, GetHistoricalVectorDataError, ThrowOnError>(
        {
            ...options,
            url: "/timeseries/historical_vector_data/",
        },
    );
};

/**
 * Get Statistical Vector Data
 * Get statistical vector data for an ensemble
 */
export const getStatisticalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalVectorDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetStatisticalVectorDataResponse,
        GetStatisticalVectorDataError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/statistical_vector_data/",
    });
};

/**
 * Get Delta Ensemble Statistical Vector Data
 * Get statistical vector data for an ensemble
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleStatisticalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleStatisticalVectorDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDeltaEnsembleStatisticalVectorDataResponse,
        GetDeltaEnsembleStatisticalVectorDataError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/delta_ensemble_statistical_vector_data/",
    });
};

/**
 * Get Statistical Vector Data Per Sensitivity
 * Get statistical vector data for an ensemble per sensitivity
 */
export const getStatisticalVectorDataPerSensitivity = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalVectorDataPerSensitivityData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetStatisticalVectorDataPerSensitivityResponse,
        GetStatisticalVectorDataPerSensitivityError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/statistical_vector_data_per_sensitivity/",
    });
};

/**
 * Get Realization Vector At Timestamp
 */
export const getRealizationVectorAtTimestamp = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationVectorAtTimestampData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRealizationVectorAtTimestampResponse,
        GetRealizationVectorAtTimestampError,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/realization_vector_at_timestamp/",
    });
};

/**
 * Get Table Definitions
 * Get the volumetric tables definitions for a given ensemble.
 */
export const getTableDefinitions = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDefinitionsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetTableDefinitionsResponse, GetTableDefinitionsError, ThrowOnError>({
        ...options,
        url: "/inplace_volumetrics/table_definitions/",
    });
};

/**
 * Post Get Aggregated Per Realization Table Data
 * Get aggregated volumetric data for a given table with data per realization based on requested results and categories/index filter.
 *
 * Note: This endpoint is a post endpoint because the list of identifiers with values can be quite large and may exceed the query string limit.
 * As the endpoint is post, the identifiers with values object is kept for convenience.
 */
export const postGetAggregatedPerRealizationTableData = <ThrowOnError extends boolean = false>(
    options: Options<PostGetAggregatedPerRealizationTableDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        PostGetAggregatedPerRealizationTableDataResponse,
        PostGetAggregatedPerRealizationTableDataError,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/inplace_volumetrics/get_aggregated_per_realization_table_data/",
    });
};

/**
 * Post Get Aggregated Statistical Table Data
 * Get statistical volumetric data across selected realizations for a given table based on requested results and categories/index filter.
 *
 * Note: This endpoint is a post endpoint because the list of identifiers with values can be quite large and may exceed the query string limit.
 * As the endpoint is post, the identifiers with values object is kept for convenience.
 */
export const postGetAggregatedStatisticalTableData = <ThrowOnError extends boolean = false>(
    options: Options<PostGetAggregatedStatisticalTableDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        PostGetAggregatedStatisticalTableDataResponse,
        PostGetAggregatedStatisticalTableDataError,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/inplace_volumetrics/get_aggregated_statistical_table_data/",
    });
};

/**
 * Get Realization Surfaces Metadata
 * Get metadata for realization surfaces in a Sumo ensemble
 */
export const getRealizationSurfacesMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationSurfacesMetadataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRealizationSurfacesMetadataResponse,
        GetRealizationSurfacesMetadataError,
        ThrowOnError
    >({
        ...options,
        url: "/surface/realization_surfaces_metadata/",
    });
};

/**
 * Get Observed Surfaces Metadata
 * Get metadata for observed surfaces in a Sumo case
 */
export const getObservedSurfacesMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetObservedSurfacesMetadataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetObservedSurfacesMetadataResponse,
        GetObservedSurfacesMetadataError,
        ThrowOnError
    >({
        ...options,
        url: "/surface/observed_surfaces_metadata/",
    });
};

/**
 * Get Surface Data
 * Get surface data for the specified surface.
 *
 * ---
 * *General description of the types of surface addresses that exist. The specific address types supported by this endpoint can be a subset of these.*
 *
 * - *REAL* - Realization surface address. Addresses a specific realization surface within an ensemble. Always specifies a single realization number
 * - *OBS* - Observed surface address. Addresses an observed surface which is not associated with any specific ensemble.
 * - *STAT* - Statistical surface address. Fully specifies a statistical surface, including the statistic function and which realizations to include.
 * - *PARTIAL* - Partial surface address. Similar to a realization surface address, but does not include a specific realization number.
 *
 * Structure of the different types of address strings:
 *
 * ```
 * REAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<realization>[~~<iso_date_or_interval>]
 * STAT~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<stat_function>~~<stat_realizations>[~~<iso_date_or_interval>]
 * OBS~~<case_uuid>~~<surface_name>~~<attribute>~~<iso_date_or_interval>
 * PARTIAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>[~~<iso_date_or_interval>]
 * ```
 *
 * The `<stat_realizations>` component in a *STAT* address contains the list of realizations to include in the statistics
 * encoded as a `UintListStr` or "*" to include all realizations.
 */
export const getSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetSurfaceDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetSurfaceDataResponse, GetSurfaceDataError, ThrowOnError>({
        ...options,
        url: "/surface/surface_data",
    });
};

/**
 * Post Get Surface Intersection
 * Get surface intersection data for requested surface name.
 *
 * The surface intersection data for surface name contains: An array of z-points, i.e. one z-value/depth per (x, y)-point in polyline,
 * and cumulative lengths, the accumulated length at each z-point in the array.
 */
export const postGetSurfaceIntersection = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSurfaceIntersectionData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        PostGetSurfaceIntersectionResponse,
        PostGetSurfaceIntersectionError,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/surface/get_surface_intersection",
    });
};

/**
 * Post Get Sample Surface In Points
 */
export const postGetSampleSurfaceInPoints = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSampleSurfaceInPointsData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        PostGetSampleSurfaceInPointsResponse,
        PostGetSampleSurfaceInPointsError,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/surface/get_sample_surface_in_points",
    });
};

/**
 * Get Delta Surface Data
 */
export const getDeltaSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaSurfaceDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetDeltaSurfaceDataResponse, GetDeltaSurfaceDataError, ThrowOnError>({
        ...options,
        url: "/surface/delta_surface_data",
    });
};

/**
 * Get Misfit Surface Data
 */
export const getMisfitSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetMisfitSurfaceDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetMisfitSurfaceDataResponse, GetMisfitSurfaceDataError, ThrowOnError>({
        ...options,
        url: "/surface/misfit_surface_data",
    });
};

/**
 * Get Wellbore Stratigraphic Columns
 */
export const getWellboreStratigraphicColumns = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreStratigraphicColumnsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWellboreStratigraphicColumnsResponse,
        GetWellboreStratigraphicColumnsError,
        ThrowOnError
    >({
        ...options,
        url: "/surface/wellbore_stratigraphic_columns/",
    });
};

/**
 * Get Stratigraphic Units
 */
export const getStratigraphicUnits = <ThrowOnError extends boolean = false>(
    options: Options<GetStratigraphicUnitsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetStratigraphicUnitsResponse, GetStratigraphicUnitsError, ThrowOnError>({
        ...options,
        url: "/surface/stratigraphic_units",
    });
};

/**
 * Get Parameter Names And Description
 * Retrieve parameter names and description for an ensemble
 */
export const getParameterNamesAndDescription = <ThrowOnError extends boolean = false>(
    options: Options<GetParameterNamesAndDescriptionData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetParameterNamesAndDescriptionResponse,
        GetParameterNamesAndDescriptionError,
        ThrowOnError
    >({
        ...options,
        url: "/parameters/parameter_names_and_description/",
    });
};

/**
 * Get Parameter
 * Get a parameter in a given Sumo ensemble
 */
export const getParameter = <ThrowOnError extends boolean = false>(
    options: Options<GetParameterData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetParameterResponse, GetParameterError, ThrowOnError>({
        ...options,
        url: "/parameters/parameter/",
    });
};

/**
 * Get Parameters
 */
export const getParameters = <ThrowOnError extends boolean = false>(
    options: Options<GetParametersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetParametersResponse, GetParametersError, ThrowOnError>({
        ...options,
        url: "/parameters/parameters/",
    });
};

/**
 * Get Is Sensitivity Run
 * Check if a given Sumo ensemble is a sensitivity run
 */
export const getIsSensitivityRun = <ThrowOnError extends boolean = false>(
    options: Options<GetIsSensitivityRunData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetIsSensitivityRunResponse, GetIsSensitivityRunError, ThrowOnError>({
        ...options,
        url: "/parameters/is_sensitivity_run/",
    });
};

/**
 * Get Sensitivities
 * Get sensitivities in a given Sumo ensemble
 */
export const getSensitivities = <ThrowOnError extends boolean = false>(
    options: Options<GetSensitivitiesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetSensitivitiesResponse, GetSensitivitiesError, ThrowOnError>({
        ...options,
        url: "/parameters/sensitivities/",
    });
};

/**
 * Get Grid Models Info
 * Get metadata for all 3D grid models, including bbox, dimensions and properties
 */
export const getGridModelsInfo = <ThrowOnError extends boolean = false>(
    options: Options<GetGridModelsInfoData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetGridModelsInfoResponse, GetGridModelsInfoError, ThrowOnError>({
        ...options,
        url: "/grid3d/grid_models_info/",
    });
};

/**
 * Get Grid Surface
 * Get a grid
 */
export const getGridSurface = <ThrowOnError extends boolean = false>(
    options: Options<GetGridSurfaceData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetGridSurfaceResponse, GetGridSurfaceError, ThrowOnError>({
        ...options,
        url: "/grid3d/grid_surface",
    });
};

/**
 * Get Grid Parameter
 * Get a grid parameter
 */
export const getGridParameter = <ThrowOnError extends boolean = false>(
    options: Options<GetGridParameterData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetGridParameterResponse, GetGridParameterError, ThrowOnError>({
        ...options,
        url: "/grid3d/grid_parameter",
    });
};

/**
 * Post Get Polyline Intersection
 */
export const postGetPolylineIntersection = <ThrowOnError extends boolean = false>(
    options: Options<PostGetPolylineIntersectionData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        PostGetPolylineIntersectionResponse,
        PostGetPolylineIntersectionError,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/grid3d/get_polyline_intersection",
    });
};

/**
 * Get Realization Flow Network
 */
export const getRealizationFlowNetwork = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationFlowNetworkData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRealizationFlowNetworkResponse,
        GetRealizationFlowNetworkError,
        ThrowOnError
    >({
        ...options,
        url: "/flow_network/realization_flow_network/",
    });
};

/**
 * Get Table Data
 * Get pvt table data for a given Sumo ensemble and realization
 */
export const getTableData = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetTableDataResponse, GetTableDataError, ThrowOnError>({
        ...options,
        url: "/pvt/table_data/",
    });
};

/**
 * Get Well Completions Data
 */
export const getWellCompletionsData = <ThrowOnError extends boolean = false>(
    options: Options<GetWellCompletionsDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWellCompletionsDataResponse, GetWellCompletionsDataError, ThrowOnError>({
        ...options,
        url: "/well_completions/well_completions_data/",
    });
};

/**
 * Get Drilled Wellbore Headers
 * Get wellbore headers for all wells in the field
 */
export const getDrilledWellboreHeaders = <ThrowOnError extends boolean = false>(
    options: Options<GetDrilledWellboreHeadersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDrilledWellboreHeadersResponse,
        GetDrilledWellboreHeadersError,
        ThrowOnError
    >({
        ...options,
        url: "/well/drilled_wellbore_headers/",
    });
};

/**
 * Get Well Trajectories
 * Get well trajectories for field
 */
export const getWellTrajectories = <ThrowOnError extends boolean = false>(
    options: Options<GetWellTrajectoriesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWellTrajectoriesResponse, GetWellTrajectoriesError, ThrowOnError>({
        ...options,
        url: "/well/well_trajectories/",
    });
};

/**
 * Get Wellbore Pick Identifiers
 * Get wellbore pick identifiers for field and stratigraphic column
 */
export const getWellborePickIdentifiers = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePickIdentifiersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWellborePickIdentifiersResponse,
        GetWellborePickIdentifiersError,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_pick_identifiers/",
    });
};

/**
 * Get Wellbore Picks For Pick Identifier
 * Get wellbore picks for field and pick identifier
 */
export const getWellborePicksForPickIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksForPickIdentifierData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWellborePicksForPickIdentifierResponse,
        GetWellborePicksForPickIdentifierError,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_picks_for_pick_identifier/",
    });
};

/**
 * Get Wellbore Picks For Wellbore
 * Get wellbore picks for field and pick identifier
 */
export const getWellborePicksForWellbore = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksForWellboreData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWellborePicksForWellboreResponse,
        GetWellborePicksForWellboreError,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_picks_for_wellbore/",
    });
};

/**
 * Get Wellbore Picks In Strat Column
 */
export const getWellborePicksInStratColumn = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksInStratColumnData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWellborePicksInStratColumnResponse,
        GetWellborePicksInStratColumnError,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_picks_in_strat_column",
    });
};

/**
 * Get Wellbore Completions
 * Get well bore completions for a single well bore
 */
export const getWellboreCompletions = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreCompletionsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWellboreCompletionsResponse, GetWellboreCompletionsError, ThrowOnError>({
        ...options,
        url: "/well/wellbore_completions/",
    });
};

/**
 * Get Wellbore Casings
 * Get well bore casings for a single well bore
 */
export const getWellboreCasings = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreCasingsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWellboreCasingsResponse, GetWellboreCasingsError, ThrowOnError>({
        ...options,
        url: "/well/wellbore_casings/",
    });
};

/**
 * Get Wellbore Perforations
 * Get well bore casing for a single well bore
 */
export const getWellborePerforations = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePerforationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWellborePerforationsResponse, GetWellborePerforationsError, ThrowOnError>(
        {
            ...options,
            url: "/well/wellbore_perforations/",
        },
    );
};

/**
 * Get Wellbore Log Curve Headers
 * Get all log curve headers for a single well bore.
 * Logs are available from multiple sources, which can be specificed by the "sources" parameter.
 */
export const getWellboreLogCurveHeaders = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreLogCurveHeadersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWellboreLogCurveHeadersResponse,
        GetWellboreLogCurveHeadersError,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_log_curve_headers/",
    });
};

/**
 * Get Log Curve Data
 * Get log curve data
 */
export const getLogCurveData = <ThrowOnError extends boolean = false>(
    options: Options<GetLogCurveDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetLogCurveDataResponse, GetLogCurveDataError, ThrowOnError>({
        ...options,
        url: "/well/log_curve_data/",
    });
};

/**
 * Get Seismic Cube Meta List
 * Get a list of seismic cube meta.
 */
export const getSeismicCubeMetaList = <ThrowOnError extends boolean = false>(
    options: Options<GetSeismicCubeMetaListData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetSeismicCubeMetaListResponse, GetSeismicCubeMetaListError, ThrowOnError>({
        ...options,
        url: "/seismic/seismic_cube_meta_list/",
    });
};

/**
 * Get Inline Slice
 * Get a seismic inline from a seismic cube.
 */
export const getInlineSlice = <ThrowOnError extends boolean = false>(
    options: Options<GetInlineSliceData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetInlineSliceResponse, GetInlineSliceError, ThrowOnError>({
        ...options,
        url: "/seismic/get_inline_slice/",
    });
};

/**
 * Get Crossline Slice
 * Get a seismic crossline from a seismic cube.
 */
export const getCrosslineSlice = <ThrowOnError extends boolean = false>(
    options: Options<GetCrosslineSliceData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetCrosslineSliceResponse, GetCrosslineSliceError, ThrowOnError>({
        ...options,
        url: "/seismic/get_crossline_slice/",
    });
};

/**
 * Get Depth Slice
 * Get a seismic depth slice from a seismic cube.
 */
export const getDepthSlice = <ThrowOnError extends boolean = false>(
    options: Options<GetDepthSliceData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetDepthSliceResponse, GetDepthSliceError, ThrowOnError>({
        ...options,
        url: "/seismic/get_depth_slice/",
    });
};

/**
 * Post Get Seismic Fence
 * Get a fence of seismic data from a polyline defined by a set of (x, y) coordinates in domain coordinate system.
 *
 * The fence data contains a set of traces perpendicular to the polyline, with one trace per (x, y)-point in polyline.
 * Each trace has equal number of samples, and is a set of sample values along the depth direction of the seismic cube.
 *
 * Returns:
 * A SeismicFenceData object with fence traces in encoded 1D array, metadata for trace array decoding and fence min/max depth.
 */
export const postGetSeismicFence = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSeismicFenceData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<PostGetSeismicFenceResponse, PostGetSeismicFenceError, ThrowOnError>({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/seismic/get_seismic_fence/",
    });
};

/**
 * Get Polygons Directory
 * Get a directory of polygons in a Sumo ensemble
 */
export const getPolygonsDirectory = <ThrowOnError extends boolean = false>(
    options: Options<GetPolygonsDirectoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetPolygonsDirectoryResponse, GetPolygonsDirectoryError, ThrowOnError>({
        ...options,
        url: "/polygons/polygons_directory/",
    });
};

/**
 * Get Polygons Data
 */
export const getPolygonsData = <ThrowOnError extends boolean = false>(
    options: Options<GetPolygonsDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetPolygonsDataResponse, GetPolygonsDataError, ThrowOnError>({
        ...options,
        url: "/polygons/polygons_data/",
    });
};

/**
 * Get User Photo
 * Get username, display name and avatar from Microsoft Graph API for a given user id
 */
export const getUserPhoto = <ThrowOnError extends boolean = false>(
    options: Options<GetUserPhotoData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetUserPhotoResponse, GetUserPhotoError, ThrowOnError>({
        ...options,
        url: "/graph/user_photo/",
    });
};

/**
 * Get Observations
 * Retrieve all observations found in sumo case
 */
export const getObservations = <ThrowOnError extends boolean = false>(
    options: Options<GetObservationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetObservationsResponse, GetObservationsError, ThrowOnError>({
        ...options,
        url: "/observations/observations/",
    });
};

/**
 * Get Table Definition
 */
export const getTableDefinition = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDefinitionData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetTableDefinitionResponse, GetTableDefinitionError, ThrowOnError>({
        ...options,
        url: "/rft/table_definition",
    });
};

/**
 * Get Realization Data
 */
export const getRealizationData = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetRealizationDataResponse, GetRealizationDataError, ThrowOnError>({
        ...options,
        url: "/rft/realization_data",
    });
};

/**
 * Get Vfp Table Names
 */
export const getVfpTableNames = <ThrowOnError extends boolean = false>(
    options: Options<GetVfpTableNamesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetVfpTableNamesResponse, GetVfpTableNamesError, ThrowOnError>({
        ...options,
        url: "/vfp/vfp_table_names/",
    });
};

/**
 * Get Vfp Table
 */
export const getVfpTable = <ThrowOnError extends boolean = false>(options: Options<GetVfpTableData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVfpTableResponse, GetVfpTableError, ThrowOnError>({
        ...options,
        url: "/vfp/vfp_table/",
    });
};

/**
 *  Login Route
 */
export const loginRoute = <ThrowOnError extends boolean = false>(options?: Options<LoginRouteData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, LoginRouteError, ThrowOnError>({
        ...options,
        url: "/login",
    });
};

/**
 *  Authorized Callback Route
 */
export const authorizedCallbackRoute = <ThrowOnError extends boolean = false>(
    options?: Options<AuthorizedCallbackRouteData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: "/auth-callback",
    });
};

/**
 * Get Alive
 */
export const getAlive = <ThrowOnError extends boolean = false>(options?: Options<GetAliveData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAliveResponse, unknown, ThrowOnError>({
        ...options,
        url: "/alive",
    });
};

/**
 * Get Alive Protected
 */
export const getAliveProtected = <ThrowOnError extends boolean = false>(
    options?: Options<GetAliveProtectedData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetAliveProtectedResponse, unknown, ThrowOnError>({
        ...options,
        url: "/alive_protected",
    });
};

/**
 * Post Logout
 */
export const postLogout = <ThrowOnError extends boolean = false>(options?: Options<PostLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLogoutResponse, unknown, ThrowOnError>({
        ...options,
        url: "/logout",
    });
};

/**
 * Get Logged In User
 */
export const getLoggedInUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetLoggedInUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetLoggedInUserResponse, GetLoggedInUserError, ThrowOnError>({
        ...options,
        url: "/logged_in_user",
    });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(options?: Options<RootData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootResponse, unknown, ThrowOnError>({
        ...options,
        url: "/",
    });
};
