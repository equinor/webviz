// This file is auto-generated by @hey-api/openapi-ts
import { type Options, createClient, createConfig } from "@hey-api/client-axios";

import type {
    AuthorizedCallbackRouteData_api,
    GetAliveData_api,
    GetAliveProtectedData_api,
    GetAliveProtectedResponse_api,
    GetAliveResponse_api,
    GetCasesData_api,
    GetCasesError_api,
    GetCasesResponse_api,
    GetDeltaEnsembleRealizationsVectorDataData_api,
    GetDeltaEnsembleRealizationsVectorDataError_api,
    GetDeltaEnsembleRealizationsVectorDataResponse_api,
    GetDeltaEnsembleStatisticalVectorDataData_api,
    GetDeltaEnsembleStatisticalVectorDataError_api,
    GetDeltaEnsembleStatisticalVectorDataResponse_api,
    GetDeltaEnsembleVectorListData_api,
    GetDeltaEnsembleVectorListError_api,
    GetDeltaEnsembleVectorListResponse_api,
    GetDeltaSurfaceDataData_api,
    GetDeltaSurfaceDataError_api,
    GetDeltaSurfaceDataResponse_api,
    GetDrilledWellboreHeadersData_api,
    GetDrilledWellboreHeadersError_api,
    GetDrilledWellboreHeadersResponse_api,
    GetEnsembleDetailsData_api,
    GetEnsembleDetailsError_api,
    GetEnsembleDetailsResponse_api,
    GetEnsemblesData_api,
    GetEnsemblesError_api,
    GetEnsemblesResponse_api,
    GetFieldsData_api,
    GetFieldsResponse_api,
    GetGridModelsInfoData_api,
    GetGridModelsInfoError_api,
    GetGridModelsInfoResponse_api,
    GetGridParameterData_api,
    GetGridParameterError_api,
    GetGridParameterResponse_api,
    GetGridSurfaceData_api,
    GetGridSurfaceError_api,
    GetGridSurfaceResponse_api,
    GetHistoricalVectorDataData_api,
    GetHistoricalVectorDataError_api,
    GetHistoricalVectorDataResponse_api,
    GetIsGridGeometrySharedData_api,
    GetIsGridGeometrySharedError_api,
    GetIsGridGeometrySharedResponse_api,
    GetIsSensitivityRunData_api,
    GetIsSensitivityRunError_api,
    GetIsSensitivityRunResponse_api,
    GetLogCurveDataData_api,
    GetLogCurveDataError_api,
    GetLogCurveDataResponse_api,
    GetLoggedInUserData_api,
    GetLoggedInUserError_api,
    GetLoggedInUserResponse_api,
    GetMisfitSurfaceDataData_api,
    GetMisfitSurfaceDataError_api,
    GetMisfitSurfaceDataResponse_api,
    GetObservationsData_api,
    GetObservationsError_api,
    GetObservationsResponse_api,
    GetObservedSurfacesMetadataData_api,
    GetObservedSurfacesMetadataError_api,
    GetObservedSurfacesMetadataResponse_api,
    GetParameterData_api,
    GetParameterError_api,
    GetParameterNamesAndDescriptionData_api,
    GetParameterNamesAndDescriptionError_api,
    GetParameterNamesAndDescriptionResponse_api,
    GetParameterResponse_api,
    GetParametersData_api,
    GetParametersError_api,
    GetParametersResponse_api,
    GetPolygonsDataData_api,
    GetPolygonsDataError_api,
    GetPolygonsDataResponse_api,
    GetPolygonsDirectoryData_api,
    GetPolygonsDirectoryError_api,
    GetPolygonsDirectoryResponse_api,
    GetRealizationDataData_api,
    GetRealizationDataError_api,
    GetRealizationDataResponse_api,
    GetRealizationFlowNetworkData_api,
    GetRealizationFlowNetworkError_api,
    GetRealizationFlowNetworkResponse_api,
    GetRealizationSurfacesMetadataData_api,
    GetRealizationSurfacesMetadataError_api,
    GetRealizationSurfacesMetadataResponse_api,
    GetRealizationVectorAtTimestampData_api,
    GetRealizationVectorAtTimestampError_api,
    GetRealizationVectorAtTimestampResponse_api,
    GetRealizationsTablesAreEqualData_api,
    GetRealizationsTablesAreEqualError_api,
    GetRealizationsTablesAreEqualResponse_api,
    GetRealizationsVectorDataData_api,
    GetRealizationsVectorDataError_api,
    GetRealizationsVectorDataResponse_api,
    GetSeismicCubeMetaListData_api,
    GetSeismicCubeMetaListError_api,
    GetSeismicCubeMetaListResponse_api,
    GetSensitivitiesData_api,
    GetSensitivitiesError_api,
    GetSensitivitiesResponse_api,
    GetStatisticalVectorDataData_api,
    GetStatisticalVectorDataError_api,
    GetStatisticalVectorDataPerSensitivityData_api,
    GetStatisticalVectorDataPerSensitivityError_api,
    GetStatisticalVectorDataPerSensitivityResponse_api,
    GetStatisticalVectorDataResponse_api,
    GetStratigraphicUnitsData_api,
    GetStratigraphicUnitsError_api,
    GetStratigraphicUnitsResponse_api,
    GetSurfaceDataData_api,
    GetSurfaceDataError_api,
    GetSurfaceDataResponse_api,
    GetTableDataData_api,
    GetTableDataError_api,
    GetTableDataResponse_api,
    GetTableDefinitionData_api,
    GetTableDefinitionError_api,
    GetTableDefinitionResponse_api,
    GetTableDefinitionsData_api,
    GetTableDefinitionsError_api,
    GetTableDefinitionsResponse_api,
    GetTimestampsListData_api,
    GetTimestampsListError_api,
    GetTimestampsListResponse_api,
    GetUserPhotoData_api,
    GetUserPhotoError_api,
    GetUserPhotoResponse_api,
    GetVectorListData_api,
    GetVectorListError_api,
    GetVectorListResponse_api,
    GetVfpTableData_api,
    GetVfpTableError_api,
    GetVfpTableNamesData_api,
    GetVfpTableNamesError_api,
    GetVfpTableNamesResponse_api,
    GetVfpTableResponse_api,
    GetWellCompletionsDataData_api,
    GetWellCompletionsDataError_api,
    GetWellCompletionsDataResponse_api,
    GetWellTrajectoriesData_api,
    GetWellTrajectoriesError_api,
    GetWellTrajectoriesResponse_api,
    GetWellboreCasingsData_api,
    GetWellboreCasingsError_api,
    GetWellboreCasingsResponse_api,
    GetWellboreCompletionsData_api,
    GetWellboreCompletionsError_api,
    GetWellboreCompletionsResponse_api,
    GetWellboreLogCurveHeadersData_api,
    GetWellboreLogCurveHeadersError_api,
    GetWellboreLogCurveHeadersResponse_api,
    GetWellborePerforationsData_api,
    GetWellborePerforationsError_api,
    GetWellborePerforationsResponse_api,
    GetWellborePickIdentifiersData_api,
    GetWellborePickIdentifiersError_api,
    GetWellborePickIdentifiersResponse_api,
    GetWellborePicksForPickIdentifierData_api,
    GetWellborePicksForPickIdentifierError_api,
    GetWellborePicksForPickIdentifierResponse_api,
    GetWellborePicksForWellboreData_api,
    GetWellborePicksForWellboreError_api,
    GetWellborePicksForWellboreResponse_api,
    LoginRouteData_api,
    LoginRouteError_api,
    PostGetAggregatedPerRealizationTableDataData_api,
    PostGetAggregatedPerRealizationTableDataError_api,
    PostGetAggregatedPerRealizationTableDataResponse_api,
    PostGetAggregatedStatisticalTableDataData_api,
    PostGetAggregatedStatisticalTableDataError_api,
    PostGetAggregatedStatisticalTableDataResponse_api,
    PostGetPolylineIntersectionData_api,
    PostGetPolylineIntersectionError_api,
    PostGetPolylineIntersectionResponse_api,
    PostGetSampleSurfaceInPointsData_api,
    PostGetSampleSurfaceInPointsError_api,
    PostGetSampleSurfaceInPointsResponse_api,
    PostGetSeismicFenceData_api,
    PostGetSeismicFenceError_api,
    PostGetSeismicFenceResponse_api,
    PostGetSurfaceIntersectionData_api,
    PostGetSurfaceIntersectionError_api,
    PostGetSurfaceIntersectionResponse_api,
    RootData_api,
    RootResponse_api,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get Fields
 * Get list of fields
 */
export const getFields = <ThrowOnError extends boolean = false>(options?: Options<GetFieldsData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFieldsResponse_api, unknown, ThrowOnError>({
        ...options,
        url: "/fields",
    });
};

/**
 * Get Cases
 * Get list of cases for specified field
 */
export const getCases = <ThrowOnError extends boolean = false>(options: Options<GetCasesData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCasesResponse_api, GetCasesError_api, ThrowOnError>({
        ...options,
        url: "/cases",
    });
};

/**
 * Get Ensembles
 * Get list of ensembles for a case
 */
export const getEnsembles = <ThrowOnError extends boolean = false>(
    options: Options<GetEnsemblesData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetEnsemblesResponse_api, GetEnsemblesError_api, ThrowOnError>({
        ...options,
        url: "/cases/{case_uuid}/ensembles",
    });
};

/**
 * Get Ensemble Details
 * Get more detailed information for an ensemble
 */
export const getEnsembleDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetEnsembleDetailsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetEnsembleDetailsResponse_api, GetEnsembleDetailsError_api, ThrowOnError>({
        ...options,
        url: "/cases/{case_uuid}/ensembles/{ensemble_name}",
    });
};

/**
 * Get Vector List
 * Get list of all vectors in a given Sumo ensemble, excluding any historical vectors
 *
 * Optionally include derived vectors.
 */
export const getVectorList = <ThrowOnError extends boolean = false>(
    options: Options<GetVectorListData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetVectorListResponse_api, GetVectorListError_api, ThrowOnError>({
        ...options,
        url: "/timeseries/vector_list/",
    });
};

/**
 * Get Delta Ensemble Vector List
 * Get list of all vectors for a delta ensemble based on all vectors in a given Sumo ensemble, excluding any historical vectors
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleVectorList = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleVectorListData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetDeltaEnsembleVectorListResponse_api,
        GetDeltaEnsembleVectorListError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/delta_ensemble_vector_list/",
    });
};

/**
 * Get Realizations Vector Data
 * Get vector data per realization
 */
export const getRealizationsVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationsVectorDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetRealizationsVectorDataResponse_api,
        GetRealizationsVectorDataError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/realizations_vector_data/",
    });
};

/**
 * Get Delta Ensemble Realizations Vector Data
 * Get vector data per realization
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleRealizationsVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleRealizationsVectorDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetDeltaEnsembleRealizationsVectorDataResponse_api,
        GetDeltaEnsembleRealizationsVectorDataError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/delta_ensemble_realizations_vector_data/",
    });
};

/**
 * Get Timestamps List
 * Get the intersection of available timestamps.
 * Note that when resampling_frequency is None, the pure intersection of the
 * stored raw dates will be returned. Thus the returned list of dates will not include
 * dates from long running realizations.
 * For other resampling frequencies, the date range will be expanded to cover the entire
 * time range of all the requested realizations before computing the resampled dates.
 */
export const getTimestampsList = <ThrowOnError extends boolean = false>(
    options: Options<GetTimestampsListData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetTimestampsListResponse_api, GetTimestampsListError_api, ThrowOnError>({
        ...options,
        url: "/timeseries/timestamps_list/",
    });
};

/**
 * Get Historical Vector Data
 */
export const getHistoricalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetHistoricalVectorDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetHistoricalVectorDataResponse_api, GetHistoricalVectorDataError_api, ThrowOnError>(
        {
            ...options,
            url: "/timeseries/historical_vector_data/",
        }
    );
};

/**
 * Get Statistical Vector Data
 * Get statistical vector data for an ensemble
 */
export const getStatisticalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalVectorDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetStatisticalVectorDataResponse_api,
        GetStatisticalVectorDataError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/statistical_vector_data/",
    });
};

/**
 * Get Delta Ensemble Statistical Vector Data
 * Get statistical vector data for an ensemble
 *
 * Definition:
 *
 * delta_ensemble = comparison_ensemble - reference_ensemble
 */
export const getDeltaEnsembleStatisticalVectorData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaEnsembleStatisticalVectorDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetDeltaEnsembleStatisticalVectorDataResponse_api,
        GetDeltaEnsembleStatisticalVectorDataError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/delta_ensemble_statistical_vector_data/",
    });
};

/**
 * Get Statistical Vector Data Per Sensitivity
 * Get statistical vector data for an ensemble per sensitivity
 */
export const getStatisticalVectorDataPerSensitivity = <ThrowOnError extends boolean = false>(
    options: Options<GetStatisticalVectorDataPerSensitivityData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetStatisticalVectorDataPerSensitivityResponse_api,
        GetStatisticalVectorDataPerSensitivityError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/statistical_vector_data_per_sensitivity/",
    });
};

/**
 * Get Realization Vector At Timestamp
 */
export const getRealizationVectorAtTimestamp = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationVectorAtTimestampData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetRealizationVectorAtTimestampResponse_api,
        GetRealizationVectorAtTimestampError_api,
        ThrowOnError
    >({
        ...options,
        url: "/timeseries/realization_vector_at_timestamp/",
    });
};

/**
 * Get Table Definitions
 * Get the volumetric tables definitions for a given ensemble.
 */
export const getTableDefinitions = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDefinitionsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetTableDefinitionsResponse_api, GetTableDefinitionsError_api, ThrowOnError>({
        ...options,
        url: "/inplace_volumetrics/table_definitions/",
    });
};

/**
 * Post Get Aggregated Per Realization Table Data
 * Get aggregated volumetric data for a given table with data per realization based on requested results and categories/index filter.
 *
 * Note: This endpoint is a post endpoint because the list of identifiers with values can be quite large and may exceed the query string limit.
 * As the endpoint is post, the identifiers with values object is kept for convenience.
 */
export const postGetAggregatedPerRealizationTableData = <ThrowOnError extends boolean = false>(
    options: Options<PostGetAggregatedPerRealizationTableDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostGetAggregatedPerRealizationTableDataResponse_api,
        PostGetAggregatedPerRealizationTableDataError_api,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/inplace_volumetrics/get_aggregated_per_realization_table_data/",
    });
};

/**
 * Post Get Aggregated Statistical Table Data
 * Get statistical volumetric data across selected realizations for a given table based on requested results and categories/index filter.
 *
 * Note: This endpoint is a post endpoint because the list of identifiers with values can be quite large and may exceed the query string limit.
 * As the endpoint is post, the identifiers with values object is kept for convenience.
 */
export const postGetAggregatedStatisticalTableData = <ThrowOnError extends boolean = false>(
    options: Options<PostGetAggregatedStatisticalTableDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostGetAggregatedStatisticalTableDataResponse_api,
        PostGetAggregatedStatisticalTableDataError_api,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/inplace_volumetrics/get_aggregated_statistical_table_data/",
    });
};

/**
 * Get Realization Surfaces Metadata
 * Get metadata for realization surfaces in a Sumo ensemble
 */
export const getRealizationSurfacesMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationSurfacesMetadataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetRealizationSurfacesMetadataResponse_api,
        GetRealizationSurfacesMetadataError_api,
        ThrowOnError
    >({
        ...options,
        url: "/surface/realization_surfaces_metadata/",
    });
};

/**
 * Get Observed Surfaces Metadata
 * Get metadata for observed surfaces in a Sumo case
 */
export const getObservedSurfacesMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetObservedSurfacesMetadataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetObservedSurfacesMetadataResponse_api,
        GetObservedSurfacesMetadataError_api,
        ThrowOnError
    >({
        ...options,
        url: "/surface/observed_surfaces_metadata/",
    });
};

/**
 * Get Surface Data
 * Get surface data for the specified surface.
 *
 * ---
 * *General description of the types of surface addresses that exist. The specific address types supported by this endpoint can be a subset of these.*
 *
 * - *REAL* - Realization surface address. Addresses a specific realization surface within an ensemble. Always specifies a single realization number
 * - *OBS* - Observed surface address. Addresses an observed surface which is not associated with any specific ensemble.
 * - *STAT* - Statistical surface address. Fully specifies a statistical surface, including the statistic function and which realizations to include.
 * - *PARTIAL* - Partial surface address. Similar to a realization surface address, but does not include a specific realization number.
 *
 * Structure of the different types of address strings:
 *
 * ```
 * REAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<realization>[~~<iso_date_or_interval>]
 * STAT~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>~~<stat_function>~~<stat_realizations>[~~<iso_date_or_interval>]
 * OBS~~<case_uuid>~~<surface_name>~~<attribute>~~<iso_date_or_interval>
 * PARTIAL~~<case_uuid>~~<ensemble>~~<surface_name>~~<attribute>[~~<iso_date_or_interval>]
 * ```
 *
 * The `<stat_realizations>` component in a *STAT* address contains the list of realizations to include in the statistics
 * encoded as a `UintListStr` or "*" to include all realizations.
 */
export const getSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetSurfaceDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSurfaceDataResponse_api, GetSurfaceDataError_api, ThrowOnError>({
        ...options,
        url: "/surface/surface_data",
    });
};

/**
 * Post Get Surface Intersection
 * Get surface intersection data for requested surface name.
 *
 * The surface intersection data for surface name contains: An array of z-points, i.e. one z-value/depth per (x, y)-point in polyline,
 * and cumulative lengths, the accumulated length at each z-point in the array.
 */
export const postGetSurfaceIntersection = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSurfaceIntersectionData_api, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostGetSurfaceIntersectionResponse_api,
        PostGetSurfaceIntersectionError_api,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/surface/get_surface_intersection",
    });
};

/**
 * Post Get Sample Surface In Points
 */
export const postGetSampleSurfaceInPoints = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSampleSurfaceInPointsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostGetSampleSurfaceInPointsResponse_api,
        PostGetSampleSurfaceInPointsError_api,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/surface/get_sample_surface_in_points",
    });
};

/**
 * Get Delta Surface Data
 */
export const getDeltaSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetDeltaSurfaceDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetDeltaSurfaceDataResponse_api, GetDeltaSurfaceDataError_api, ThrowOnError>({
        ...options,
        url: "/surface/delta_surface_data",
    });
};

/**
 * Get Misfit Surface Data
 */
export const getMisfitSurfaceData = <ThrowOnError extends boolean = false>(
    options: Options<GetMisfitSurfaceDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetMisfitSurfaceDataResponse_api, GetMisfitSurfaceDataError_api, ThrowOnError>({
        ...options,
        url: "/surface/misfit_surface_data",
    });
};

/**
 * Get Stratigraphic Units
 */
export const getStratigraphicUnits = <ThrowOnError extends boolean = false>(
    options: Options<GetStratigraphicUnitsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetStratigraphicUnitsResponse_api, GetStratigraphicUnitsError_api, ThrowOnError>({
        ...options,
        url: "/surface/stratigraphic_units",
    });
};

/**
 * Get Parameter Names And Description
 * Retrieve parameter names and description for an ensemble
 */
export const getParameterNamesAndDescription = <ThrowOnError extends boolean = false>(
    options: Options<GetParameterNamesAndDescriptionData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetParameterNamesAndDescriptionResponse_api,
        GetParameterNamesAndDescriptionError_api,
        ThrowOnError
    >({
        ...options,
        url: "/parameters/parameter_names_and_description/",
    });
};

/**
 * Get Parameter
 * Get a parameter in a given Sumo ensemble
 */
export const getParameter = <ThrowOnError extends boolean = false>(
    options: Options<GetParameterData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetParameterResponse_api, GetParameterError_api, ThrowOnError>({
        ...options,
        url: "/parameters/parameter/",
    });
};

/**
 * Get Parameters
 */
export const getParameters = <ThrowOnError extends boolean = false>(
    options: Options<GetParametersData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetParametersResponse_api, GetParametersError_api, ThrowOnError>({
        ...options,
        url: "/parameters/parameters/",
    });
};

/**
 * Get Is Sensitivity Run
 * Check if a given Sumo ensemble is a sensitivity run
 */
export const getIsSensitivityRun = <ThrowOnError extends boolean = false>(
    options: Options<GetIsSensitivityRunData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetIsSensitivityRunResponse_api, GetIsSensitivityRunError_api, ThrowOnError>({
        ...options,
        url: "/parameters/is_sensitivity_run/",
    });
};

/**
 * Get Sensitivities
 * Get sensitivities in a given Sumo ensemble
 */
export const getSensitivities = <ThrowOnError extends boolean = false>(
    options: Options<GetSensitivitiesData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSensitivitiesResponse_api, GetSensitivitiesError_api, ThrowOnError>({
        ...options,
        url: "/parameters/sensitivities/",
    });
};

/**
 * Get Grid Models Info
 * Get metadata for all 3D grid models, including bbox, dimensions and properties
 */
export const getGridModelsInfo = <ThrowOnError extends boolean = false>(
    options: Options<GetGridModelsInfoData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetGridModelsInfoResponse_api, GetGridModelsInfoError_api, ThrowOnError>({
        ...options,
        url: "/grid3d/grid_models_info/",
    });
};

/**
 * Get Is Grid Geometry Shared
 * Check if a 3D grid geometry is shared across realizations
 */
export const getIsGridGeometryShared = <ThrowOnError extends boolean = false>(
    options: Options<GetIsGridGeometrySharedData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetIsGridGeometrySharedResponse_api, GetIsGridGeometrySharedError_api, ThrowOnError>(
        {
            ...options,
            url: "/grid3d/is_grid_geometry_shared/",
        }
    );
};

/**
 * Get Grid Surface
 * Get a grid
 */
export const getGridSurface = <ThrowOnError extends boolean = false>(
    options: Options<GetGridSurfaceData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetGridSurfaceResponse_api, GetGridSurfaceError_api, ThrowOnError>({
        ...options,
        url: "/grid3d/grid_surface",
    });
};

/**
 * Get Grid Parameter
 * Get a grid parameter
 */
export const getGridParameter = <ThrowOnError extends boolean = false>(
    options: Options<GetGridParameterData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetGridParameterResponse_api, GetGridParameterError_api, ThrowOnError>({
        ...options,
        url: "/grid3d/grid_parameter",
    });
};

/**
 * Post Get Polyline Intersection
 */
export const postGetPolylineIntersection = <ThrowOnError extends boolean = false>(
    options: Options<PostGetPolylineIntersectionData_api, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostGetPolylineIntersectionResponse_api,
        PostGetPolylineIntersectionError_api,
        ThrowOnError
    >({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/grid3d/get_polyline_intersection",
    });
};

/**
 * Get Realization Flow Network
 */
export const getRealizationFlowNetwork = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationFlowNetworkData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetRealizationFlowNetworkResponse_api,
        GetRealizationFlowNetworkError_api,
        ThrowOnError
    >({
        ...options,
        url: "/flow_network/realization_flow_network/",
    });
};

/**
 * Get Table Data
 * Get pvt table data for a given Sumo ensemble and realization
 */
export const getTableData = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetTableDataResponse_api, GetTableDataError_api, ThrowOnError>({
        ...options,
        url: "/pvt/table_data/",
    });
};

/**
 * Get Realizations Tables Are Equal
 * Check if all realizations has the same pvt table
 */
export const getRealizationsTablesAreEqual = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationsTablesAreEqualData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetRealizationsTablesAreEqualResponse_api,
        GetRealizationsTablesAreEqualError_api,
        ThrowOnError
    >({
        ...options,
        url: "/pvt/realizations_tables_are_equal/",
    });
};

/**
 * Get Well Completions Data
 */
export const getWellCompletionsData = <ThrowOnError extends boolean = false>(
    options: Options<GetWellCompletionsDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetWellCompletionsDataResponse_api, GetWellCompletionsDataError_api, ThrowOnError>({
        ...options,
        url: "/well_completions/well_completions_data/",
    });
};

/**
 * Get Drilled Wellbore Headers
 * Get wellbore headers for all wells in the field
 */
export const getDrilledWellboreHeaders = <ThrowOnError extends boolean = false>(
    options: Options<GetDrilledWellboreHeadersData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetDrilledWellboreHeadersResponse_api,
        GetDrilledWellboreHeadersError_api,
        ThrowOnError
    >({
        ...options,
        url: "/well/drilled_wellbore_headers/",
    });
};

/**
 * Get Well Trajectories
 * Get well trajectories for field
 */
export const getWellTrajectories = <ThrowOnError extends boolean = false>(
    options: Options<GetWellTrajectoriesData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetWellTrajectoriesResponse_api, GetWellTrajectoriesError_api, ThrowOnError>({
        ...options,
        url: "/well/well_trajectories/",
    });
};

/**
 * Get Wellbore Pick Identifiers
 * Get wellbore pick identifiers for field and stratigraphic column
 */
export const getWellborePickIdentifiers = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePickIdentifiersData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetWellborePickIdentifiersResponse_api,
        GetWellborePickIdentifiersError_api,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_pick_identifiers/",
    });
};

/**
 * Get Wellbore Picks For Pick Identifier
 * Get wellbore picks for field and pick identifier
 */
export const getWellborePicksForPickIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksForPickIdentifierData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetWellborePicksForPickIdentifierResponse_api,
        GetWellborePicksForPickIdentifierError_api,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_picks_for_pick_identifier/",
    });
};

/**
 * Get Wellbore Picks For Wellbore
 * Get wellbore picks for field and pick identifier
 */
export const getWellborePicksForWellbore = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePicksForWellboreData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetWellborePicksForWellboreResponse_api,
        GetWellborePicksForWellboreError_api,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_picks_for_wellbore/",
    });
};

/**
 * Get Wellbore Completions
 * Get well bore completions for a single well bore
 */
export const getWellboreCompletions = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreCompletionsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetWellboreCompletionsResponse_api, GetWellboreCompletionsError_api, ThrowOnError>({
        ...options,
        url: "/well/wellbore_completions/",
    });
};

/**
 * Get Wellbore Casings
 * Get well bore casings for a single well bore
 */
export const getWellboreCasings = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreCasingsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetWellboreCasingsResponse_api, GetWellboreCasingsError_api, ThrowOnError>({
        ...options,
        url: "/well/wellbore_casings/",
    });
};

/**
 * Get Wellbore Perforations
 * Get well bore casing for a single well bore
 */
export const getWellborePerforations = <ThrowOnError extends boolean = false>(
    options: Options<GetWellborePerforationsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetWellborePerforationsResponse_api, GetWellborePerforationsError_api, ThrowOnError>(
        {
            ...options,
            url: "/well/wellbore_perforations/",
        }
    );
};

/**
 * Get Wellbore Log Curve Headers
 * Get all log curve headers for a single well bore
 */
export const getWellboreLogCurveHeaders = <ThrowOnError extends boolean = false>(
    options: Options<GetWellboreLogCurveHeadersData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetWellboreLogCurveHeadersResponse_api,
        GetWellboreLogCurveHeadersError_api,
        ThrowOnError
    >({
        ...options,
        url: "/well/wellbore_log_curve_headers/",
    });
};

/**
 * Get Log Curve Data
 * Get log curve data
 */
export const getLogCurveData = <ThrowOnError extends boolean = false>(
    options: Options<GetLogCurveDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetLogCurveDataResponse_api, GetLogCurveDataError_api, ThrowOnError>({
        ...options,
        url: "/well/log_curve_data/",
    });
};

/**
 * Get Seismic Cube Meta List
 * Get a list of seismic cube meta.
 */
export const getSeismicCubeMetaList = <ThrowOnError extends boolean = false>(
    options: Options<GetSeismicCubeMetaListData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSeismicCubeMetaListResponse_api, GetSeismicCubeMetaListError_api, ThrowOnError>({
        ...options,
        url: "/seismic/seismic_cube_meta_list/",
    });
};

/**
 * Post Get Seismic Fence
 * Get a fence of seismic data from a polyline defined by a set of (x, y) coordinates in domain coordinate system.
 *
 * The fence data contains a set of traces perpendicular to the polyline, with one trace per (x, y)-point in polyline.
 * Each trace has equal number of samples, and is a set of sample values along the depth direction of the seismic cube.
 *
 * Returns:
 * A SeismicFenceData object with fence traces in encoded 1D array, metadata for trace array decoding and fence min/max depth.
 */
export const postGetSeismicFence = <ThrowOnError extends boolean = false>(
    options: Options<PostGetSeismicFenceData_api, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostGetSeismicFenceResponse_api, PostGetSeismicFenceError_api, ThrowOnError>({
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
        url: "/seismic/get_seismic_fence/",
    });
};

/**
 * Get Polygons Directory
 * Get a directory of polygons in a Sumo ensemble
 */
export const getPolygonsDirectory = <ThrowOnError extends boolean = false>(
    options: Options<GetPolygonsDirectoryData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetPolygonsDirectoryResponse_api, GetPolygonsDirectoryError_api, ThrowOnError>({
        ...options,
        url: "/polygons/polygons_directory/",
    });
};

/**
 * Get Polygons Data
 */
export const getPolygonsData = <ThrowOnError extends boolean = false>(
    options: Options<GetPolygonsDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetPolygonsDataResponse_api, GetPolygonsDataError_api, ThrowOnError>({
        ...options,
        url: "/polygons/polygons_data/",
    });
};

/**
 * Get User Photo
 * Get username, display name and avatar from Microsoft Graph API for a given user id
 */
export const getUserPhoto = <ThrowOnError extends boolean = false>(
    options: Options<GetUserPhotoData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetUserPhotoResponse_api, GetUserPhotoError_api, ThrowOnError>({
        ...options,
        url: "/graph/user_photo/",
    });
};

/**
 * Get Observations
 * Retrieve all observations found in sumo case
 */
export const getObservations = <ThrowOnError extends boolean = false>(
    options: Options<GetObservationsData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetObservationsResponse_api, GetObservationsError_api, ThrowOnError>({
        ...options,
        url: "/observations/observations/",
    });
};

/**
 * Get Table Definition
 */
export const getTableDefinition = <ThrowOnError extends boolean = false>(
    options: Options<GetTableDefinitionData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetTableDefinitionResponse_api, GetTableDefinitionError_api, ThrowOnError>({
        ...options,
        url: "/rft/table_definition",
    });
};

/**
 * Get Realization Data
 */
export const getRealizationData = <ThrowOnError extends boolean = false>(
    options: Options<GetRealizationDataData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetRealizationDataResponse_api, GetRealizationDataError_api, ThrowOnError>({
        ...options,
        url: "/rft/realization_data",
    });
};

/**
 * Get Vfp Table Names
 */
export const getVfpTableNames = <ThrowOnError extends boolean = false>(
    options: Options<GetVfpTableNamesData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetVfpTableNamesResponse_api, GetVfpTableNamesError_api, ThrowOnError>({
        ...options,
        url: "/vfp/vfp_table_names/",
    });
};

/**
 * Get Vfp Table
 */
export const getVfpTable = <ThrowOnError extends boolean = false>(options: Options<GetVfpTableData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVfpTableResponse_api, GetVfpTableError_api, ThrowOnError>({
        ...options,
        url: "/vfp/vfp_table/",
    });
};

/**
 *  Login Route
 */
export const loginRoute = <ThrowOnError extends boolean = false>(options?: Options<LoginRouteData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, LoginRouteError_api, ThrowOnError>({
        ...options,
        url: "/login",
    });
};

/**
 *  Authorized Callback Route
 */
export const authorizedCallbackRoute = <ThrowOnError extends boolean = false>(
    options?: Options<AuthorizedCallbackRouteData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: "/auth-callback",
    });
};

/**
 * Get Alive
 */
export const getAlive = <ThrowOnError extends boolean = false>(options?: Options<GetAliveData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAliveResponse_api, unknown, ThrowOnError>({
        ...options,
        url: "/alive",
    });
};

/**
 * Get Alive Protected
 */
export const getAliveProtected = <ThrowOnError extends boolean = false>(
    options?: Options<GetAliveProtectedData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAliveProtectedResponse_api, unknown, ThrowOnError>({
        ...options,
        url: "/alive_protected",
    });
};

/**
 * Get Logged In User
 */
export const getLoggedInUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetLoggedInUserData_api, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetLoggedInUserResponse_api, GetLoggedInUserError_api, ThrowOnError>({
        ...options,
        url: "/logged_in_user",
    });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(options?: Options<RootData_api, ThrowOnError>) => {
    return (options?.client ?? client).get<RootResponse_api, unknown, ThrowOnError>({
        ...options,
        url: "/",
    });
};
