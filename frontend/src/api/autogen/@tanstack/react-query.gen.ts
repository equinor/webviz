// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-axios";
import { queryOptions, type UseMutationOptions, type DefaultError } from "@tanstack/react-query";
import type {
    GetFieldsData,
    GetCasesData,
    GetEnsemblesData,
    GetEnsembleDetailsData,
    GetVectorListData,
    GetDeltaEnsembleVectorListData,
    GetRealizationsVectorDataData,
    GetDeltaEnsembleRealizationsVectorDataData,
    GetTimestampsListData,
    GetHistoricalVectorDataData,
    GetStatisticalVectorDataData,
    GetDeltaEnsembleStatisticalVectorDataData,
    GetStatisticalVectorDataPerSensitivityData,
    GetRealizationVectorAtTimestampData,
    GetTableDefinitionsData,
    PostGetAggregatedPerRealizationTableDataData,
    PostGetAggregatedPerRealizationTableDataError,
    PostGetAggregatedPerRealizationTableDataResponse,
    PostGetAggregatedStatisticalTableDataData,
    PostGetAggregatedStatisticalTableDataError,
    PostGetAggregatedStatisticalTableDataResponse,
    GetRealizationSurfacesMetadataData,
    GetObservedSurfacesMetadataData,
    GetSurfaceDataData,
    PostGetSurfaceIntersectionData,
    PostGetSurfaceIntersectionError,
    PostGetSurfaceIntersectionResponse,
    PostGetSampleSurfaceInPointsData,
    PostGetSampleSurfaceInPointsError,
    PostGetSampleSurfaceInPointsResponse,
    GetDeltaSurfaceDataData,
    GetMisfitSurfaceDataData,
    GetWellboreStratigraphicColumnsData,
    GetStratigraphicUnitsData,
    GetParameterNamesAndDescriptionData,
    GetParameterData,
    GetParametersData,
    GetIsSensitivityRunData,
    GetSensitivitiesData,
    GetGridModelsInfoData,
    GetGridSurfaceData,
    GetGridParameterData,
    PostGetPolylineIntersectionData,
    PostGetPolylineIntersectionError,
    PostGetPolylineIntersectionResponse,
    GetRealizationFlowNetworkData,
    GetTableDataData,
    GetWellCompletionsDataData,
    GetDrilledWellboreHeadersData,
    GetWellTrajectoriesData,
    GetWellborePickIdentifiersData,
    GetWellborePicksForPickIdentifierData,
    GetWellborePicksForWellboreData,
    GetWellborePicksInStratColumnData,
    GetWellboreCompletionsData,
    GetWellboreCasingsData,
    GetWellborePerforationsData,
    GetWellboreLogCurveHeadersData,
    GetLogCurveDataData,
    GetSeismicCubeMetaListData,
    GetInlineSliceData,
    GetCrosslineSliceData,
    GetDepthSliceData,
    PostGetSeismicFenceData,
    PostGetSeismicFenceError,
    PostGetSeismicFenceResponse,
    GetPolygonsDirectoryData,
    GetPolygonsDataData,
    GetUserPhotoData,
    GetObservationsData,
    GetTableDefinitionData,
    GetRealizationDataData,
    GetVfpTableNamesData,
    GetVfpTableData,
    LoginRouteData,
    AuthorizedCallbackRouteData,
    GetAliveData,
    GetAliveProtectedData,
    PostLogoutData,
    PostLogoutResponse,
    GetLoggedInUserData,
    RootData,
} from "../types.gen";
import {
    getFields,
    getCases,
    getEnsembles,
    getEnsembleDetails,
    getVectorList,
    getDeltaEnsembleVectorList,
    getRealizationsVectorData,
    getDeltaEnsembleRealizationsVectorData,
    getTimestampsList,
    getHistoricalVectorData,
    getStatisticalVectorData,
    getDeltaEnsembleStatisticalVectorData,
    getStatisticalVectorDataPerSensitivity,
    getRealizationVectorAtTimestamp,
    getTableDefinitions,
    postGetAggregatedPerRealizationTableData,
    postGetAggregatedStatisticalTableData,
    getRealizationSurfacesMetadata,
    getObservedSurfacesMetadata,
    getSurfaceData,
    postGetSurfaceIntersection,
    postGetSampleSurfaceInPoints,
    getDeltaSurfaceData,
    getMisfitSurfaceData,
    getWellboreStratigraphicColumns,
    getStratigraphicUnits,
    getParameterNamesAndDescription,
    getParameter,
    getParameters,
    getIsSensitivityRun,
    getSensitivities,
    getGridModelsInfo,
    getGridSurface,
    getGridParameter,
    postGetPolylineIntersection,
    getRealizationFlowNetwork,
    getTableData,
    getWellCompletionsData,
    getDrilledWellboreHeaders,
    getWellTrajectories,
    getWellborePickIdentifiers,
    getWellborePicksForPickIdentifier,
    getWellborePicksForWellbore,
    getWellborePicksInStratColumn,
    getWellboreCompletions,
    getWellboreCasings,
    getWellborePerforations,
    getWellboreLogCurveHeaders,
    getLogCurveData,
    getSeismicCubeMetaList,
    getInlineSlice,
    getCrosslineSlice,
    getDepthSlice,
    postGetSeismicFence,
    getPolygonsDirectory,
    getPolygonsData,
    getUserPhoto,
    getObservations,
    getTableDefinition,
    getRealizationData,
    getVfpTableNames,
    getVfpTable,
    loginRoute,
    authorizedCallbackRoute,
    getAlive,
    getAliveProtected,
    postLogout,
    getLoggedInUser,
    root,
    client,
} from "../sdk.gen";
import type { AxiosError } from "axios";

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
        _id: string;
        _infinite?: boolean;
    },
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean,
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseURL: (options?.client ?? client).getConfig().baseURL,
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getFieldsQueryKey = (options?: Options<GetFieldsData>) => [createQueryKey("getFields", options)];

export const getFieldsOptions = (options?: Options<GetFieldsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getFieldsQueryKey(options),
    });
};

export const getCasesQueryKey = (options: Options<GetCasesData>) => [createQueryKey("getCases", options)];

export const getCasesOptions = (options: Options<GetCasesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCases({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getCasesQueryKey(options),
    });
};

export const getEnsemblesQueryKey = (options: Options<GetEnsemblesData>) => [createQueryKey("getEnsembles", options)];

export const getEnsemblesOptions = (options: Options<GetEnsemblesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnsembles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getEnsemblesQueryKey(options),
    });
};

export const getEnsembleDetailsQueryKey = (options: Options<GetEnsembleDetailsData>) => [
    createQueryKey("getEnsembleDetails", options),
];

export const getEnsembleDetailsOptions = (options: Options<GetEnsembleDetailsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnsembleDetails({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getEnsembleDetailsQueryKey(options),
    });
};

export const getVectorListQueryKey = (options: Options<GetVectorListData>) => [
    createQueryKey("getVectorList", options),
];

export const getVectorListOptions = (options: Options<GetVectorListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVectorList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getVectorListQueryKey(options),
    });
};

export const getDeltaEnsembleVectorListQueryKey = (options: Options<GetDeltaEnsembleVectorListData>) => [
    createQueryKey("getDeltaEnsembleVectorList", options),
];

export const getDeltaEnsembleVectorListOptions = (options: Options<GetDeltaEnsembleVectorListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaEnsembleVectorList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaEnsembleVectorListQueryKey(options),
    });
};

export const getRealizationsVectorDataQueryKey = (options: Options<GetRealizationsVectorDataData>) => [
    createQueryKey("getRealizationsVectorData", options),
];

export const getRealizationsVectorDataOptions = (options: Options<GetRealizationsVectorDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationsVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationsVectorDataQueryKey(options),
    });
};

export const getDeltaEnsembleRealizationsVectorDataQueryKey = (
    options: Options<GetDeltaEnsembleRealizationsVectorDataData>,
) => [createQueryKey("getDeltaEnsembleRealizationsVectorData", options)];

export const getDeltaEnsembleRealizationsVectorDataOptions = (
    options: Options<GetDeltaEnsembleRealizationsVectorDataData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaEnsembleRealizationsVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaEnsembleRealizationsVectorDataQueryKey(options),
    });
};

export const getTimestampsListQueryKey = (options: Options<GetTimestampsListData>) => [
    createQueryKey("getTimestampsList", options),
];

export const getTimestampsListOptions = (options: Options<GetTimestampsListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTimestampsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTimestampsListQueryKey(options),
    });
};

export const getHistoricalVectorDataQueryKey = (options: Options<GetHistoricalVectorDataData>) => [
    createQueryKey("getHistoricalVectorData", options),
];

export const getHistoricalVectorDataOptions = (options: Options<GetHistoricalVectorDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHistoricalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getHistoricalVectorDataQueryKey(options),
    });
};

export const getStatisticalVectorDataQueryKey = (options: Options<GetStatisticalVectorDataData>) => [
    createQueryKey("getStatisticalVectorData", options),
];

export const getStatisticalVectorDataOptions = (options: Options<GetStatisticalVectorDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatisticalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getStatisticalVectorDataQueryKey(options),
    });
};

export const getDeltaEnsembleStatisticalVectorDataQueryKey = (
    options: Options<GetDeltaEnsembleStatisticalVectorDataData>,
) => [createQueryKey("getDeltaEnsembleStatisticalVectorData", options)];

export const getDeltaEnsembleStatisticalVectorDataOptions = (
    options: Options<GetDeltaEnsembleStatisticalVectorDataData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaEnsembleStatisticalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaEnsembleStatisticalVectorDataQueryKey(options),
    });
};

export const getStatisticalVectorDataPerSensitivityQueryKey = (
    options: Options<GetStatisticalVectorDataPerSensitivityData>,
) => [createQueryKey("getStatisticalVectorDataPerSensitivity", options)];

export const getStatisticalVectorDataPerSensitivityOptions = (
    options: Options<GetStatisticalVectorDataPerSensitivityData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatisticalVectorDataPerSensitivity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getStatisticalVectorDataPerSensitivityQueryKey(options),
    });
};

export const getRealizationVectorAtTimestampQueryKey = (options: Options<GetRealizationVectorAtTimestampData>) => [
    createQueryKey("getRealizationVectorAtTimestamp", options),
];

export const getRealizationVectorAtTimestampOptions = (options: Options<GetRealizationVectorAtTimestampData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationVectorAtTimestamp({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationVectorAtTimestampQueryKey(options),
    });
};

export const getTableDefinitionsQueryKey = (options: Options<GetTableDefinitionsData>) => [
    createQueryKey("getTableDefinitions", options),
];

export const getTableDefinitionsOptions = (options: Options<GetTableDefinitionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableDefinitions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTableDefinitionsQueryKey(options),
    });
};

export const postGetAggregatedPerRealizationTableDataQueryKey = (
    options: Options<PostGetAggregatedPerRealizationTableDataData>,
) => [createQueryKey("postGetAggregatedPerRealizationTableData", options)];

export const postGetAggregatedPerRealizationTableDataOptions = (
    options: Options<PostGetAggregatedPerRealizationTableDataData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetAggregatedPerRealizationTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetAggregatedPerRealizationTableDataQueryKey(options),
    });
};

export const postGetAggregatedPerRealizationTableDataMutation = (
    options?: Partial<Options<PostGetAggregatedPerRealizationTableDataData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostGetAggregatedPerRealizationTableDataResponse,
        AxiosError<PostGetAggregatedPerRealizationTableDataError>,
        Options<PostGetAggregatedPerRealizationTableDataData>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetAggregatedPerRealizationTableData({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postGetAggregatedStatisticalTableDataQueryKey = (
    options: Options<PostGetAggregatedStatisticalTableDataData>,
) => [createQueryKey("postGetAggregatedStatisticalTableData", options)];

export const postGetAggregatedStatisticalTableDataOptions = (
    options: Options<PostGetAggregatedStatisticalTableDataData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetAggregatedStatisticalTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetAggregatedStatisticalTableDataQueryKey(options),
    });
};

export const postGetAggregatedStatisticalTableDataMutation = (
    options?: Partial<Options<PostGetAggregatedStatisticalTableDataData>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostGetAggregatedStatisticalTableDataResponse,
        AxiosError<PostGetAggregatedStatisticalTableDataError>,
        Options<PostGetAggregatedStatisticalTableDataData>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetAggregatedStatisticalTableData({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getRealizationSurfacesMetadataQueryKey = (options: Options<GetRealizationSurfacesMetadataData>) => [
    createQueryKey("getRealizationSurfacesMetadata", options),
];

export const getRealizationSurfacesMetadataOptions = (options: Options<GetRealizationSurfacesMetadataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationSurfacesMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationSurfacesMetadataQueryKey(options),
    });
};

export const getObservedSurfacesMetadataQueryKey = (options: Options<GetObservedSurfacesMetadataData>) => [
    createQueryKey("getObservedSurfacesMetadata", options),
];

export const getObservedSurfacesMetadataOptions = (options: Options<GetObservedSurfacesMetadataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservedSurfacesMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getObservedSurfacesMetadataQueryKey(options),
    });
};

export const getSurfaceDataQueryKey = (options: Options<GetSurfaceDataData>) => [
    createQueryKey("getSurfaceData", options),
];

export const getSurfaceDataOptions = (options: Options<GetSurfaceDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSurfaceDataQueryKey(options),
    });
};

export const postGetSurfaceIntersectionQueryKey = (options: Options<PostGetSurfaceIntersectionData>) => [
    createQueryKey("postGetSurfaceIntersection", options),
];

export const postGetSurfaceIntersectionOptions = (options: Options<PostGetSurfaceIntersectionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSurfaceIntersection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetSurfaceIntersectionQueryKey(options),
    });
};

export const postGetSurfaceIntersectionMutation = (options?: Partial<Options<PostGetSurfaceIntersectionData>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetSurfaceIntersectionResponse,
        AxiosError<PostGetSurfaceIntersectionError>,
        Options<PostGetSurfaceIntersectionData>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSurfaceIntersection({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postGetSampleSurfaceInPointsQueryKey = (options: Options<PostGetSampleSurfaceInPointsData>) => [
    createQueryKey("postGetSampleSurfaceInPoints", options),
];

export const postGetSampleSurfaceInPointsOptions = (options: Options<PostGetSampleSurfaceInPointsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSampleSurfaceInPoints({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetSampleSurfaceInPointsQueryKey(options),
    });
};

export const postGetSampleSurfaceInPointsMutation = (options?: Partial<Options<PostGetSampleSurfaceInPointsData>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetSampleSurfaceInPointsResponse,
        AxiosError<PostGetSampleSurfaceInPointsError>,
        Options<PostGetSampleSurfaceInPointsData>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSampleSurfaceInPoints({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getDeltaSurfaceDataQueryKey = (options: Options<GetDeltaSurfaceDataData>) => [
    createQueryKey("getDeltaSurfaceData", options),
];

export const getDeltaSurfaceDataOptions = (options: Options<GetDeltaSurfaceDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaSurfaceDataQueryKey(options),
    });
};

export const getMisfitSurfaceDataQueryKey = (options: Options<GetMisfitSurfaceDataData>) => [
    createQueryKey("getMisfitSurfaceData", options),
];

export const getMisfitSurfaceDataOptions = (options: Options<GetMisfitSurfaceDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMisfitSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getMisfitSurfaceDataQueryKey(options),
    });
};

export const getWellboreStratigraphicColumnsQueryKey = (options: Options<GetWellboreStratigraphicColumnsData>) => [
    createQueryKey("getWellboreStratigraphicColumns", options),
];

export const getWellboreStratigraphicColumnsOptions = (options: Options<GetWellboreStratigraphicColumnsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreStratigraphicColumns({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreStratigraphicColumnsQueryKey(options),
    });
};

export const getStratigraphicUnitsQueryKey = (options: Options<GetStratigraphicUnitsData>) => [
    createQueryKey("getStratigraphicUnits", options),
];

export const getStratigraphicUnitsOptions = (options: Options<GetStratigraphicUnitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStratigraphicUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getStratigraphicUnitsQueryKey(options),
    });
};

export const getParameterNamesAndDescriptionQueryKey = (options: Options<GetParameterNamesAndDescriptionData>) => [
    createQueryKey("getParameterNamesAndDescription", options),
];

export const getParameterNamesAndDescriptionOptions = (options: Options<GetParameterNamesAndDescriptionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameterNamesAndDescription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getParameterNamesAndDescriptionQueryKey(options),
    });
};

export const getParameterQueryKey = (options: Options<GetParameterData>) => [createQueryKey("getParameter", options)];

export const getParameterOptions = (options: Options<GetParameterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getParameterQueryKey(options),
    });
};

export const getParametersQueryKey = (options: Options<GetParametersData>) => [
    createQueryKey("getParameters", options),
];

export const getParametersOptions = (options: Options<GetParametersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getParametersQueryKey(options),
    });
};

export const getIsSensitivityRunQueryKey = (options: Options<GetIsSensitivityRunData>) => [
    createQueryKey("getIsSensitivityRun", options),
];

export const getIsSensitivityRunOptions = (options: Options<GetIsSensitivityRunData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIsSensitivityRun({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getIsSensitivityRunQueryKey(options),
    });
};

export const getSensitivitiesQueryKey = (options: Options<GetSensitivitiesData>) => [
    createQueryKey("getSensitivities", options),
];

export const getSensitivitiesOptions = (options: Options<GetSensitivitiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSensitivities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSensitivitiesQueryKey(options),
    });
};

export const getGridModelsInfoQueryKey = (options: Options<GetGridModelsInfoData>) => [
    createQueryKey("getGridModelsInfo", options),
];

export const getGridModelsInfoOptions = (options: Options<GetGridModelsInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridModelsInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getGridModelsInfoQueryKey(options),
    });
};

export const getGridSurfaceQueryKey = (options: Options<GetGridSurfaceData>) => [
    createQueryKey("getGridSurface", options),
];

export const getGridSurfaceOptions = (options: Options<GetGridSurfaceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridSurface({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getGridSurfaceQueryKey(options),
    });
};

export const getGridParameterQueryKey = (options: Options<GetGridParameterData>) => [
    createQueryKey("getGridParameter", options),
];

export const getGridParameterOptions = (options: Options<GetGridParameterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridParameter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getGridParameterQueryKey(options),
    });
};

export const postGetPolylineIntersectionQueryKey = (options: Options<PostGetPolylineIntersectionData>) => [
    createQueryKey("postGetPolylineIntersection", options),
];

export const postGetPolylineIntersectionOptions = (options: Options<PostGetPolylineIntersectionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetPolylineIntersection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetPolylineIntersectionQueryKey(options),
    });
};

export const postGetPolylineIntersectionMutation = (options?: Partial<Options<PostGetPolylineIntersectionData>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetPolylineIntersectionResponse,
        AxiosError<PostGetPolylineIntersectionError>,
        Options<PostGetPolylineIntersectionData>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetPolylineIntersection({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getRealizationFlowNetworkQueryKey = (options: Options<GetRealizationFlowNetworkData>) => [
    createQueryKey("getRealizationFlowNetwork", options),
];

export const getRealizationFlowNetworkOptions = (options: Options<GetRealizationFlowNetworkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationFlowNetwork({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationFlowNetworkQueryKey(options),
    });
};

export const getTableDataQueryKey = (options: Options<GetTableDataData>) => [createQueryKey("getTableData", options)];

export const getTableDataOptions = (options: Options<GetTableDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTableDataQueryKey(options),
    });
};

export const getWellCompletionsDataQueryKey = (options: Options<GetWellCompletionsDataData>) => [
    createQueryKey("getWellCompletionsData", options),
];

export const getWellCompletionsDataOptions = (options: Options<GetWellCompletionsDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellCompletionsData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellCompletionsDataQueryKey(options),
    });
};

export const getDrilledWellboreHeadersQueryKey = (options: Options<GetDrilledWellboreHeadersData>) => [
    createQueryKey("getDrilledWellboreHeaders", options),
];

export const getDrilledWellboreHeadersOptions = (options: Options<GetDrilledWellboreHeadersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDrilledWellboreHeaders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDrilledWellboreHeadersQueryKey(options),
    });
};

export const getWellTrajectoriesQueryKey = (options: Options<GetWellTrajectoriesData>) => [
    createQueryKey("getWellTrajectories", options),
];

export const getWellTrajectoriesOptions = (options: Options<GetWellTrajectoriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellTrajectories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellTrajectoriesQueryKey(options),
    });
};

export const getWellborePickIdentifiersQueryKey = (options: Options<GetWellborePickIdentifiersData>) => [
    createQueryKey("getWellborePickIdentifiers", options),
];

export const getWellborePickIdentifiersOptions = (options: Options<GetWellborePickIdentifiersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePickIdentifiers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePickIdentifiersQueryKey(options),
    });
};

export const getWellborePicksForPickIdentifierQueryKey = (options: Options<GetWellborePicksForPickIdentifierData>) => [
    createQueryKey("getWellborePicksForPickIdentifier", options),
];

export const getWellborePicksForPickIdentifierOptions = (options: Options<GetWellborePicksForPickIdentifierData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePicksForPickIdentifier({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePicksForPickIdentifierQueryKey(options),
    });
};

export const getWellborePicksForWellboreQueryKey = (options: Options<GetWellborePicksForWellboreData>) => [
    createQueryKey("getWellborePicksForWellbore", options),
];

export const getWellborePicksForWellboreOptions = (options: Options<GetWellborePicksForWellboreData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePicksForWellbore({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePicksForWellboreQueryKey(options),
    });
};

export const getWellborePicksInStratColumnQueryKey = (options: Options<GetWellborePicksInStratColumnData>) => [
    createQueryKey("getWellborePicksInStratColumn", options),
];

export const getWellborePicksInStratColumnOptions = (options: Options<GetWellborePicksInStratColumnData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePicksInStratColumn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePicksInStratColumnQueryKey(options),
    });
};

export const getWellboreCompletionsQueryKey = (options: Options<GetWellboreCompletionsData>) => [
    createQueryKey("getWellboreCompletions", options),
];

export const getWellboreCompletionsOptions = (options: Options<GetWellboreCompletionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreCompletions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreCompletionsQueryKey(options),
    });
};

export const getWellboreCasingsQueryKey = (options: Options<GetWellboreCasingsData>) => [
    createQueryKey("getWellboreCasings", options),
];

export const getWellboreCasingsOptions = (options: Options<GetWellboreCasingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreCasings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreCasingsQueryKey(options),
    });
};

export const getWellborePerforationsQueryKey = (options: Options<GetWellborePerforationsData>) => [
    createQueryKey("getWellborePerforations", options),
];

export const getWellborePerforationsOptions = (options: Options<GetWellborePerforationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePerforations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePerforationsQueryKey(options),
    });
};

export const getWellboreLogCurveHeadersQueryKey = (options: Options<GetWellboreLogCurveHeadersData>) => [
    createQueryKey("getWellboreLogCurveHeaders", options),
];

export const getWellboreLogCurveHeadersOptions = (options: Options<GetWellboreLogCurveHeadersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreLogCurveHeaders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreLogCurveHeadersQueryKey(options),
    });
};

export const getLogCurveDataQueryKey = (options: Options<GetLogCurveDataData>) => [
    createQueryKey("getLogCurveData", options),
];

export const getLogCurveDataOptions = (options: Options<GetLogCurveDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLogCurveData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getLogCurveDataQueryKey(options),
    });
};

export const getSeismicCubeMetaListQueryKey = (options: Options<GetSeismicCubeMetaListData>) => [
    createQueryKey("getSeismicCubeMetaList", options),
];

export const getSeismicCubeMetaListOptions = (options: Options<GetSeismicCubeMetaListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeismicCubeMetaList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSeismicCubeMetaListQueryKey(options),
    });
};

export const getInlineSliceQueryKey = (options: Options<GetInlineSliceData>) => [
    createQueryKey("getInlineSlice", options),
];

export const getInlineSliceOptions = (options: Options<GetInlineSliceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInlineSlice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getInlineSliceQueryKey(options),
    });
};

export const getCrosslineSliceQueryKey = (options: Options<GetCrosslineSliceData>) => [
    createQueryKey("getCrosslineSlice", options),
];

export const getCrosslineSliceOptions = (options: Options<GetCrosslineSliceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCrosslineSlice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getCrosslineSliceQueryKey(options),
    });
};

export const getDepthSliceQueryKey = (options: Options<GetDepthSliceData>) => [
    createQueryKey("getDepthSlice", options),
];

export const getDepthSliceOptions = (options: Options<GetDepthSliceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDepthSlice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDepthSliceQueryKey(options),
    });
};

export const postGetSeismicFenceQueryKey = (options: Options<PostGetSeismicFenceData>) => [
    createQueryKey("postGetSeismicFence", options),
];

export const postGetSeismicFenceOptions = (options: Options<PostGetSeismicFenceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSeismicFence({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetSeismicFenceQueryKey(options),
    });
};

export const postGetSeismicFenceMutation = (options?: Partial<Options<PostGetSeismicFenceData>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetSeismicFenceResponse,
        AxiosError<PostGetSeismicFenceError>,
        Options<PostGetSeismicFenceData>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSeismicFence({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getPolygonsDirectoryQueryKey = (options: Options<GetPolygonsDirectoryData>) => [
    createQueryKey("getPolygonsDirectory", options),
];

export const getPolygonsDirectoryOptions = (options: Options<GetPolygonsDirectoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPolygonsDirectory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getPolygonsDirectoryQueryKey(options),
    });
};

export const getPolygonsDataQueryKey = (options: Options<GetPolygonsDataData>) => [
    createQueryKey("getPolygonsData", options),
];

export const getPolygonsDataOptions = (options: Options<GetPolygonsDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPolygonsData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getPolygonsDataQueryKey(options),
    });
};

export const getUserPhotoQueryKey = (options: Options<GetUserPhotoData>) => [createQueryKey("getUserPhoto", options)];

export const getUserPhotoOptions = (options: Options<GetUserPhotoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserPhoto({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getUserPhotoQueryKey(options),
    });
};

export const getObservationsQueryKey = (options: Options<GetObservationsData>) => [
    createQueryKey("getObservations", options),
];

export const getObservationsOptions = (options: Options<GetObservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getObservationsQueryKey(options),
    });
};

export const getTableDefinitionQueryKey = (options: Options<GetTableDefinitionData>) => [
    createQueryKey("getTableDefinition", options),
];

export const getTableDefinitionOptions = (options: Options<GetTableDefinitionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableDefinition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTableDefinitionQueryKey(options),
    });
};

export const getRealizationDataQueryKey = (options: Options<GetRealizationDataData>) => [
    createQueryKey("getRealizationData", options),
];

export const getRealizationDataOptions = (options: Options<GetRealizationDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationDataQueryKey(options),
    });
};

export const getVfpTableNamesQueryKey = (options: Options<GetVfpTableNamesData>) => [
    createQueryKey("getVfpTableNames", options),
];

export const getVfpTableNamesOptions = (options: Options<GetVfpTableNamesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVfpTableNames({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getVfpTableNamesQueryKey(options),
    });
};

export const getVfpTableQueryKey = (options: Options<GetVfpTableData>) => [createQueryKey("getVfpTable", options)];

export const getVfpTableOptions = (options: Options<GetVfpTableData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVfpTable({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getVfpTableQueryKey(options),
    });
};

export const loginRouteQueryKey = (options?: Options<LoginRouteData>) => [createQueryKey("loginRoute", options)];

export const loginRouteOptions = (options?: Options<LoginRouteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: loginRouteQueryKey(options),
    });
};

export const authorizedCallbackRouteQueryKey = (options?: Options<AuthorizedCallbackRouteData>) => [
    createQueryKey("authorizedCallbackRoute", options),
];

export const authorizedCallbackRouteOptions = (options?: Options<AuthorizedCallbackRouteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authorizedCallbackRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: authorizedCallbackRouteQueryKey(options),
    });
};

export const getAliveQueryKey = (options?: Options<GetAliveData>) => [createQueryKey("getAlive", options)];

export const getAliveOptions = (options?: Options<GetAliveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAlive({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getAliveQueryKey(options),
    });
};

export const getAliveProtectedQueryKey = (options?: Options<GetAliveProtectedData>) => [
    createQueryKey("getAliveProtected", options),
];

export const getAliveProtectedOptions = (options?: Options<GetAliveProtectedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAliveProtected({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getAliveProtectedQueryKey(options),
    });
};

export const postLogoutQueryKey = (options?: Options<PostLogoutData>) => [createQueryKey("postLogout", options)];

export const postLogoutOptions = (options?: Options<PostLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postLogoutQueryKey(options),
    });
};

export const postLogoutMutation = (options?: Partial<Options<PostLogoutData>>) => {
    const mutationOptions: UseMutationOptions<PostLogoutResponse, AxiosError<DefaultError>, Options<PostLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postLogout({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getLoggedInUserQueryKey = (options?: Options<GetLoggedInUserData>) => [
    createQueryKey("getLoggedInUser", options),
];

export const getLoggedInUserOptions = (options?: Options<GetLoggedInUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLoggedInUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getLoggedInUserQueryKey(options),
    });
};

export const rootQueryKey = (options?: Options<RootData>) => [createQueryKey("root", options)];

export const rootOptions = (options?: Options<RootData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await root({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: rootQueryKey(options),
    });
};
