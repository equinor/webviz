// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-axios";
import {
    queryOptions,
    type UseMutationOptions,
    infiniteQueryOptions,
    type InfiniteData,
    type DefaultError,
} from "@tanstack/react-query";
import type { AxiosError } from "axios";

import {
    getFields,
    getCases,
    getEnsembles,
    getEnsembleDetails,
    getVectorList,
    getDeltaEnsembleVectorList,
    getRealizationsVectorData,
    getDeltaEnsembleRealizationsVectorData,
    getTimestampsList,
    getHistoricalVectorData,
    getStatisticalVectorData,
    getDeltaEnsembleStatisticalVectorData,
    getStatisticalVectorDataPerSensitivity,
    getRealizationVectorAtTimestamp,
    getTableDefinitions,
    postGetAggregatedPerRealizationTableData,
    postGetAggregatedStatisticalTableData,
    getRealizationSurfacesMetadata,
    getObservedSurfacesMetadata,
    getSurfaceData,
    postGetSurfaceIntersection,
    postGetSampleSurfaceInPoints,
    getDeltaSurfaceData,
    getMisfitSurfaceData,
    deprecatedGetStratigraphicUnits,
    getParameterNamesAndDescription,
    getParameter,
    getParameters,
    getIsSensitivityRun,
    getSensitivities,
    getGridModelsInfo,
    getGridSurface,
    getGridParameter,
    postGetPolylineIntersection,
    getRealizationFlowNetwork,
    getTableData,
    getWellCompletionsData,
    getDrilledWellboreHeaders,
    getWellTrajectories,
    getWellborePickIdentifiers,
    getWellborePicksForPickIdentifier,
    deprecatedGetWellborePicksForWellbore,
    getWellborePicksInStratColumn,
    getWellboreStratigraphicColumns,
    getWellboreCompletions,
    getWellboreCasings,
    getWellborePerforations,
    getWellboreLogCurveHeaders,
    getLogCurveData,
    getSeismicCubeMetaList,
    getInlineSlice,
    getCrosslineSlice,
    getDepthSlice,
    postGetSeismicFence,
    getPolygonsDirectory,
    getPolygonsData,
    getUserPhoto,
    getObservations,
    getTableDefinition,
    getRealizationData,
    getVfpTableNames,
    getVfpTable,
    getSessionsMetadata,
    createSession,
    deleteSession,
    getSession,
    updateSession,
    getSessionMetadata,
    getRecentSnapshots,
    getSnapshotsMetadata,
    createSnapshot,
    deleteSnapshot,
    getSnapshot,
    updateSnapshot,
    getSnapshotMetadata,
    snapshotPreview,
    loginRoute,
    authorizedCallbackRoute,
    getAlive,
    getAliveProtected,
    postLogout,
    getLoggedInUser,
    root,
    client,
} from "../sdk.gen";
import type {
    GetFieldsData_api,
    GetCasesData_api,
    GetEnsemblesData_api,
    GetEnsembleDetailsData_api,
    GetVectorListData_api,
    GetDeltaEnsembleVectorListData_api,
    GetRealizationsVectorDataData_api,
    GetDeltaEnsembleRealizationsVectorDataData_api,
    GetTimestampsListData_api,
    GetHistoricalVectorDataData_api,
    GetStatisticalVectorDataData_api,
    GetDeltaEnsembleStatisticalVectorDataData_api,
    GetStatisticalVectorDataPerSensitivityData_api,
    GetRealizationVectorAtTimestampData_api,
    GetTableDefinitionsData_api,
    PostGetAggregatedPerRealizationTableDataData_api,
    PostGetAggregatedPerRealizationTableDataError_api,
    PostGetAggregatedPerRealizationTableDataResponse_api,
    PostGetAggregatedStatisticalTableDataData_api,
    PostGetAggregatedStatisticalTableDataError_api,
    PostGetAggregatedStatisticalTableDataResponse_api,
    GetRealizationSurfacesMetadataData_api,
    GetObservedSurfacesMetadataData_api,
    GetSurfaceDataData_api,
    PostGetSurfaceIntersectionData_api,
    PostGetSurfaceIntersectionError_api,
    PostGetSurfaceIntersectionResponse_api,
    PostGetSampleSurfaceInPointsData_api,
    PostGetSampleSurfaceInPointsError_api,
    PostGetSampleSurfaceInPointsResponse_api,
    GetDeltaSurfaceDataData_api,
    GetMisfitSurfaceDataData_api,
    DeprecatedGetStratigraphicUnitsData_api,
    GetParameterNamesAndDescriptionData_api,
    GetParameterData_api,
    GetParametersData_api,
    GetIsSensitivityRunData_api,
    GetSensitivitiesData_api,
    GetGridModelsInfoData_api,
    GetGridSurfaceData_api,
    GetGridParameterData_api,
    PostGetPolylineIntersectionData_api,
    PostGetPolylineIntersectionError_api,
    PostGetPolylineIntersectionResponse_api,
    GetRealizationFlowNetworkData_api,
    GetTableDataData_api,
    GetWellCompletionsDataData_api,
    GetDrilledWellboreHeadersData_api,
    GetWellTrajectoriesData_api,
    GetWellborePickIdentifiersData_api,
    GetWellborePicksForPickIdentifierData_api,
    DeprecatedGetWellborePicksForWellboreData_api,
    GetWellborePicksInStratColumnData_api,
    GetWellboreStratigraphicColumnsData_api,
    GetWellboreCompletionsData_api,
    GetWellboreCasingsData_api,
    GetWellborePerforationsData_api,
    GetWellboreLogCurveHeadersData_api,
    GetLogCurveDataData_api,
    GetSeismicCubeMetaListData_api,
    GetInlineSliceData_api,
    GetCrosslineSliceData_api,
    GetDepthSliceData_api,
    PostGetSeismicFenceData_api,
    PostGetSeismicFenceError_api,
    PostGetSeismicFenceResponse_api,
    GetPolygonsDirectoryData_api,
    GetPolygonsDataData_api,
    GetUserPhotoData_api,
    GetObservationsData_api,
    GetTableDefinitionData_api,
    GetRealizationDataData_api,
    GetVfpTableNamesData_api,
    GetVfpTableData_api,
    GetSessionsMetadataData_api,
    CreateSessionData_api,
    CreateSessionError_api,
    CreateSessionResponse_api,
    DeleteSessionData_api,
    DeleteSessionError_api,
    GetSessionData_api,
    UpdateSessionData_api,
    UpdateSessionError_api,
    GetSessionMetadataData_api,
    GetRecentSnapshotsData_api,
    GetRecentSnapshotsError_api,
    GetRecentSnapshotsResponse_api,
    GetSnapshotsMetadataData_api,
    CreateSnapshotData_api,
    CreateSnapshotError_api,
    CreateSnapshotResponse_api,
    DeleteSnapshotData_api,
    DeleteSnapshotError_api,
    GetSnapshotData_api,
    UpdateSnapshotData_api,
    UpdateSnapshotError_api,
    GetSnapshotMetadataData_api,
    SnapshotPreviewData_api,
    LoginRouteData_api,
    AuthorizedCallbackRouteData_api,
    GetAliveData_api,
    GetAliveProtectedData_api,
    PostLogoutData_api,
    PostLogoutResponse_api,
    GetLoggedInUserData_api,
    RootData_api,
} from "../types.gen";

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
        _id: string;
        _infinite?: boolean;
    },
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean,
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseURL: (options?.client ?? client).getConfig().baseURL,
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getFieldsQueryKey = (options?: Options<GetFieldsData_api>) => [createQueryKey("getFields", options)];

export const getFieldsOptions = (options?: Options<GetFieldsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getFieldsQueryKey(options),
    });
};

export const getCasesQueryKey = (options: Options<GetCasesData_api>) => [createQueryKey("getCases", options)];

export const getCasesOptions = (options: Options<GetCasesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCases({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getCasesQueryKey(options),
    });
};

export const getEnsemblesQueryKey = (options: Options<GetEnsemblesData_api>) => [createQueryKey("getEnsembles", options)];

export const getEnsemblesOptions = (options: Options<GetEnsemblesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnsembles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getEnsemblesQueryKey(options),
    });
};

export const getEnsembleDetailsQueryKey = (options: Options<GetEnsembleDetailsData_api>) => [
    createQueryKey("getEnsembleDetails", options),
];

export const getEnsembleDetailsOptions = (options: Options<GetEnsembleDetailsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnsembleDetails({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getEnsembleDetailsQueryKey(options),
    });
};

export const getVectorListQueryKey = (options: Options<GetVectorListData_api>) => [
    createQueryKey("getVectorList", options),
];

export const getVectorListOptions = (options: Options<GetVectorListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVectorList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getVectorListQueryKey(options),
    });
};

export const getDeltaEnsembleVectorListQueryKey = (options: Options<GetDeltaEnsembleVectorListData_api>) => [
    createQueryKey("getDeltaEnsembleVectorList", options),
];

export const getDeltaEnsembleVectorListOptions = (options: Options<GetDeltaEnsembleVectorListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaEnsembleVectorList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaEnsembleVectorListQueryKey(options),
    });
};

export const getRealizationsVectorDataQueryKey = (options: Options<GetRealizationsVectorDataData_api>) => [
    createQueryKey("getRealizationsVectorData", options),
];

export const getRealizationsVectorDataOptions = (options: Options<GetRealizationsVectorDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationsVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationsVectorDataQueryKey(options),
    });
};

export const getDeltaEnsembleRealizationsVectorDataQueryKey = (
    options: Options<GetDeltaEnsembleRealizationsVectorDataData_api>,
) => [createQueryKey("getDeltaEnsembleRealizationsVectorData", options)];

export const getDeltaEnsembleRealizationsVectorDataOptions = (
    options: Options<GetDeltaEnsembleRealizationsVectorDataData_api>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaEnsembleRealizationsVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaEnsembleRealizationsVectorDataQueryKey(options),
    });
};

export const getTimestampsListQueryKey = (options: Options<GetTimestampsListData_api>) => [
    createQueryKey("getTimestampsList", options),
];

export const getTimestampsListOptions = (options: Options<GetTimestampsListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTimestampsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTimestampsListQueryKey(options),
    });
};

export const getHistoricalVectorDataQueryKey = (options: Options<GetHistoricalVectorDataData_api>) => [
    createQueryKey("getHistoricalVectorData", options),
];

export const getHistoricalVectorDataOptions = (options: Options<GetHistoricalVectorDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHistoricalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getHistoricalVectorDataQueryKey(options),
    });
};

export const getStatisticalVectorDataQueryKey = (options: Options<GetStatisticalVectorDataData_api>) => [
    createQueryKey("getStatisticalVectorData", options),
];

export const getStatisticalVectorDataOptions = (options: Options<GetStatisticalVectorDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatisticalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getStatisticalVectorDataQueryKey(options),
    });
};

export const getDeltaEnsembleStatisticalVectorDataQueryKey = (
    options: Options<GetDeltaEnsembleStatisticalVectorDataData_api>,
) => [createQueryKey("getDeltaEnsembleStatisticalVectorData", options)];

export const getDeltaEnsembleStatisticalVectorDataOptions = (
    options: Options<GetDeltaEnsembleStatisticalVectorDataData_api>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaEnsembleStatisticalVectorData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaEnsembleStatisticalVectorDataQueryKey(options),
    });
};

export const getStatisticalVectorDataPerSensitivityQueryKey = (
    options: Options<GetStatisticalVectorDataPerSensitivityData_api>,
) => [createQueryKey("getStatisticalVectorDataPerSensitivity", options)];

export const getStatisticalVectorDataPerSensitivityOptions = (
    options: Options<GetStatisticalVectorDataPerSensitivityData_api>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatisticalVectorDataPerSensitivity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getStatisticalVectorDataPerSensitivityQueryKey(options),
    });
};

export const getRealizationVectorAtTimestampQueryKey = (options: Options<GetRealizationVectorAtTimestampData_api>) => [
    createQueryKey("getRealizationVectorAtTimestamp", options),
];

export const getRealizationVectorAtTimestampOptions = (options: Options<GetRealizationVectorAtTimestampData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationVectorAtTimestamp({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationVectorAtTimestampQueryKey(options),
    });
};

export const getTableDefinitionsQueryKey = (options: Options<GetTableDefinitionsData_api>) => [
    createQueryKey("getTableDefinitions", options),
];

export const getTableDefinitionsOptions = (options: Options<GetTableDefinitionsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableDefinitions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTableDefinitionsQueryKey(options),
    });
};

export const postGetAggregatedPerRealizationTableDataQueryKey = (
    options: Options<PostGetAggregatedPerRealizationTableDataData_api>,
) => [createQueryKey("postGetAggregatedPerRealizationTableData", options)];

export const postGetAggregatedPerRealizationTableDataOptions = (
    options: Options<PostGetAggregatedPerRealizationTableDataData_api>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetAggregatedPerRealizationTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetAggregatedPerRealizationTableDataQueryKey(options),
    });
};

export const postGetAggregatedPerRealizationTableDataMutation = (
    options?: Partial<Options<PostGetAggregatedPerRealizationTableDataData_api>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostGetAggregatedPerRealizationTableDataResponse_api,
        AxiosError<PostGetAggregatedPerRealizationTableDataError_api>,
        Options<PostGetAggregatedPerRealizationTableDataData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetAggregatedPerRealizationTableData({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postGetAggregatedStatisticalTableDataQueryKey = (
    options: Options<PostGetAggregatedStatisticalTableDataData_api>,
) => [createQueryKey("postGetAggregatedStatisticalTableData", options)];

export const postGetAggregatedStatisticalTableDataOptions = (
    options: Options<PostGetAggregatedStatisticalTableDataData_api>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetAggregatedStatisticalTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetAggregatedStatisticalTableDataQueryKey(options),
    });
};

export const postGetAggregatedStatisticalTableDataMutation = (
    options?: Partial<Options<PostGetAggregatedStatisticalTableDataData_api>>,
) => {
    const mutationOptions: UseMutationOptions<
        PostGetAggregatedStatisticalTableDataResponse_api,
        AxiosError<PostGetAggregatedStatisticalTableDataError_api>,
        Options<PostGetAggregatedStatisticalTableDataData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetAggregatedStatisticalTableData({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getRealizationSurfacesMetadataQueryKey = (options: Options<GetRealizationSurfacesMetadataData_api>) => [
    createQueryKey("getRealizationSurfacesMetadata", options),
];

export const getRealizationSurfacesMetadataOptions = (options: Options<GetRealizationSurfacesMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationSurfacesMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationSurfacesMetadataQueryKey(options),
    });
};

export const getObservedSurfacesMetadataQueryKey = (options: Options<GetObservedSurfacesMetadataData_api>) => [
    createQueryKey("getObservedSurfacesMetadata", options),
];

export const getObservedSurfacesMetadataOptions = (options: Options<GetObservedSurfacesMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservedSurfacesMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getObservedSurfacesMetadataQueryKey(options),
    });
};

export const getSurfaceDataQueryKey = (options: Options<GetSurfaceDataData_api>) => [
    createQueryKey("getSurfaceData", options),
];

export const getSurfaceDataOptions = (options: Options<GetSurfaceDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSurfaceDataQueryKey(options),
    });
};

export const postGetSurfaceIntersectionQueryKey = (options: Options<PostGetSurfaceIntersectionData_api>) => [
    createQueryKey("postGetSurfaceIntersection", options),
];

export const postGetSurfaceIntersectionOptions = (options: Options<PostGetSurfaceIntersectionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSurfaceIntersection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetSurfaceIntersectionQueryKey(options),
    });
};

export const postGetSurfaceIntersectionMutation = (options?: Partial<Options<PostGetSurfaceIntersectionData_api>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetSurfaceIntersectionResponse_api,
        AxiosError<PostGetSurfaceIntersectionError_api>,
        Options<PostGetSurfaceIntersectionData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSurfaceIntersection({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const postGetSampleSurfaceInPointsQueryKey = (options: Options<PostGetSampleSurfaceInPointsData_api>) => [
    createQueryKey("postGetSampleSurfaceInPoints", options),
];

export const postGetSampleSurfaceInPointsOptions = (options: Options<PostGetSampleSurfaceInPointsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSampleSurfaceInPoints({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetSampleSurfaceInPointsQueryKey(options),
    });
};

export const postGetSampleSurfaceInPointsMutation = (options?: Partial<Options<PostGetSampleSurfaceInPointsData_api>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetSampleSurfaceInPointsResponse_api,
        AxiosError<PostGetSampleSurfaceInPointsError_api>,
        Options<PostGetSampleSurfaceInPointsData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSampleSurfaceInPoints({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getDeltaSurfaceDataQueryKey = (options: Options<GetDeltaSurfaceDataData_api>) => [
    createQueryKey("getDeltaSurfaceData", options),
];

export const getDeltaSurfaceDataOptions = (options: Options<GetDeltaSurfaceDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDeltaSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDeltaSurfaceDataQueryKey(options),
    });
};

export const getMisfitSurfaceDataQueryKey = (options: Options<GetMisfitSurfaceDataData_api>) => [
    createQueryKey("getMisfitSurfaceData", options),
];

export const getMisfitSurfaceDataOptions = (options: Options<GetMisfitSurfaceDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMisfitSurfaceData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getMisfitSurfaceDataQueryKey(options),
    });
};

export const deprecatedGetStratigraphicUnitsQueryKey = (options: Options<DeprecatedGetStratigraphicUnitsData_api>) => [
    createQueryKey("deprecatedGetStratigraphicUnits", options),
];

export const deprecatedGetStratigraphicUnitsOptions = (options: Options<DeprecatedGetStratigraphicUnitsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await deprecatedGetStratigraphicUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: deprecatedGetStratigraphicUnitsQueryKey(options),
    });
};

export const getParameterNamesAndDescriptionQueryKey = (options: Options<GetParameterNamesAndDescriptionData_api>) => [
    createQueryKey("getParameterNamesAndDescription", options),
];

export const getParameterNamesAndDescriptionOptions = (options: Options<GetParameterNamesAndDescriptionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameterNamesAndDescription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getParameterNamesAndDescriptionQueryKey(options),
    });
};

export const getParameterQueryKey = (options: Options<GetParameterData_api>) => [createQueryKey("getParameter", options)];

export const getParameterOptions = (options: Options<GetParameterData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getParameterQueryKey(options),
    });
};

export const getParametersQueryKey = (options: Options<GetParametersData_api>) => [
    createQueryKey("getParameters", options),
];

export const getParametersOptions = (options: Options<GetParametersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParameters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getParametersQueryKey(options),
    });
};

export const getIsSensitivityRunQueryKey = (options: Options<GetIsSensitivityRunData_api>) => [
    createQueryKey("getIsSensitivityRun", options),
];

export const getIsSensitivityRunOptions = (options: Options<GetIsSensitivityRunData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIsSensitivityRun({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getIsSensitivityRunQueryKey(options),
    });
};

export const getSensitivitiesQueryKey = (options: Options<GetSensitivitiesData_api>) => [
    createQueryKey("getSensitivities", options),
];

export const getSensitivitiesOptions = (options: Options<GetSensitivitiesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSensitivities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSensitivitiesQueryKey(options),
    });
};

export const getGridModelsInfoQueryKey = (options: Options<GetGridModelsInfoData_api>) => [
    createQueryKey("getGridModelsInfo", options),
];

export const getGridModelsInfoOptions = (options: Options<GetGridModelsInfoData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridModelsInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getGridModelsInfoQueryKey(options),
    });
};

export const getGridSurfaceQueryKey = (options: Options<GetGridSurfaceData_api>) => [
    createQueryKey("getGridSurface", options),
];

export const getGridSurfaceOptions = (options: Options<GetGridSurfaceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridSurface({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getGridSurfaceQueryKey(options),
    });
};

export const getGridParameterQueryKey = (options: Options<GetGridParameterData_api>) => [
    createQueryKey("getGridParameter", options),
];

export const getGridParameterOptions = (options: Options<GetGridParameterData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGridParameter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getGridParameterQueryKey(options),
    });
};

export const postGetPolylineIntersectionQueryKey = (options: Options<PostGetPolylineIntersectionData_api>) => [
    createQueryKey("postGetPolylineIntersection", options),
];

export const postGetPolylineIntersectionOptions = (options: Options<PostGetPolylineIntersectionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetPolylineIntersection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetPolylineIntersectionQueryKey(options),
    });
};

export const postGetPolylineIntersectionMutation = (options?: Partial<Options<PostGetPolylineIntersectionData_api>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetPolylineIntersectionResponse_api,
        AxiosError<PostGetPolylineIntersectionError_api>,
        Options<PostGetPolylineIntersectionData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetPolylineIntersection({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getRealizationFlowNetworkQueryKey = (options: Options<GetRealizationFlowNetworkData_api>) => [
    createQueryKey("getRealizationFlowNetwork", options),
];

export const getRealizationFlowNetworkOptions = (options: Options<GetRealizationFlowNetworkData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationFlowNetwork({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationFlowNetworkQueryKey(options),
    });
};

export const getTableDataQueryKey = (options: Options<GetTableDataData_api>) => [createQueryKey("getTableData", options)];

export const getTableDataOptions = (options: Options<GetTableDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTableDataQueryKey(options),
    });
};

export const getWellCompletionsDataQueryKey = (options: Options<GetWellCompletionsDataData_api>) => [
    createQueryKey("getWellCompletionsData", options),
];

export const getWellCompletionsDataOptions = (options: Options<GetWellCompletionsDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellCompletionsData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellCompletionsDataQueryKey(options),
    });
};

export const getDrilledWellboreHeadersQueryKey = (options: Options<GetDrilledWellboreHeadersData_api>) => [
    createQueryKey("getDrilledWellboreHeaders", options),
];

export const getDrilledWellboreHeadersOptions = (options: Options<GetDrilledWellboreHeadersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDrilledWellboreHeaders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDrilledWellboreHeadersQueryKey(options),
    });
};

export const getWellTrajectoriesQueryKey = (options: Options<GetWellTrajectoriesData_api>) => [
    createQueryKey("getWellTrajectories", options),
];

export const getWellTrajectoriesOptions = (options: Options<GetWellTrajectoriesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellTrajectories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellTrajectoriesQueryKey(options),
    });
};

export const getWellborePickIdentifiersQueryKey = (options: Options<GetWellborePickIdentifiersData_api>) => [
    createQueryKey("getWellborePickIdentifiers", options),
];

export const getWellborePickIdentifiersOptions = (options: Options<GetWellborePickIdentifiersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePickIdentifiers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePickIdentifiersQueryKey(options),
    });
};

export const getWellborePicksForPickIdentifierQueryKey = (options: Options<GetWellborePicksForPickIdentifierData_api>) => [
    createQueryKey("getWellborePicksForPickIdentifier", options),
];

export const getWellborePicksForPickIdentifierOptions = (options: Options<GetWellborePicksForPickIdentifierData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePicksForPickIdentifier({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePicksForPickIdentifierQueryKey(options),
    });
};

export const deprecatedGetWellborePicksForWellboreQueryKey = (
    options: Options<DeprecatedGetWellborePicksForWellboreData_api>,
) => [createQueryKey("deprecatedGetWellborePicksForWellbore", options)];

export const deprecatedGetWellborePicksForWellboreOptions = (
    options: Options<DeprecatedGetWellborePicksForWellboreData_api>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await deprecatedGetWellborePicksForWellbore({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: deprecatedGetWellborePicksForWellboreQueryKey(options),
    });
};

export const getWellborePicksInStratColumnQueryKey = (options: Options<GetWellborePicksInStratColumnData_api>) => [
    createQueryKey("getWellborePicksInStratColumn", options),
];

export const getWellborePicksInStratColumnOptions = (options: Options<GetWellborePicksInStratColumnData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePicksInStratColumn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePicksInStratColumnQueryKey(options),
    });
};

export const getWellboreStratigraphicColumnsQueryKey = (options: Options<GetWellboreStratigraphicColumnsData_api>) => [
    createQueryKey("getWellboreStratigraphicColumns", options),
];

export const getWellboreStratigraphicColumnsOptions = (options: Options<GetWellboreStratigraphicColumnsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreStratigraphicColumns({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreStratigraphicColumnsQueryKey(options),
    });
};

export const getWellboreCompletionsQueryKey = (options: Options<GetWellboreCompletionsData_api>) => [
    createQueryKey("getWellboreCompletions", options),
];

export const getWellboreCompletionsOptions = (options: Options<GetWellboreCompletionsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreCompletions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreCompletionsQueryKey(options),
    });
};

export const getWellboreCasingsQueryKey = (options: Options<GetWellboreCasingsData_api>) => [
    createQueryKey("getWellboreCasings", options),
];

export const getWellboreCasingsOptions = (options: Options<GetWellboreCasingsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreCasings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreCasingsQueryKey(options),
    });
};

export const getWellborePerforationsQueryKey = (options: Options<GetWellborePerforationsData_api>) => [
    createQueryKey("getWellborePerforations", options),
];

export const getWellborePerforationsOptions = (options: Options<GetWellborePerforationsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellborePerforations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellborePerforationsQueryKey(options),
    });
};

export const getWellboreLogCurveHeadersQueryKey = (options: Options<GetWellboreLogCurveHeadersData_api>) => [
    createQueryKey("getWellboreLogCurveHeaders", options),
];

export const getWellboreLogCurveHeadersOptions = (options: Options<GetWellboreLogCurveHeadersData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWellboreLogCurveHeaders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getWellboreLogCurveHeadersQueryKey(options),
    });
};

export const getLogCurveDataQueryKey = (options: Options<GetLogCurveDataData_api>) => [
    createQueryKey("getLogCurveData", options),
];

export const getLogCurveDataOptions = (options: Options<GetLogCurveDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLogCurveData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getLogCurveDataQueryKey(options),
    });
};

export const getSeismicCubeMetaListQueryKey = (options: Options<GetSeismicCubeMetaListData_api>) => [
    createQueryKey("getSeismicCubeMetaList", options),
];

export const getSeismicCubeMetaListOptions = (options: Options<GetSeismicCubeMetaListData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeismicCubeMetaList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSeismicCubeMetaListQueryKey(options),
    });
};

export const getInlineSliceQueryKey = (options: Options<GetInlineSliceData_api>) => [
    createQueryKey("getInlineSlice", options),
];

export const getInlineSliceOptions = (options: Options<GetInlineSliceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInlineSlice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getInlineSliceQueryKey(options),
    });
};

export const getCrosslineSliceQueryKey = (options: Options<GetCrosslineSliceData_api>) => [
    createQueryKey("getCrosslineSlice", options),
];

export const getCrosslineSliceOptions = (options: Options<GetCrosslineSliceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCrosslineSlice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getCrosslineSliceQueryKey(options),
    });
};

export const getDepthSliceQueryKey = (options: Options<GetDepthSliceData_api>) => [
    createQueryKey("getDepthSlice", options),
];

export const getDepthSliceOptions = (options: Options<GetDepthSliceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDepthSlice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getDepthSliceQueryKey(options),
    });
};

export const postGetSeismicFenceQueryKey = (options: Options<PostGetSeismicFenceData_api>) => [
    createQueryKey("postGetSeismicFence", options),
];

export const postGetSeismicFenceOptions = (options: Options<PostGetSeismicFenceData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postGetSeismicFence({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postGetSeismicFenceQueryKey(options),
    });
};

export const postGetSeismicFenceMutation = (options?: Partial<Options<PostGetSeismicFenceData_api>>) => {
    const mutationOptions: UseMutationOptions<
        PostGetSeismicFenceResponse_api,
        AxiosError<PostGetSeismicFenceError_api>,
        Options<PostGetSeismicFenceData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await postGetSeismicFence({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getPolygonsDirectoryQueryKey = (options: Options<GetPolygonsDirectoryData_api>) => [
    createQueryKey("getPolygonsDirectory", options),
];

export const getPolygonsDirectoryOptions = (options: Options<GetPolygonsDirectoryData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPolygonsDirectory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getPolygonsDirectoryQueryKey(options),
    });
};

export const getPolygonsDataQueryKey = (options: Options<GetPolygonsDataData_api>) => [
    createQueryKey("getPolygonsData", options),
];

export const getPolygonsDataOptions = (options: Options<GetPolygonsDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPolygonsData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getPolygonsDataQueryKey(options),
    });
};

export const getUserPhotoQueryKey = (options: Options<GetUserPhotoData_api>) => [createQueryKey("getUserPhoto", options)];

export const getUserPhotoOptions = (options: Options<GetUserPhotoData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserPhoto({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getUserPhotoQueryKey(options),
    });
};

export const getObservationsQueryKey = (options: Options<GetObservationsData_api>) => [
    createQueryKey("getObservations", options),
];

export const getObservationsOptions = (options: Options<GetObservationsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getObservationsQueryKey(options),
    });
};

export const getTableDefinitionQueryKey = (options: Options<GetTableDefinitionData_api>) => [
    createQueryKey("getTableDefinition", options),
];

export const getTableDefinitionOptions = (options: Options<GetTableDefinitionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTableDefinition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getTableDefinitionQueryKey(options),
    });
};

export const getRealizationDataQueryKey = (options: Options<GetRealizationDataData_api>) => [
    createQueryKey("getRealizationData", options),
];

export const getRealizationDataOptions = (options: Options<GetRealizationDataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRealizationData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRealizationDataQueryKey(options),
    });
};

export const getVfpTableNamesQueryKey = (options: Options<GetVfpTableNamesData_api>) => [
    createQueryKey("getVfpTableNames", options),
];

export const getVfpTableNamesOptions = (options: Options<GetVfpTableNamesData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVfpTableNames({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getVfpTableNamesQueryKey(options),
    });
};

export const getVfpTableQueryKey = (options: Options<GetVfpTableData_api>) => [createQueryKey("getVfpTable", options)];

export const getVfpTableOptions = (options: Options<GetVfpTableData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVfpTable({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getVfpTableQueryKey(options),
    });
};

export const getSessionsMetadataQueryKey = (options?: Options<GetSessionsMetadataData_api>) => [
    createQueryKey("getSessionsMetadata", options),
];

export const getSessionsMetadataOptions = (options?: Options<GetSessionsMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSessionsMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSessionsMetadataQueryKey(options),
    });
};

export const createSessionQueryKey = (options: Options<CreateSessionData_api>) => [
    createQueryKey("createSession", options),
];

export const createSessionOptions = (options: Options<CreateSessionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: createSessionQueryKey(options),
    });
};

export const createSessionMutation = (options?: Partial<Options<CreateSessionData_api>>) => {
    const mutationOptions: UseMutationOptions<
        CreateSessionResponse_api,
        AxiosError<CreateSessionError_api>,
        Options<CreateSessionData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await createSession({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const deleteSessionMutation = (options?: Partial<Options<DeleteSessionData_api>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteSessionError_api>, Options<DeleteSessionData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSession({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getSessionQueryKey = (options: Options<GetSessionData_api>) => [createQueryKey("getSession", options)];

export const getSessionOptions = (options: Options<GetSessionData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSessionQueryKey(options),
    });
};

export const updateSessionMutation = (options?: Partial<Options<UpdateSessionData_api>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateSessionError_api>, Options<UpdateSessionData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSession({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getSessionMetadataQueryKey = (options: Options<GetSessionMetadataData_api>) => [
    createQueryKey("getSessionMetadata", options),
];

export const getSessionMetadataOptions = (options: Options<GetSessionMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSessionMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSessionMetadataQueryKey(options),
    });
};

export const getRecentSnapshotsQueryKey = (options?: Options<GetRecentSnapshotsData_api>) => [
    createQueryKey("getRecentSnapshots", options),
];

export const getRecentSnapshotsOptions = (options?: Options<GetRecentSnapshotsData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRecentSnapshots({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getRecentSnapshotsQueryKey(options),
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">>(
    queryKey: QueryKey<Options>,
    page: K,
) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...(queryKey[0].body as any),
            ...(page.body as any),
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers,
        };
    }
    if (page.path) {
        params.path = {
            ...(queryKey[0].path as any),
            ...(page.path as any),
        };
    }
    if (page.query) {
        params.query = {
            ...(queryKey[0].query as any),
            ...(page.query as any),
        };
    }
    return params as unknown as typeof page;
};

export const getRecentSnapshotsInfiniteQueryKey = (
    options?: Options<GetRecentSnapshotsData_api>,
): QueryKey<Options<GetRecentSnapshotsData_api>> => [createQueryKey("getRecentSnapshots", options, true)];

export const getRecentSnapshotsInfiniteOptions = (options?: Options<GetRecentSnapshotsData_api>) => {
    return infiniteQueryOptions<
        GetRecentSnapshotsResponse_api,
        AxiosError<GetRecentSnapshotsError_api>,
        InfiniteData<GetRecentSnapshotsResponse_api>,
        QueryKey<Options<GetRecentSnapshotsData_api>>,
        number | null | Pick<QueryKey<Options<GetRecentSnapshotsData_api>>[0], "body" | "headers" | "path" | "query">
    >(
        // @ts-ignore
        {
            queryFn: async ({ pageParam, queryKey, signal }) => {
                // @ts-ignore
                const page: Pick<QueryKey<Options<GetRecentSnapshotsData_api>>[0], "body" | "headers" | "path" | "query"> =
                    typeof pageParam === "object"
                        ? pageParam
                        : {
                              query: {
                                  offset: pageParam,
                              },
                          };
                const params = createInfiniteParams(queryKey, page);
                const { data } = await getRecentSnapshots({
                    ...options,
                    ...params,
                    signal,
                    throwOnError: true,
                });
                return data;
            },
            queryKey: getRecentSnapshotsInfiniteQueryKey(options),
        },
    );
};

export const getSnapshotsMetadataQueryKey = (options?: Options<GetSnapshotsMetadataData_api>) => [
    createQueryKey("getSnapshotsMetadata", options),
];

export const getSnapshotsMetadataOptions = (options?: Options<GetSnapshotsMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSnapshotsMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSnapshotsMetadataQueryKey(options),
    });
};

export const createSnapshotQueryKey = (options: Options<CreateSnapshotData_api>) => [
    createQueryKey("createSnapshot", options),
];

export const createSnapshotOptions = (options: Options<CreateSnapshotData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSnapshot({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: createSnapshotQueryKey(options),
    });
};

export const createSnapshotMutation = (options?: Partial<Options<CreateSnapshotData_api>>) => {
    const mutationOptions: UseMutationOptions<
        CreateSnapshotResponse_api,
        AxiosError<CreateSnapshotError_api>,
        Options<CreateSnapshotData_api>
    > = {
        mutationFn: async (localOptions) => {
            const { data } = await createSnapshot({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const deleteSnapshotMutation = (options?: Partial<Options<DeleteSnapshotData_api>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteSnapshotError_api>, Options<DeleteSnapshotData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSnapshot({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getSnapshotQueryKey = (options: Options<GetSnapshotData_api>) => [createQueryKey("getSnapshot", options)];

export const getSnapshotOptions = (options: Options<GetSnapshotData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSnapshot({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSnapshotQueryKey(options),
    });
};

export const updateSnapshotMutation = (options?: Partial<Options<UpdateSnapshotData_api>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateSnapshotError_api>, Options<UpdateSnapshotData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSnapshot({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getSnapshotMetadataQueryKey = (options: Options<GetSnapshotMetadataData_api>) => [
    createQueryKey("getSnapshotMetadata", options),
];

export const getSnapshotMetadataOptions = (options: Options<GetSnapshotMetadataData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSnapshotMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getSnapshotMetadataQueryKey(options),
    });
};

export const snapshotPreviewQueryKey = (options: Options<SnapshotPreviewData_api>) => [
    createQueryKey("snapshotPreview", options),
];

export const snapshotPreviewOptions = (options: Options<SnapshotPreviewData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await snapshotPreview({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: snapshotPreviewQueryKey(options),
    });
};

export const loginRouteQueryKey = (options?: Options<LoginRouteData_api>) => [createQueryKey("loginRoute", options)];

export const loginRouteOptions = (options?: Options<LoginRouteData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: loginRouteQueryKey(options),
    });
};

export const authorizedCallbackRouteQueryKey = (options?: Options<AuthorizedCallbackRouteData_api>) => [
    createQueryKey("authorizedCallbackRoute", options),
];

export const authorizedCallbackRouteOptions = (options?: Options<AuthorizedCallbackRouteData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authorizedCallbackRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: authorizedCallbackRouteQueryKey(options),
    });
};

export const getAliveQueryKey = (options?: Options<GetAliveData_api>) => [createQueryKey("getAlive", options)];

export const getAliveOptions = (options?: Options<GetAliveData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAlive({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getAliveQueryKey(options),
    });
};

export const getAliveProtectedQueryKey = (options?: Options<GetAliveProtectedData_api>) => [
    createQueryKey("getAliveProtected", options),
];

export const getAliveProtectedOptions = (options?: Options<GetAliveProtectedData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAliveProtected({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getAliveProtectedQueryKey(options),
    });
};

export const postLogoutQueryKey = (options?: Options<PostLogoutData_api>) => [createQueryKey("postLogout", options)];

export const postLogoutOptions = (options?: Options<PostLogoutData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: postLogoutQueryKey(options),
    });
};

export const postLogoutMutation = (options?: Partial<Options<PostLogoutData_api>>) => {
    const mutationOptions: UseMutationOptions<PostLogoutResponse_api, AxiosError<DefaultError>, Options<PostLogoutData_api>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postLogout({
                ...options,
                ...localOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const getLoggedInUserQueryKey = (options?: Options<GetLoggedInUserData_api>) => [
    createQueryKey("getLoggedInUser", options),
];

export const getLoggedInUserOptions = (options?: Options<GetLoggedInUserData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLoggedInUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: getLoggedInUserQueryKey(options),
    });
};

export const rootQueryKey = (options?: Options<RootData_api>) => [createQueryKey("root", options)];

export const rootOptions = (options?: Options<RootData_api>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await root({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: rootQueryKey(options),
    });
};
