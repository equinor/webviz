// This file is auto-generated by @hey-api/openapi-ts

export enum Alq_api {
    GRAT = "GRAT",
    IGLR = "IGLR",
    TGLR = "TGLR",
    PUMP = "PUMP",
    COMP = "COMP",
    DENO = "DENO",
    DENG = "DENG",
    BEAN = "BEAN",
    "''" = "''",
}

export type B64FloatArray_api = {
    element_type: "float32" | "float64";
    data_b64str: string;
};

export type B64UintArray_api = {
    element_type: "uint8" | "uint16" | "uint32" | "uint64";
    data_b64str: string;
};

export type BodyPostGetAggregatedPerRealizationTableData_api = {
    /**
     * Selected identifiers and wanted values
     */
    identifiers_with_values: Array<InplaceVolumetricsIdentifierWithValues_api>;
};

export type BodyPostGetAggregatedStatisticalTableData_api = {
    /**
     * Selected identifiers and wanted values
     */
    identifiers_with_values: Array<InplaceVolumetricsIdentifierWithValues_api>;
};

export type BodyPostGetPolylineIntersection_api = {
    polyline_utm_xy: Array<number>;
};

export type BodyPostGetSampleSurfaceInPoints_api = {
    sample_points: PointSetXy_api;
};

export type BodyPostGetSeismicFence_api = {
    polyline: SeismicFencePolyline_api;
};

export type BodyPostGetSurfaceIntersection_api = {
    cumulative_length_polyline: SurfaceIntersectionCumulativeLengthPolyline_api;
};

export type BoundingBox2D_api = {
    min_x: number;
    min_y: number;
    max_x: number;
    max_y: number;
};

/**
 * Bounding box for a 3D grid geometry
 */
export type BoundingBox3D_api = {
    xmin: number;
    ymin: number;
    zmin: number;
    xmax: number;
    ymax: number;
    zmax: number;
};

export type CaseInfo_api = {
    uuid: string;
    name: string;
    status: string;
    user: string;
};

export type Completions_api = {
    sortedCompletionDateIndices: Array<number>;
    open: Array<number>;
    shut: Array<number>;
    khMean: Array<number>;
    khMin: Array<number>;
    khMax: Array<number>;
};

export type DatedFlowNetwork_api = {
    dates: Array<string>;
    network: NetworkNode_api;
};

export type EnsembleDetails_api = {
    name: string;
    field_identifier: string;
    case_name: string;
    case_uuid: string;
    realizations: Array<number>;
    stratigraphic_column_identifier: string;
};

export type EnsembleInfo_api = {
    name: string;
    realization_count: number;
};

/**
 * Description/data for a single parameter in an ensemble
 */
export type EnsembleParameter_api = {
    name: string;
    is_logarithmic: boolean;
    is_discrete: boolean;
    is_constant: boolean;
    group_name: string | null;
    descriptive_name: string | null;
    realizations: Array<number>;
    values: Array<number> | Array<number> | Array<string>;
};

export type EnsembleParameterDescription_api = {
    name: string;
    group_name: string | null;
    descriptive_name: string | null;
    is_discrete: boolean;
};

/**
 * A generic type for a scalar response from each of the members of the ensemble.
 */
export type EnsembleScalarResponse_api = {
    realizations: Array<number>;
    values: Array<number>;
    name: string | null;
    unit: string | null;
};

/**
 * Description/data for a single sensitivity in an ensemble
 */
export type EnsembleSensitivity_api = {
    name: string;
    type: SensitivityType_api;
    cases: Array<EnsembleSensitivityCase_api>;
};

/**
 * Description/data for a single sensitivity case in an ensemble
 */
export type EnsembleSensitivityCase_api = {
    name: string;
    realizations: Array<number>;
};

export type FenceMeshSection_api = {
    vertices_uz_b64arr: B64FloatArray_api;
    poly_indices_b64arr: B64UintArray_api;
    vertices_per_poly_b64arr: B64UintArray_api;
    poly_source_cell_indices_b64arr: B64UintArray_api;
    poly_props_b64arr: B64FloatArray_api;
    start_utm_x: number;
    start_utm_y: number;
    end_utm_x: number;
    end_utm_y: number;
};

export type FieldInfo_api = {
    field_identifier: string;
};

export type FlowNetworkData_api = {
    edgeMetadataList: Array<FlowNetworkMetadata_api>;
    nodeMetadataList: Array<FlowNetworkMetadata_api>;
    datedNetworks: Array<DatedFlowNetwork_api>;
};

export type FlowNetworkMetadata_api = {
    key: string;
    label: string;
};

export enum FlowRateType_api {
    OIL = "OIL",
    LIQ = "LIQ",
    GAS = "GAS",
    WG = "WG",
    TM = "TM",
    WAT = "WAT",
}

export enum FluidZone_api {
    OIL = "Oil",
    GAS = "Gas",
    WATER = "Water",
}

export enum Frequency_api {
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    MONTHLY = "MONTHLY",
    QUARTERLY = "QUARTERLY",
    YEARLY = "YEARLY",
}

export enum Gfr_api {
    GOR = "GOR",
    GLR = "GLR",
    OGR = "OGR",
    MMW = "MMW",
}

export type GraphUserPhoto_api = {
    avatar_b64str: string | null;
};

/**
 * Specification of a 3D grid dimensions
 */
export type Grid3dDimensions_api = {
    i_count: number;
    j_count: number;
    k_count: number;
    subgrids: Array<Grid3dZone_api>;
};

export type Grid3dGeometry_api = {
    polys_b64arr: B64UintArray_api;
    points_b64arr: B64FloatArray_api;
    poly_source_cell_indices_b64arr: B64UintArray_api;
    origin_utm_x: number;
    origin_utm_y: number;
    xmin: number;
    xmax: number;
    ymin: number;
    ymax: number;
    zmin: number;
    zmax: number;
};

/**
 * Metadata for a 3D grid model, including its properties and geometry
 */
export type Grid3dInfo_api = {
    grid_name: string;
    bbox: BoundingBox3D_api;
    dimensions: Grid3dDimensions_api;
    property_info_arr: Array<Grid3dPropertyInfo_api>;
};

export type Grid3dMappedProperty_api = {
    poly_props_b64arr: B64FloatArray_api;
    min_grid_prop_value: number;
    max_grid_prop_value: number;
};

/**
 * Metadata for a 3D grid property
 */
export type Grid3dPropertyInfo_api = {
    property_name: string;
    iso_date_or_interval: string | null;
};

/**
 * Named subset of 3D grid layers (Zone)
 */
export type Grid3dZone_api = {
    name: string;
    start_layer: number;
    end_layer: number;
};

export type GridDimensions_api = {
    i_count: number;
    j_count: number;
    k_count: number;
};

export type HttpValidationError_api = {
    detail?: Array<ValidationError_api>;
};

/**
 * Statistical volumetric data for single volume table
 *
 * Contains data for a single fluid zone, e.g. Oil, Gas, Water, or sum of fluid zones
 */
export type InplaceStatisticalVolumetricTableData_api = {
    fluidSelectionName: string;
    selectorColumns: Array<RepeatedTableColumnData_api>;
    resultColumnStatistics: Array<TableColumnStatisticalData_api>;
};

/**
 * Statistical volumetric data for a single table per fluid selection
 *
 * Fluid selection can be single fluid zones, e.g. Oil, Gas, Water, or sum of fluid zones - Oil + Gas + Water
 */
export type InplaceStatisticalVolumetricTableDataPerFluidSelection_api = {
    tableDataPerFluidSelection: Array<InplaceStatisticalVolumetricTableData_api>;
};

/**
 * Allowed volumetric response names
 */
export enum InplaceVolumetricResultName_api {
    BULK = "BULK",
    NET = "NET",
    PORO = "PORO",
    PORO_NET = "PORO_NET",
    PORV = "PORV",
    HCPV = "HCPV",
    STOIIP = "STOIIP",
    GIIP = "GIIP",
    NTG = "NTG",
    ASSOCIATEDGAS = "ASSOCIATEDGAS",
    ASSOCIATEDOIL = "ASSOCIATEDOIL",
    BO = "BO",
    BG = "BG",
    SW = "SW",
    STOIIP_TOTAL = "STOIIP_TOTAL",
    GIIP_TOTAL = "GIIP_TOTAL",
}

/**
 * Definition of possible statistics for a result column in an inplace volumetrics table
 */
export enum InplaceVolumetricStatistic_api {
    MEAN = "mean",
    STDDEV = "stddev",
    MAX = "max",
    MIN = "min",
    P10 = "p10",
    P90 = "p90",
}

/**
 * Volumetric data for a single table
 *
 * Contains data for a single fluid zone, e.g. Oil, Gas, Water, or sum of fluid zones
 */
export type InplaceVolumetricTableData_api = {
    fluidSelectionName: string;
    selectorColumns: Array<RepeatedTableColumnData_api>;
    resultColumns: Array<TableColumnData_api>;
};

/**
 * Volumetric data for a single table per fluid selection
 *
 * Fluid selection can be single fluid zones, e.g. Oil, Gas, Water, or sum of fluid zones - Oil + Gas + Water
 */
export type InplaceVolumetricTableDataPerFluidSelection_api = {
    tableDataPerFluidSelection: Array<InplaceVolumetricTableData_api>;
};

export enum InplaceVolumetricsIdentifier_api {
    ZONE = "ZONE",
    REGION = "REGION",
    FACIES = "FACIES",
    LICENSE = "LICENSE",
}

/**
 * Unique values for an index column in a volumetric table
 * All values should ideally be strings, but it is common to see integers, especially for REGION
 */
export type InplaceVolumetricsIdentifierWithValues_api = {
    identifier: InplaceVolumetricsIdentifier_api;
    values: Array<string | number>;
};

/**
 * Definition of a volumetric table
 */
export type InplaceVolumetricsTableDefinition_api = {
    tableName: string;
    fluidZones: Array<FluidZone_api>;
    resultNames: Array<InplaceVolumetricResultName_api>;
    identifiersWithValues: Array<InplaceVolumetricsIdentifierWithValues_api>;
};

export type NetworkNode_api = {
    node_type: "Group" | "Well";
    node_label: string;
    edge_label: string;
    node_data: {
        [key: string]: Array<number>;
    };
    edge_data: {
        [key: string]: Array<number>;
    };
    children: Array<NetworkNode_api>;
};

export enum NodeType_api {
    PROD = "prod",
    INJ = "inj",
    OTHER = "other",
}

/**
 * A collection of observations associated with a field/case/ensemble
 */
export type Observations_api = {
    summary: Array<SummaryVectorObservations_api>;
    rft: Array<RftObservations_api>;
};

export type PointSetXy_api = {
    x_points: Array<number>;
    y_points: Array<number>;
};

export type PolygonData_api = {
    x_arr: Array<number>;
    y_arr: Array<number>;
    z_arr: Array<number>;
    poly_id: number | string;
};

/**
 * To be revisited later when the metadata is more mature.
 */
export enum PolygonsAttributeType_api {
    DEPTH = "depth",
    TIME = "time",
    PROPERTY = "property",
    SEISMIC = "seismic",
    THICKNESS = "thickness",
    ISOCHORE = "isochore",
    FLUID_CONTACT = "fluid_contact",
    FIELD_OUTLINE = "field_outline",
    PINCHOUT = "pinchout",
    SUBCROP = "subcrop",
    FAULT_LINES = "fault_lines",
    NAMED_AREA = "named_area",
}

export type PolygonsMeta_api = {
    name: string;
    name_is_stratigraphic_offical: boolean;
    stratigraphic_identifier: string | null;
    relative_stratigraphic_level: number | null;
    parent_stratigraphic_identifier: string | null;
    attribute_name: string;
    attribute_type: PolygonsAttributeType_api;
};

export type PolylineIntersection_api = {
    fence_mesh_sections: Array<FenceMeshSection_api>;
    grid_dimensions: GridDimensions_api;
    min_grid_prop_value: number;
    max_grid_prop_value: number;
};

export type PvtData_api = {
    name: string;
    phase: string;
    pvtnum: number;
    ratio: Array<number>;
    pressure: Array<number>;
    volumefactor: Array<number>;
    viscosity: Array<number>;
    density: Array<number>;
    pressure_unit: string;
    volumefactor_unit: string;
    viscosity_unit: string;
    density_unit: string;
    ratio_unit: string;
};

/**
 * Data for a single column in a volumetric table
 *
 * Length of index list should be equal to the number of rows in the table
 *
 * - unique_values: List of unique values in the column
 * - indices: List of indices, in unique_values list, for each row in the table
 */
export type RepeatedTableColumnData_api = {
    columnName: string;
    uniqueValues: Array<string | number>;
    indices: Array<number>;
};

/**
 * A specific RFT (Repeat Formation Tester) observation.
 *
 * Attributes:
 * value (float): The measured value of the observation.
 * comment (Optional[str]): An optional comment associated with the observation.
 * error (float): The measurement error associated with the observation.
 * zone (str): The zone or region associated with the observation.
 * md_msl (float): Measured depth from mean sea level.
 * x (float): X utm coordinate of the observation.
 * y (float): Y utm coordinate of the observation.
 * z (float): Z utm coordinate of the observation.
 */
export type RftObservation_api = {
    value: number;
    comment: string | null;
    error: number;
    zone: string;
    md_msl: number;
    x: number;
    y: number;
    z: number;
};

/**
 * A collection of RFT (Repeat Formation Tester) observations for a specific well at a specific date.
 *
 * Attributes:
 * well (str): Unique well identifier
 * date (str): Observation date
 * comment (Optional[str]): An optional comment associated with the collection of observations.
 * observations (List[RftObservation_api]): A list of RFT observations associated with this collection.
 */
export type RftObservations_api = {
    well: string;
    date: string;
    comment: string | null;
    observations: Array<RftObservation_api>;
};

export type RftRealizationData_api = {
    well_name: string;
    realization: number;
    timestamp_utc_ms: number;
    depth_arr: Array<number>;
    value_arr: Array<number>;
};

export type RftTableDefinition_api = {
    response_names: Array<string>;
    well_infos: Array<RftWellInfo_api>;
};

export type RftWellInfo_api = {
    well_name: string;
    timestamps_utc_ms: Array<number>;
};

export type SeismicCubeMeta_api = {
    seismic_attribute: string;
    iso_date_or_interval: string;
    is_observation: boolean;
    is_depth: boolean;
};

/**
 * Definition of a fence of seismic data from a set of (x, y) coordinates in domain coordinate system.
 * Each (x, y) point provides a trace perpendicular to the x-y plane, with number of samples equal to the depth of the seismic cube.
 *
 * Each trace is defined to be a set of depth value samples along the length direction of the fence.
 *
 * `Properties:`
 * - `fence_traces_b64arr`: The fence trace array is base64 encoded 1D float array - where data is stored trace by trace.
 * - `num_traces`: The number of traces in the fence trace array. Equals the number of (x, y) coordinates in requested polyline.
 * - `num_samples_per_trace`: The number of samples in each trace.
 * - `min_fence_depth`: The minimum depth value of the fence.
 * - `max_fence_depth`: The maximum depth value of the fence.
 *
 * `Description - fence_traces_b64arr:`
 *
 * The encoded fence trace array is a flattened array of traces, where data is stored trace by trace.
 * With `m = num_traces`, and `n = num_samples_per_trace`, the flattened array has length `mxn`.
 *
 * Fence traces 1D array: [trace_1_sample_1, trace_1_sample_2, ..., trace_1_sample_n, ..., trace_m_sample_1, trace_m_sample_2, ..., trace_m_sample_n]
 *
 *
 * See:
 * - VdsAxis: https://github.com/equinor/vds-slice/blob/ab6f39789bf3d3b59a8df14f1c4682d340dc0bf3/internal/core/core.go#L37-L55
 */
export type SeismicFenceData_api = {
    fence_traces_b64arr: B64FloatArray_api;
    num_traces: number;
    num_samples_per_trace: number;
    min_fence_depth: number;
    max_fence_depth: number;
};

/**
 * (x, y) points defining a polyline in domain coordinate system, to retrieve fence of seismic data.
 *
 * Expect equal number of x- and y-points.
 *
 * Note: Coordinates are in domain coordinate system (UTM).
 *
 * NOTE:
 * - Verify coordinates are in domain coordinate system (UTM)?
 * - Consider points_xy: List[float] - i.e. array with [x1, y1, x2, y2, ..., xn, yn] instead of x_points and y_points arrays?
 * - Ensure equal length of x_points and y_points arrays?
 */
export type SeismicFencePolyline_api = {
    x_points: Array<number>;
    y_points: Array<number>;
};

export enum SensitivityType_api {
    MONTECARLO = "montecarlo",
    SCENARIO = "scenario",
}

export enum StatisticFunction_api {
    MEAN = "MEAN",
    MIN = "MIN",
    MAX = "MAX",
    P10 = "P10",
    P90 = "P90",
    P50 = "P50",
}

export type StatisticValueObject_api = {
    statistic_function: StatisticFunction_api;
    values: Array<number>;
};

/**
 * Stratigraphic unit from SMDA
 *
 * Camel case attributes needed for esvIntersection component in front-end
 */
export type StratigraphicUnit_api = {
    identifier: string;
    top: string;
    base: string;
    stratUnitLevel: number;
    stratUnitType: string;
    topAge: number | number;
    baseAge: number | number;
    stratUnitParent: string | null;
    colorR: number;
    colorG: number;
    colorB: number;
    lithologyType: number | number | string;
};

/**
 * A single observation of a summary vector at a specific date.
 */
export type SummaryVectorDateObservation_api = {
    date: string;
    comment: string | null;
    value: number;
    error: number;
    label: string;
};

/**
 * A collection of observations of a summary vector.
 */
export type SummaryVectorObservations_api = {
    vector_name: string;
    comment: string | null;
    observations: Array<SummaryVectorDateObservation_api>;
};

/**
 * A surface has a single array with values, e.g. depth, time, property, seismic, thickness.
 * Only surfaces with depth and time have z-values that can be plotted in 3D.
 * The other attributes are scalar values that can be plotted in 2D or used as colormapping for 3D surfaces.
 *
 * Ideally if the attribute is a scalar, there should be corresponding z-values, but this information is not
 * available in the metadata.
 *
 * To be revisited later when the metadata is more mature.
 */
export enum SurfaceAttributeType_api {
    DEPTH = "depth",
    FACIES_THICKNESS = "facies_thickness",
    FLUID_CONTACT = "fluid_contact",
    PINCHOUT = "pinchout",
    PROPERTY = "property",
    SEISMIC = "seismic",
    SUBCROP = "subcrop",
    THICKNESS = "thickness",
    TIME = "time",
    VELOCITY = "velocity",
    VOLUMES = "volumes",
    UNKNOWN = "UNKNOWN",
}

export type SurfaceDataFloat_api = {
    format: "float";
    surface_def: SurfaceDef_api;
    transformed_bbox_utm: BoundingBox2D_api;
    value_min: number;
    value_max: number;
    values_b64arr: B64FloatArray_api;
};

export type SurfaceDataPng_api = {
    format: "png";
    surface_def: SurfaceDef_api;
    transformed_bbox_utm: BoundingBox2D_api;
    value_min: number;
    value_max: number;
    png_image_base64: string;
};

export type SurfaceDef_api = {
    npoints_x: number;
    npoints_y: number;
    inc_x: number;
    inc_y: number;
    origin_utm_x: number;
    origin_utm_y: number;
    rot_deg: number;
};

/**
 * (x, y) points defining a polyline in domain coordinate system, to retrieve intersection of a surface, with a cumulative length
 * between at each (x, y)-point coordinates in domain coordinate system.
 *
 * Expect equal number of x- and y-points.
 *
 * x_points: X-coordinates of polyline points.
 * y_points: Y-coordinates of polyline points.
 * cum_lengths: Cumulative lengths of the polyline segments, i.e. the length of the polyline up to each (x,y) point.
 *
 * The cumulative lengths can be e.g. measured depth along a well path.
 *
 * Note: Coordinates are in domain coordinate system (UTM)
 *
 * Note: Verify if cum_lengths is necessary with respect to xtgeo
 */
export type SurfaceIntersectionCumulativeLengthPolyline_api = {
    x_points: Array<number>;
    y_points: Array<number>;
    cum_lengths: Array<number>;
};

/**
 * Definition of a surface intersection made from a set of (x, y) coordinates.
 *
 * name: Name of the surface
 * z_points: Array of z-points (depth values) at the intersection points, i.e. depth value for each (x,y) point.
 * cum_lengths: Cumulative length values at the intersection points, i.e. accumulated length between each element in the z points.
 */
export type SurfaceIntersectionData_api = {
    name: string;
    z_points: Array<number>;
    cum_lengths: Array<number>;
};

export type SurfaceMeta_api = {
    name: string;
    name_is_stratigraphic_offical: boolean;
    attribute_name: string;
    attribute_type: SurfaceAttributeType_api;
    time_type: SurfaceTimeType_api;
    is_observation: boolean;
    value_min: number | null;
    value_max: number | null;
};

export type SurfaceMetaSet_api = {
    surfaces: Array<SurfaceMeta_api>;
    time_points_iso_str: Array<string>;
    time_intervals_iso_str: Array<string>;
    surface_names_in_strat_order: Array<string>;
};

export type SurfaceRealizationSampleValues_api = {
    realization: number;
    sampled_values: Array<number>;
};

export enum SurfaceStatisticFunction_api {
    MEAN = "MEAN",
    STD = "STD",
    MIN = "MIN",
    MAX = "MAX",
    P10 = "P10",
    P90 = "P90",
    P50 = "P50",
}

export enum SurfaceTimeType_api {
    NO_TIME = "NO_TIME",
    TIME_POINT = "TIME_POINT",
    INTERVAL = "INTERVAL",
}

export type Thp_api = "THP";

export enum TabType_api {
    BHP = "BHP",
    TEMP = "TEMP",
}

/**
 * Data for a single column in a volumetric table
 *
 * Length of column values should be equal to the number of rows in the table
 */
export type TableColumnData_api = {
    columnName: string;
    columnValues: Array<number>;
};

/**
 * Statistical data for a single result column in a volumetric table
 *
 * Length of column values should be equal to the number of rows in the table
 */
export type TableColumnStatisticalData_api = {
    columnName: string;
    statisticValues: {
        [key: string]: Array<number>;
    };
};

export enum UnitType_api {
    METRIC = "METRIC",
    FIELD = "FIELD",
    LAB = "LAB",
    PVT_M = "PVT-M",
    DEFAULT = "DEFAULT",
}

export type UserInfo_api = {
    username: string;
    display_name: string | null;
    avatar_b64str: string | null;
    has_sumo_access: boolean;
    has_smda_access: boolean;
};

export type ValidationError_api = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type VectorDescription_api = {
    name: string;
    descriptive_name: string;
    has_historical: boolean;
};

export type VectorHistoricalData_api = {
    timestamps_utc_ms: Array<number>;
    values: Array<number>;
    unit: string;
    is_rate: boolean;
};

export type VectorRealizationData_api = {
    realization: number;
    timestamps_utc_ms: Array<number>;
    values: Array<number>;
    unit: string;
    is_rate: boolean;
};

export type VectorStatisticData_api = {
    realizations: Array<number>;
    timestamps_utc_ms: Array<number>;
    value_objects: Array<StatisticValueObject_api>;
    unit: string;
    is_rate: boolean;
};

export type VectorStatisticSensitivityData_api = {
    realizations: Array<number>;
    timestamps_utc_ms: Array<number>;
    value_objects: Array<StatisticValueObject_api>;
    unit: string;
    is_rate: boolean;
    sensitivity_name: string;
    sensitivity_case: string;
};

export type VfpInjTable_api = {
    isInjTable: boolean;
    tableNumber: number;
    datum: number;
    flowRateType: FlowRateType_api;
    unitType: UnitType_api;
    tabType: TabType_api;
    thpValues: Array<number>;
    flowRateValues: Array<number>;
    bhpValues: Array<number>;
    flowRateUnit: string;
    thpUnit: string;
    bhpUnit: string;
};

export type VfpProdTable_api = {
    isProdTable: boolean;
    tableNumber: number;
    datum: number;
    thpType: Thp_api;
    wfrType: Wfr_api;
    gfrType: Gfr_api;
    alqType: Alq_api;
    flowRateType: FlowRateType_api;
    unitType: UnitType_api;
    tabType: TabType_api;
    thpValues: Array<number>;
    wfrValues: Array<number>;
    gfrValues: Array<number>;
    alqValues: Array<number>;
    flowRateValues: Array<number>;
    bhpValues: Array<number>;
    flowRateUnit: string;
    thpUnit: string;
    wfrUnit: string;
    gfrUnit: string;
    alqUnit: string;
    bhpUnit: string;
};

export enum Wfr_api {
    WOR = "WOR",
    WCT = "WCT",
    WGR = "WGR",
    WWR = "WWR",
    WTF = "WTF",
}

/**
 * Type definition for well completions data
 */
export type WellCompletionsData_api = {
    version: string;
    units: WellCompletionsUnits_api;
    zones: Array<WellCompletionsZone_api>;
    sortedCompletionDates: Array<string>;
    wells: Array<WellCompletionsWell_api>;
};

export type WellCompletionsUnitInfo_api = {
    unit: string;
    decimalPlaces: number;
};

export type WellCompletionsUnits_api = {
    kh: WellCompletionsUnitInfo_api;
};

export type WellCompletionsWell_api = {
    name: string;
    attributes: {
        [key: string]: string | number | boolean;
    };
    completions: {
        [key: string]: Completions_api;
    };
};

export type WellCompletionsZone_api = {
    name: string;
    subzones: Array<WellCompletionsZone_api> | null;
};

export type WellboreCasing_api = {
    itemType: string;
    diameterNumeric: number;
    diameterInner: number;
    description: string | null;
    remark: string | null;
    depthTopMd: number;
    depthBottomMd: number;
    totalDepthMd: number;
    startDepth: number;
    endDepth: number;
};

export type WellboreCompletion_api = {
    mdTop: number;
    mdBottom: number;
    tvdTop: number | null;
    tvdBottom: number | null;
    description: string | null;
    symbolName: string | null;
    comment: string | null;
};

export type WellboreHeader_api = {
    wellboreUuid: string;
    uniqueWellboreIdentifier: string;
    wellUuid: string;
    uniqueWellIdentifier: string;
    wellEasting: number;
    wellNorthing: number;
    depthReferencePoint: string;
    depthReferenceElevation: number;
    wellborePurpose: string;
    wellboreStatus: string;
};

export type WellboreLogCurveData_api = {
    name: string;
    indexMin: number;
    indexMax: number;
    minCurveValue: number;
    maxCurveValue: number;
    curveAlias: string | null;
    curveDescription: string | null;
    indexUnit: string;
    noDataValue: number | null;
    unit: string;
    curveUnitDesc: string | null;
    dataPoints: Array<Array<number | null>>;
};

export type WellboreLogCurveHeader_api = {
    logName: string;
    curveName: string;
    curveUnit: string | null;
};

export type WellborePerforation_api = {
    mdTop: number;
    mdBottom: number;
    tvdTop: number;
    tvdBottom: number;
    status: string;
    completionMode: string;
};

/**
 * Wellbore pick from SMDA
 *
 * Camel case attributes needed for esvIntersection component in front-end
 */
export type WellborePick_api = {
    northing: number;
    easting: number;
    tvd: number;
    tvdMsl: number;
    md: number;
    mdMsl: number;
    uniqueWellboreIdentifier: string;
    wellboreUuid: string;
    pickIdentifier: string;
    confidence: string | null;
    depthReferencePoint: string;
    mdUnit: string;
};

export type WellboreTrajectory_api = {
    wellboreUuid: string;
    uniqueWellboreIdentifier: string;
    tvdMslArr: Array<number>;
    mdArr: Array<number>;
    eastingArr: Array<number>;
    northingArr: Array<number>;
};

export type GetFieldsData_api = {
    body?: never;
    path?: never;
    query?: never;
    url: "/fields";
};

export type GetFieldsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<FieldInfo_api>;
};

export type GetFieldsResponse_api = GetFieldsResponses_api[keyof GetFieldsResponses_api];

export type GetCasesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Field identifier
         */
        field_identifier: string;
    };
    url: "/cases";
};

export type GetCasesErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetCasesError_api = GetCasesErrors_api[keyof GetCasesErrors_api];

export type GetCasesResponses_api = {
    /**
     * Successful Response
     */
    200: Array<CaseInfo_api>;
};

export type GetCasesResponse_api = GetCasesResponses_api[keyof GetCasesResponses_api];

export type GetEnsemblesData_api = {
    body?: never;
    path: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
    };
    query?: never;
    url: "/cases/{case_uuid}/ensembles";
};

export type GetEnsemblesErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetEnsemblesError_api = GetEnsemblesErrors_api[keyof GetEnsemblesErrors_api];

export type GetEnsemblesResponses_api = {
    /**
     * Successful Response
     */
    200: Array<EnsembleInfo_api>;
};

export type GetEnsemblesResponse_api = GetEnsemblesResponses_api[keyof GetEnsemblesResponses_api];

export type GetEnsembleDetailsData_api = {
    body?: never;
    path: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    query?: never;
    url: "/cases/{case_uuid}/ensembles/{ensemble_name}";
};

export type GetEnsembleDetailsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetEnsembleDetailsError_api = GetEnsembleDetailsErrors_api[keyof GetEnsembleDetailsErrors_api];

export type GetEnsembleDetailsResponses_api = {
    /**
     * Successful Response
     */
    200: EnsembleDetails_api;
};

export type GetEnsembleDetailsResponse_api = GetEnsembleDetailsResponses_api[keyof GetEnsembleDetailsResponses_api];

export type GetVectorListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/timeseries/vector_list/";
};

export type GetVectorListErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetVectorListError_api = GetVectorListErrors_api[keyof GetVectorListErrors_api];

export type GetVectorListResponses_api = {
    /**
     * Successful Response
     */
    200: Array<VectorDescription_api>;
};

export type GetVectorListResponse_api = GetVectorListResponses_api[keyof GetVectorListResponses_api];

export type GetDeltaEnsembleVectorListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid for comparison ensemble
         */
        comparison_case_uuid: string;
        /**
         * Comparison ensemble name
         */
        comparison_ensemble_name: string;
        /**
         * Sumo case uuid for reference ensemble
         */
        reference_case_uuid: string;
        /**
         * Reference ensemble name
         */
        reference_ensemble_name: string;
    };
    url: "/timeseries/delta_ensemble_vector_list/";
};

export type GetDeltaEnsembleVectorListErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetDeltaEnsembleVectorListError_api = GetDeltaEnsembleVectorListErrors_api[keyof GetDeltaEnsembleVectorListErrors_api];

export type GetDeltaEnsembleVectorListResponses_api = {
    /**
     * Successful Response
     */
    200: Array<VectorDescription_api>;
};

export type GetDeltaEnsembleVectorListResponse_api =
    GetDeltaEnsembleVectorListResponses_api[keyof GetDeltaEnsembleVectorListResponses_api];

export type GetRealizationsVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency. If not specified, raw data without resampling wil be returned.
         */
        resampling_frequency?: Frequency_api | null;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/timeseries/realizations_vector_data/";
};

export type GetRealizationsVectorDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetRealizationsVectorDataError_api = GetRealizationsVectorDataErrors_api[keyof GetRealizationsVectorDataErrors_api];

export type GetRealizationsVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<VectorRealizationData_api>;
};

export type GetRealizationsVectorDataResponse_api =
    GetRealizationsVectorDataResponses_api[keyof GetRealizationsVectorDataResponses_api];

export type GetDeltaEnsembleRealizationsVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid for comparison ensemble
         */
        comparison_case_uuid: string;
        /**
         * Comparison ensemble name
         */
        comparison_ensemble_name: string;
        /**
         * Sumo case uuid for reference ensemble
         */
        reference_case_uuid: string;
        /**
         * Reference ensemble name
         */
        reference_ensemble_name: string;
        /**
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/timeseries/delta_ensemble_realizations_vector_data/";
};

export type GetDeltaEnsembleRealizationsVectorDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetDeltaEnsembleRealizationsVectorDataError_api =
    GetDeltaEnsembleRealizationsVectorDataErrors_api[keyof GetDeltaEnsembleRealizationsVectorDataErrors_api];

export type GetDeltaEnsembleRealizationsVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<VectorRealizationData_api>;
};

export type GetDeltaEnsembleRealizationsVectorDataResponse_api =
    GetDeltaEnsembleRealizationsVectorDataResponses_api[keyof GetDeltaEnsembleRealizationsVectorDataResponses_api];

export type GetTimestampsListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency?: Frequency_api | null;
    };
    url: "/timeseries/timestamps_list/";
};

export type GetTimestampsListErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetTimestampsListError_api = GetTimestampsListErrors_api[keyof GetTimestampsListErrors_api];

export type GetTimestampsListResponses_api = {
    /**
     * Successful Response
     */
    200: Array<number>;
};

export type GetTimestampsListResponse_api = GetTimestampsListResponses_api[keyof GetTimestampsListResponses_api];

export type GetHistoricalVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Name of the non-historical vector
         */
        non_historical_vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency?: Frequency_api | null;
    };
    url: "/timeseries/historical_vector_data/";
};

export type GetHistoricalVectorDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetHistoricalVectorDataError_api = GetHistoricalVectorDataErrors_api[keyof GetHistoricalVectorDataErrors_api];

export type GetHistoricalVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: VectorHistoricalData_api;
};

export type GetHistoricalVectorDataResponse_api = GetHistoricalVectorDataResponses_api[keyof GetHistoricalVectorDataResponses_api];

export type GetStatisticalVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Optional list of statistics to calculate. If not specified, all statistics will be calculated.
         */
        statistic_functions?: Array<StatisticFunction_api> | null;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/timeseries/statistical_vector_data/";
};

export type GetStatisticalVectorDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetStatisticalVectorDataError_api = GetStatisticalVectorDataErrors_api[keyof GetStatisticalVectorDataErrors_api];

export type GetStatisticalVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: VectorStatisticData_api;
};

export type GetStatisticalVectorDataResponse_api =
    GetStatisticalVectorDataResponses_api[keyof GetStatisticalVectorDataResponses_api];

export type GetDeltaEnsembleStatisticalVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid for comparison ensemble
         */
        comparison_case_uuid: string;
        /**
         * Comparison ensemble name
         */
        comparison_ensemble_name: string;
        /**
         * Sumo case uuid for reference ensemble
         */
        reference_case_uuid: string;
        /**
         * Reference ensemble name
         */
        reference_ensemble_name: string;
        /**
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Optional list of statistics to calculate. If not specified, all statistics will be calculated.
         */
        statistic_functions?: Array<StatisticFunction_api> | null;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/timeseries/delta_ensemble_statistical_vector_data/";
};

export type GetDeltaEnsembleStatisticalVectorDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetDeltaEnsembleStatisticalVectorDataError_api =
    GetDeltaEnsembleStatisticalVectorDataErrors_api[keyof GetDeltaEnsembleStatisticalVectorDataErrors_api];

export type GetDeltaEnsembleStatisticalVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: VectorStatisticData_api;
};

export type GetDeltaEnsembleStatisticalVectorDataResponse_api =
    GetDeltaEnsembleStatisticalVectorDataResponses_api[keyof GetDeltaEnsembleStatisticalVectorDataResponses_api];

export type GetStatisticalVectorDataPerSensitivityData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Optional list of statistics to calculate. If not specified, all statistics will be calculated.
         */
        statistic_functions?: Array<StatisticFunction_api> | null;
        /**
         * Optional list of realizations to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/timeseries/statistical_vector_data_per_sensitivity/";
};

export type GetStatisticalVectorDataPerSensitivityErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetStatisticalVectorDataPerSensitivityError_api =
    GetStatisticalVectorDataPerSensitivityErrors_api[keyof GetStatisticalVectorDataPerSensitivityErrors_api];

export type GetStatisticalVectorDataPerSensitivityResponses_api = {
    /**
     * Successful Response
     */
    200: Array<VectorStatisticSensitivityData_api>;
};

export type GetStatisticalVectorDataPerSensitivityResponse_api =
    GetStatisticalVectorDataPerSensitivityResponses_api[keyof GetStatisticalVectorDataPerSensitivityResponses_api];

export type GetRealizationVectorAtTimestampData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Name of the vector
         */
        vector_name: string;
        /**
         * Timestamp in ms UTC to query vectors at
         */
        timestamp_utc_ms: number;
    };
    url: "/timeseries/realization_vector_at_timestamp/";
};

export type GetRealizationVectorAtTimestampErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetRealizationVectorAtTimestampError_api =
    GetRealizationVectorAtTimestampErrors_api[keyof GetRealizationVectorAtTimestampErrors_api];

export type GetRealizationVectorAtTimestampResponses_api = {
    /**
     * Successful Response
     */
    200: EnsembleScalarResponse_api;
};

export type GetRealizationVectorAtTimestampResponse_api =
    GetRealizationVectorAtTimestampResponses_api[keyof GetRealizationVectorAtTimestampResponses_api];

export type GetTableDefinitionsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/inplace_volumetrics/table_definitions/";
};

export type GetTableDefinitionsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetTableDefinitionsError_api = GetTableDefinitionsErrors_api[keyof GetTableDefinitionsErrors_api];

export type GetTableDefinitionsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<InplaceVolumetricsTableDefinition_api>;
};

export type GetTableDefinitionsResponse_api = GetTableDefinitionsResponses_api[keyof GetTableDefinitionsResponses_api];

export type PostGetAggregatedPerRealizationTableDataData_api = {
    body: BodyPostGetAggregatedPerRealizationTableData_api;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Table name
         */
        table_name: string;
        /**
         * The name of the volumetric results
         */
        result_names: Array<string>;
        /**
         * The fluid zones to aggregate by
         */
        fluid_zones: Array<FluidZone_api>;
        /**
         * Whether to accumulate fluid zones
         */
        accumulate_fluid_zones: boolean;
        /**
         * The identifiers to group table data by
         */
        group_by_identifiers?: Array<InplaceVolumetricsIdentifier_api> | null;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/inplace_volumetrics/get_aggregated_per_realization_table_data/";
};

export type PostGetAggregatedPerRealizationTableDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type PostGetAggregatedPerRealizationTableDataError_api =
    PostGetAggregatedPerRealizationTableDataErrors_api[keyof PostGetAggregatedPerRealizationTableDataErrors_api];

export type PostGetAggregatedPerRealizationTableDataResponses_api = {
    /**
     * Successful Response
     */
    200: InplaceVolumetricTableDataPerFluidSelection_api;
};

export type PostGetAggregatedPerRealizationTableDataResponse_api =
    PostGetAggregatedPerRealizationTableDataResponses_api[keyof PostGetAggregatedPerRealizationTableDataResponses_api];

export type PostGetAggregatedStatisticalTableDataData_api = {
    body: BodyPostGetAggregatedStatisticalTableData_api;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Table name
         */
        table_name: string;
        /**
         * The name of the volumetric results
         */
        result_names: Array<string>;
        /**
         * The fluid zones to aggregate by
         */
        fluid_zones: Array<FluidZone_api>;
        /**
         * Whether to accumulate fluid zones
         */
        accumulate_fluid_zones: boolean;
        /**
         * The identifiers to group table data by
         */
        group_by_identifiers?: Array<InplaceVolumetricsIdentifier_api> | null;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/inplace_volumetrics/get_aggregated_statistical_table_data/";
};

export type PostGetAggregatedStatisticalTableDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type PostGetAggregatedStatisticalTableDataError_api =
    PostGetAggregatedStatisticalTableDataErrors_api[keyof PostGetAggregatedStatisticalTableDataErrors_api];

export type PostGetAggregatedStatisticalTableDataResponses_api = {
    /**
     * Successful Response
     */
    200: InplaceStatisticalVolumetricTableDataPerFluidSelection_api;
};

export type PostGetAggregatedStatisticalTableDataResponse_api =
    PostGetAggregatedStatisticalTableDataResponses_api[keyof PostGetAggregatedStatisticalTableDataResponses_api];

export type GetRealizationSurfacesMetadataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/surface/realization_surfaces_metadata/";
};

export type GetRealizationSurfacesMetadataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetRealizationSurfacesMetadataError_api =
    GetRealizationSurfacesMetadataErrors_api[keyof GetRealizationSurfacesMetadataErrors_api];

export type GetRealizationSurfacesMetadataResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceMetaSet_api;
};

export type GetRealizationSurfacesMetadataResponse_api =
    GetRealizationSurfacesMetadataResponses_api[keyof GetRealizationSurfacesMetadataResponses_api];

export type GetObservedSurfacesMetadataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
    };
    url: "/surface/observed_surfaces_metadata/";
};

export type GetObservedSurfacesMetadataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetObservedSurfacesMetadataError_api =
    GetObservedSurfacesMetadataErrors_api[keyof GetObservedSurfacesMetadataErrors_api];

export type GetObservedSurfacesMetadataResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceMetaSet_api;
};

export type GetObservedSurfacesMetadataResponse_api =
    GetObservedSurfacesMetadataResponses_api[keyof GetObservedSurfacesMetadataResponses_api];

export type GetSurfaceDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Surface address string, supported address types are *REAL*, *OBS* and *STAT*
         */
        surf_addr_str: string;
        /**
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Definition of the surface onto which the data should be resampled. *SurfaceDef_api* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
    };
    url: "/surface/surface_data";
};

export type GetSurfaceDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetSurfaceDataError_api = GetSurfaceDataErrors_api[keyof GetSurfaceDataErrors_api];

export type GetSurfaceDataResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceDataFloat_api | SurfaceDataPng_api;
};

export type GetSurfaceDataResponse_api = GetSurfaceDataResponses_api[keyof GetSurfaceDataResponses_api];

export type PostGetSurfaceIntersectionData_api = {
    body: BodyPostGetSurfaceIntersection_api;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization number
         */
        realization_num: number;
        /**
         * Surface name
         */
        name: string;
        /**
         * Surface attribute
         */
        attribute: string;
        /**
         * Time point or time interval string
         */
        time_or_interval_str?: string | null;
    };
    url: "/surface/get_surface_intersection";
};

export type PostGetSurfaceIntersectionErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type PostGetSurfaceIntersectionError_api = PostGetSurfaceIntersectionErrors_api[keyof PostGetSurfaceIntersectionErrors_api];

export type PostGetSurfaceIntersectionResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceIntersectionData_api;
};

export type PostGetSurfaceIntersectionResponse_api =
    PostGetSurfaceIntersectionResponses_api[keyof PostGetSurfaceIntersectionResponses_api];

export type PostGetSampleSurfaceInPointsData_api = {
    body: BodyPostGetSampleSurfaceInPoints_api;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Surface name
         */
        surface_name: string;
        /**
         * Surface attribute
         */
        surface_attribute: string;
        /**
         * Realization numbers
         */
        realization_nums: Array<number>;
    };
    url: "/surface/get_sample_surface_in_points";
};

export type PostGetSampleSurfaceInPointsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type PostGetSampleSurfaceInPointsError_api =
    PostGetSampleSurfaceInPointsErrors_api[keyof PostGetSampleSurfaceInPointsErrors_api];

export type PostGetSampleSurfaceInPointsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<SurfaceRealizationSampleValues_api>;
};

export type PostGetSampleSurfaceInPointsResponse_api =
    PostGetSampleSurfaceInPointsResponses_api[keyof PostGetSampleSurfaceInPointsResponses_api];

export type GetDeltaSurfaceDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Address string of surface A, supported types: *REAL*, *OBS* and *STAT*
         */
        surf_a_addr_str: string;
        /**
         * Address string of surface B, supported types: *REAL*, *OBS* and *STAT*
         */
        surf_b_addr_str: string;
        /**
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Definition of the surface onto which the data should be resampled. *SurfaceDef_api* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
    };
    url: "/surface/delta_surface_data";
};

export type GetDeltaSurfaceDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetDeltaSurfaceDataError_api = GetDeltaSurfaceDataErrors_api[keyof GetDeltaSurfaceDataErrors_api];

export type GetDeltaSurfaceDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<SurfaceDataFloat_api>;
};

export type GetDeltaSurfaceDataResponse_api = GetDeltaSurfaceDataResponses_api[keyof GetDeltaSurfaceDataResponses_api];

export type GetMisfitSurfaceDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Address of observed surface, only supported address type is *OBS*
         */
        obs_surf_addr_str: string;
        /**
         * Address of simulated surface, supported type is *PARTIAL*
         */
        sim_surf_addr_str: string;
        /**
         * Statistics to calculate
         */
        statistic_functions: Array<SurfaceStatisticFunction_api>;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        /**
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Definition of the surface onto which the data should be resampled. *SurfaceDef_api* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
    };
    url: "/surface/misfit_surface_data";
};

export type GetMisfitSurfaceDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetMisfitSurfaceDataError_api = GetMisfitSurfaceDataErrors_api[keyof GetMisfitSurfaceDataErrors_api];

export type GetMisfitSurfaceDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<SurfaceDataFloat_api>;
};

export type GetMisfitSurfaceDataResponse_api = GetMisfitSurfaceDataResponses_api[keyof GetMisfitSurfaceDataResponses_api];

export type GetStratigraphicUnitsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
    };
    url: "/surface/stratigraphic_units";
};

export type GetStratigraphicUnitsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetStratigraphicUnitsError_api = GetStratigraphicUnitsErrors_api[keyof GetStratigraphicUnitsErrors_api];

export type GetStratigraphicUnitsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<StratigraphicUnit_api>;
};

export type GetStratigraphicUnitsResponse_api = GetStratigraphicUnitsResponses_api[keyof GetStratigraphicUnitsResponses_api];

export type GetParameterNamesAndDescriptionData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Exclude all parameters where all values are the same value
         */
        exclude_all_values_constant?: boolean;
        /**
         * Sort order
         */
        sort_order?: "alphabetically" | "standard_deviation";
    };
    url: "/parameters/parameter_names_and_description/";
};

export type GetParameterNamesAndDescriptionErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetParameterNamesAndDescriptionError_api =
    GetParameterNamesAndDescriptionErrors_api[keyof GetParameterNamesAndDescriptionErrors_api];

export type GetParameterNamesAndDescriptionResponses_api = {
    /**
     * Successful Response
     */
    200: Array<EnsembleParameterDescription_api>;
};

export type GetParameterNamesAndDescriptionResponse_api =
    GetParameterNamesAndDescriptionResponses_api[keyof GetParameterNamesAndDescriptionResponses_api];

export type GetParameterData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Parameter name
         */
        parameter_name: string;
    };
    url: "/parameters/parameter/";
};

export type GetParameterErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetParameterError_api = GetParameterErrors_api[keyof GetParameterErrors_api];

export type GetParameterResponses_api = {
    /**
     * Successful Response
     */
    200: EnsembleParameter_api | null;
};

export type GetParameterResponse_api = GetParameterResponses_api[keyof GetParameterResponses_api];

export type GetParametersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/parameters/parameters/";
};

export type GetParametersErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetParametersError_api = GetParametersErrors_api[keyof GetParametersErrors_api];

export type GetParametersResponses_api = {
    /**
     * Successful Response
     */
    200: Array<EnsembleParameter_api>;
};

export type GetParametersResponse_api = GetParametersResponses_api[keyof GetParametersResponses_api];

export type GetIsSensitivityRunData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/parameters/is_sensitivity_run/";
};

export type GetIsSensitivityRunErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetIsSensitivityRunError_api = GetIsSensitivityRunErrors_api[keyof GetIsSensitivityRunErrors_api];

export type GetIsSensitivityRunResponses_api = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type GetIsSensitivityRunResponse_api = GetIsSensitivityRunResponses_api[keyof GetIsSensitivityRunResponses_api];

export type GetSensitivitiesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/parameters/sensitivities/";
};

export type GetSensitivitiesErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetSensitivitiesError_api = GetSensitivitiesErrors_api[keyof GetSensitivitiesErrors_api];

export type GetSensitivitiesResponses_api = {
    /**
     * Successful Response
     */
    200: Array<EnsembleSensitivity_api>;
};

export type GetSensitivitiesResponse_api = GetSensitivitiesResponses_api[keyof GetSensitivitiesResponses_api];

export type GetGridModelsInfoData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         */
        realization_num: number;
    };
    url: "/grid3d/grid_models_info/";
};

export type GetGridModelsInfoErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetGridModelsInfoError_api = GetGridModelsInfoErrors_api[keyof GetGridModelsInfoErrors_api];

export type GetGridModelsInfoResponses_api = {
    /**
     * Successful Response
     */
    200: Array<Grid3dInfo_api>;
};

export type GetGridModelsInfoResponse_api = GetGridModelsInfoResponses_api[keyof GetGridModelsInfoResponses_api];

export type GetIsGridGeometrySharedData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid name
         */
        grid_name: string;
    };
    url: "/grid3d/is_grid_geometry_shared/";
};

export type GetIsGridGeometrySharedErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetIsGridGeometrySharedError_api = GetIsGridGeometrySharedErrors_api[keyof GetIsGridGeometrySharedErrors_api];

export type GetIsGridGeometrySharedResponses_api = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type GetIsGridGeometrySharedResponse_api = GetIsGridGeometrySharedResponses_api[keyof GetIsGridGeometrySharedResponses_api];

export type GetGridSurfaceData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid name
         */
        grid_name: string;
        /**
         * Realization
         */
        realization_num: number;
        /**
         * Min i index
         */
        i_min?: number;
        /**
         * Max i index
         */
        i_max?: number;
        /**
         * Min j index
         */
        j_min?: number;
        /**
         * Max j index
         */
        j_max?: number;
        /**
         * Min k index
         */
        k_min?: number;
        /**
         * Max k index
         */
        k_max?: number;
    };
    url: "/grid3d/grid_surface";
};

export type GetGridSurfaceErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetGridSurfaceError_api = GetGridSurfaceErrors_api[keyof GetGridSurfaceErrors_api];

export type GetGridSurfaceResponses_api = {
    /**
     * Successful Response
     */
    200: Grid3dGeometry_api;
};

export type GetGridSurfaceResponse_api = GetGridSurfaceResponses_api[keyof GetGridSurfaceResponses_api];

export type GetGridParameterData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid name
         */
        grid_name: string;
        /**
         * Grid parameter
         */
        parameter_name: string;
        /**
         * Realization
         */
        realization_num: number;
        /**
         * Time point or time interval string
         */
        parameter_time_or_interval_str?: string | null;
        /**
         * Min i index
         */
        i_min?: number;
        /**
         * Max i index
         */
        i_max?: number;
        /**
         * Min j index
         */
        j_min?: number;
        /**
         * Max j index
         */
        j_max?: number;
        /**
         * Min k index
         */
        k_min?: number;
        /**
         * Max k index
         */
        k_max?: number;
    };
    url: "/grid3d/grid_parameter";
};

export type GetGridParameterErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetGridParameterError_api = GetGridParameterErrors_api[keyof GetGridParameterErrors_api];

export type GetGridParameterResponses_api = {
    /**
     * Successful Response
     */
    200: Grid3dMappedProperty_api;
};

export type GetGridParameterResponse_api = GetGridParameterResponses_api[keyof GetGridParameterResponses_api];

export type PostGetPolylineIntersectionData_api = {
    body: BodyPostGetPolylineIntersection_api;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid name
         */
        grid_name: string;
        /**
         * Grid parameter
         */
        parameter_name: string;
        /**
         * Realization
         */
        realization_num: number;
        /**
         * Time point or time interval string
         */
        parameter_time_or_interval_str?: string | null;
    };
    url: "/grid3d/get_polyline_intersection";
};

export type PostGetPolylineIntersectionErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type PostGetPolylineIntersectionError_api =
    PostGetPolylineIntersectionErrors_api[keyof PostGetPolylineIntersectionErrors_api];

export type PostGetPolylineIntersectionResponses_api = {
    /**
     * Successful Response
     */
    200: PolylineIntersection_api;
};

export type PostGetPolylineIntersectionResponse_api =
    PostGetPolylineIntersectionResponses_api[keyof PostGetPolylineIntersectionResponses_api];

export type GetRealizationFlowNetworkData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         */
        realization: number;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Node types
         */
        node_type_set: Array<NodeType_api>;
    };
    url: "/flow_network/realization_flow_network/";
};

export type GetRealizationFlowNetworkErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetRealizationFlowNetworkError_api = GetRealizationFlowNetworkErrors_api[keyof GetRealizationFlowNetworkErrors_api];

export type GetRealizationFlowNetworkResponses_api = {
    /**
     * Successful Response
     */
    200: FlowNetworkData_api;
};

export type GetRealizationFlowNetworkResponse_api =
    GetRealizationFlowNetworkResponses_api[keyof GetRealizationFlowNetworkResponses_api];

export type GetTableDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization number
         */
        realization: number;
    };
    url: "/pvt/table_data/";
};

export type GetTableDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetTableDataError_api = GetTableDataErrors_api[keyof GetTableDataErrors_api];

export type GetTableDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<PvtData_api>;
};

export type GetTableDataResponse_api = GetTableDataResponses_api[keyof GetTableDataResponses_api];

export type GetRealizationsTablesAreEqualData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/pvt/realizations_tables_are_equal/";
};

export type GetRealizationsTablesAreEqualErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetRealizationsTablesAreEqualError_api =
    GetRealizationsTablesAreEqualErrors_api[keyof GetRealizationsTablesAreEqualErrors_api];

export type GetRealizationsTablesAreEqualResponses_api = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type GetRealizationsTablesAreEqualResponse_api =
    GetRealizationsTablesAreEqualResponses_api[keyof GetRealizationsTablesAreEqualResponses_api];

export type GetWellCompletionsDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Optional realizations to include. Provide single realization or list of realizations. If not specified, all realizations will be returned.
         */
        realization?: number | Array<number> | null;
    };
    url: "/well_completions/well_completions_data/";
};

export type GetWellCompletionsDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellCompletionsDataError_api = GetWellCompletionsDataErrors_api[keyof GetWellCompletionsDataErrors_api];

export type GetWellCompletionsDataResponses_api = {
    /**
     * Successful Response
     */
    200: WellCompletionsData_api;
};

export type GetWellCompletionsDataResponse_api = GetWellCompletionsDataResponses_api[keyof GetWellCompletionsDataResponses_api];

export type GetDrilledWellboreHeadersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Official field identifier
         */
        field_identifier: string;
    };
    url: "/well/drilled_wellbore_headers/";
};

export type GetDrilledWellboreHeadersErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetDrilledWellboreHeadersError_api = GetDrilledWellboreHeadersErrors_api[keyof GetDrilledWellboreHeadersErrors_api];

export type GetDrilledWellboreHeadersResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellboreHeader_api>;
};

export type GetDrilledWellboreHeadersResponse_api =
    GetDrilledWellboreHeadersResponses_api[keyof GetDrilledWellboreHeadersResponses_api];

export type GetWellTrajectoriesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Official field identifier
         */
        field_identifier: string;
        /**
         * Optional subset of wellbore uuids
         */
        wellbore_uuids?: Array<string>;
    };
    url: "/well/well_trajectories/";
};

export type GetWellTrajectoriesErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellTrajectoriesError_api = GetWellTrajectoriesErrors_api[keyof GetWellTrajectoriesErrors_api];

export type GetWellTrajectoriesResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellboreTrajectory_api>;
};

export type GetWellTrajectoriesResponse_api = GetWellTrajectoriesResponses_api[keyof GetWellTrajectoriesResponses_api];

export type GetWellborePickIdentifiersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Stratigraphic column identifier
         */
        strat_column_identifier: string;
    };
    url: "/well/wellbore_pick_identifiers/";
};

export type GetWellborePickIdentifiersErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellborePickIdentifiersError_api = GetWellborePickIdentifiersErrors_api[keyof GetWellborePickIdentifiersErrors_api];

export type GetWellborePickIdentifiersResponses_api = {
    /**
     * Successful Response
     */
    200: Array<string>;
};

export type GetWellborePickIdentifiersResponse_api =
    GetWellborePickIdentifiersResponses_api[keyof GetWellborePickIdentifiersResponses_api];

export type GetWellborePicksForPickIdentifierData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Official field identifier
         */
        field_identifier: string;
        /**
         * Pick identifier
         */
        pick_identifier: string;
    };
    url: "/well/wellbore_picks_for_pick_identifier/";
};

export type GetWellborePicksForPickIdentifierErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellborePicksForPickIdentifierError_api =
    GetWellborePicksForPickIdentifierErrors_api[keyof GetWellborePicksForPickIdentifierErrors_api];

export type GetWellborePicksForPickIdentifierResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellborePick_api>;
};

export type GetWellborePicksForPickIdentifierResponse_api =
    GetWellborePicksForPickIdentifierResponses_api[keyof GetWellborePicksForPickIdentifierResponses_api];

export type GetWellborePicksForWellboreData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore uuid
         */
        wellbore_uuid: string;
    };
    url: "/well/wellbore_picks_for_wellbore/";
};

export type GetWellborePicksForWellboreErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellborePicksForWellboreError_api =
    GetWellborePicksForWellboreErrors_api[keyof GetWellborePicksForWellboreErrors_api];

export type GetWellborePicksForWellboreResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellborePick_api>;
};

export type GetWellborePicksForWellboreResponse_api =
    GetWellborePicksForWellboreResponses_api[keyof GetWellborePicksForWellboreResponses_api];

export type GetWellboreCompletionsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore uuid
         */
        wellbore_uuid: string;
    };
    url: "/well/wellbore_completions/";
};

export type GetWellboreCompletionsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellboreCompletionsError_api = GetWellboreCompletionsErrors_api[keyof GetWellboreCompletionsErrors_api];

export type GetWellboreCompletionsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellboreCompletion_api>;
};

export type GetWellboreCompletionsResponse_api = GetWellboreCompletionsResponses_api[keyof GetWellboreCompletionsResponses_api];

export type GetWellboreCasingsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore uuid
         */
        wellbore_uuid: string;
    };
    url: "/well/wellbore_casings/";
};

export type GetWellboreCasingsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellboreCasingsError_api = GetWellboreCasingsErrors_api[keyof GetWellboreCasingsErrors_api];

export type GetWellboreCasingsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellboreCasing_api>;
};

export type GetWellboreCasingsResponse_api = GetWellboreCasingsResponses_api[keyof GetWellboreCasingsResponses_api];

export type GetWellborePerforationsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore uuid
         */
        wellbore_uuid: string;
    };
    url: "/well/wellbore_perforations/";
};

export type GetWellborePerforationsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellborePerforationsError_api = GetWellborePerforationsErrors_api[keyof GetWellborePerforationsErrors_api];

export type GetWellborePerforationsResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellborePerforation_api>;
};

export type GetWellborePerforationsResponse_api = GetWellborePerforationsResponses_api[keyof GetWellborePerforationsResponses_api];

export type GetWellboreLogCurveHeadersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore uuid
         */
        wellbore_uuid: string;
    };
    url: "/well/wellbore_log_curve_headers/";
};

export type GetWellboreLogCurveHeadersErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetWellboreLogCurveHeadersError_api = GetWellboreLogCurveHeadersErrors_api[keyof GetWellboreLogCurveHeadersErrors_api];

export type GetWellboreLogCurveHeadersResponses_api = {
    /**
     * Successful Response
     */
    200: Array<WellboreLogCurveHeader_api>;
};

export type GetWellboreLogCurveHeadersResponse_api =
    GetWellboreLogCurveHeadersResponses_api[keyof GetWellboreLogCurveHeadersResponses_api];

export type GetLogCurveDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore uuid
         */
        wellbore_uuid: string;
        /**
         * Log curve name
         */
        log_curve_name: string;
    };
    url: "/well/log_curve_data/";
};

export type GetLogCurveDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetLogCurveDataError_api = GetLogCurveDataErrors_api[keyof GetLogCurveDataErrors_api];

export type GetLogCurveDataResponses_api = {
    /**
     * Successful Response
     */
    200: WellboreLogCurveData_api;
};

export type GetLogCurveDataResponse_api = GetLogCurveDataResponses_api[keyof GetLogCurveDataResponses_api];

export type GetSeismicCubeMetaListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/seismic/seismic_cube_meta_list/";
};

export type GetSeismicCubeMetaListErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetSeismicCubeMetaListError_api = GetSeismicCubeMetaListErrors_api[keyof GetSeismicCubeMetaListErrors_api];

export type GetSeismicCubeMetaListResponses_api = {
    /**
     * Successful Response
     */
    200: Array<SeismicCubeMeta_api>;
};

export type GetSeismicCubeMetaListResponse_api = GetSeismicCubeMetaListResponses_api[keyof GetSeismicCubeMetaListResponses_api];

export type PostGetSeismicFenceData_api = {
    body: BodyPostGetSeismicFence_api;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization number
         */
        realization_num: number;
        /**
         * Seismic cube attribute
         */
        seismic_attribute: string;
        /**
         * Timestamp or timestep
         */
        time_or_interval_str: string;
        /**
         * Observed or simulated
         */
        observed: boolean;
    };
    url: "/seismic/get_seismic_fence/";
};

export type PostGetSeismicFenceErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type PostGetSeismicFenceError_api = PostGetSeismicFenceErrors_api[keyof PostGetSeismicFenceErrors_api];

export type PostGetSeismicFenceResponses_api = {
    /**
     * Successful Response
     */
    200: SeismicFenceData_api;
};

export type PostGetSeismicFenceResponse_api = PostGetSeismicFenceResponses_api[keyof PostGetSeismicFenceResponses_api];

export type GetPolygonsDirectoryData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/polygons/polygons_directory/";
};

export type GetPolygonsDirectoryErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetPolygonsDirectoryError_api = GetPolygonsDirectoryErrors_api[keyof GetPolygonsDirectoryErrors_api];

export type GetPolygonsDirectoryResponses_api = {
    /**
     * Successful Response
     */
    200: Array<PolygonsMeta_api>;
};

export type GetPolygonsDirectoryResponse_api = GetPolygonsDirectoryResponses_api[keyof GetPolygonsDirectoryResponses_api];

export type GetPolygonsDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization number
         */
        realization_num: number;
        /**
         * Surface name
         */
        name: string;
        /**
         * Surface attribute
         */
        attribute: string;
    };
    url: "/polygons/polygons_data/";
};

export type GetPolygonsDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetPolygonsDataError_api = GetPolygonsDataErrors_api[keyof GetPolygonsDataErrors_api];

export type GetPolygonsDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<PolygonData_api>;
};

export type GetPolygonsDataResponse_api = GetPolygonsDataResponses_api[keyof GetPolygonsDataResponses_api];

export type GetUserPhotoData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * User id
         */
        user_id: string;
    };
    url: "/graph/user_photo/";
};

export type GetUserPhotoErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetUserPhotoError_api = GetUserPhotoErrors_api[keyof GetUserPhotoErrors_api];

export type GetUserPhotoResponses_api = {
    /**
     * Successful Response
     */
    200: GraphUserPhoto_api;
};

export type GetUserPhotoResponse_api = GetUserPhotoResponses_api[keyof GetUserPhotoResponses_api];

export type GetObservationsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
    };
    url: "/observations/observations/";
};

export type GetObservationsErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetObservationsError_api = GetObservationsErrors_api[keyof GetObservationsErrors_api];

export type GetObservationsResponses_api = {
    /**
     * Successful Response
     */
    200: Observations_api;
};

export type GetObservationsResponse_api = GetObservationsResponses_api[keyof GetObservationsResponses_api];

export type GetTableDefinitionData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
    };
    url: "/rft/table_definition";
};

export type GetTableDefinitionErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetTableDefinitionError_api = GetTableDefinitionErrors_api[keyof GetTableDefinitionErrors_api];

export type GetTableDefinitionResponses_api = {
    /**
     * Successful Response
     */
    200: RftTableDefinition_api;
};

export type GetTableDefinitionResponse_api = GetTableDefinitionResponses_api[keyof GetTableDefinitionResponses_api];

export type GetRealizationDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Well name
         */
        well_name: string;
        /**
         * Response name
         */
        response_name: string;
        /**
         * Timestamps utc ms
         */
        timestamps_utc_ms?: Array<number> | null;
        /**
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
    };
    url: "/rft/realization_data";
};

export type GetRealizationDataErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetRealizationDataError_api = GetRealizationDataErrors_api[keyof GetRealizationDataErrors_api];

export type GetRealizationDataResponses_api = {
    /**
     * Successful Response
     */
    200: Array<RftRealizationData_api>;
};

export type GetRealizationDataResponse_api = GetRealizationDataResponses_api[keyof GetRealizationDataResponses_api];

export type GetVfpTableNamesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         */
        realization: number;
    };
    url: "/vfp/vfp_table_names/";
};

export type GetVfpTableNamesErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetVfpTableNamesError_api = GetVfpTableNamesErrors_api[keyof GetVfpTableNamesErrors_api];

export type GetVfpTableNamesResponses_api = {
    /**
     * Successful Response
     */
    200: Array<string>;
};

export type GetVfpTableNamesResponse_api = GetVfpTableNamesResponses_api[keyof GetVfpTableNamesResponses_api];

export type GetVfpTableData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         */
        realization: number;
        /**
         * VFP table name
         */
        vfp_table_name: string;
    };
    url: "/vfp/vfp_table/";
};

export type GetVfpTableErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetVfpTableError_api = GetVfpTableErrors_api[keyof GetVfpTableErrors_api];

export type GetVfpTableResponses_api = {
    /**
     * Successful Response
     */
    200: VfpProdTable_api | VfpInjTable_api;
};

export type GetVfpTableResponse_api = GetVfpTableResponses_api[keyof GetVfpTableResponses_api];

export type LoginRouteData_api = {
    body?: never;
    path?: never;
    query?: {
        redirect_url_after_login?: string | null;
    };
    url: "/login";
};

export type LoginRouteErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type LoginRouteError_api = LoginRouteErrors_api[keyof LoginRouteErrors_api];

export type LoginRouteResponses_api = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthorizedCallbackRouteData_api = {
    body?: never;
    path?: never;
    query?: never;
    url: "/auth-callback";
};

export type AuthorizedCallbackRouteResponses_api = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAliveData_api = {
    body?: never;
    path?: never;
    query?: never;
    url: "/alive";
};

export type GetAliveResponses_api = {
    /**
     * Successful Response
     */
    200: string;
};

export type GetAliveResponse_api = GetAliveResponses_api[keyof GetAliveResponses_api];

export type GetAliveProtectedData_api = {
    body?: never;
    path?: never;
    query?: never;
    url: "/alive_protected";
};

export type GetAliveProtectedResponses_api = {
    /**
     * Successful Response
     */
    200: string;
};

export type GetAliveProtectedResponse_api = GetAliveProtectedResponses_api[keyof GetAliveProtectedResponses_api];

export type GetLoggedInUserData_api = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Set to true to include user avatar and display name from Microsoft Graph API
         */
        includeGraphApiInfo?: boolean;
    };
    url: "/logged_in_user";
};

export type GetLoggedInUserErrors_api = {
    /**
     * Validation Error
     */
    422: HttpValidationError_api;
};

export type GetLoggedInUserError_api = GetLoggedInUserErrors_api[keyof GetLoggedInUserErrors_api];

export type GetLoggedInUserResponses_api = {
    /**
     * Successful Response
     */
    200: UserInfo_api;
};

export type GetLoggedInUserResponse_api = GetLoggedInUserResponses_api[keyof GetLoggedInUserResponses_api];

export type RootData_api = {
    body?: never;
    path?: never;
    query?: never;
    url: "/";
};

export type RootResponses_api = {
    /**
     * Successful Response
     */
    200: string;
};

export type RootResponse_api = RootResponses_api[keyof RootResponses_api];
