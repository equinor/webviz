// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: `${string}://${string}/api` | (string & {});
};

/**
 * ALQ
 */
export enum ALQ_api {
    GRAT = "GRAT",
    IGLR = "IGLR",
    TGLR = "TGLR",
    PUMP = "PUMP",
    COMP = "COMP",
    DENO = "DENO",
    DENG = "DENG",
    BEAN = "BEAN",
    "''" = "''",
}

/**
 * B64FloatArray
 */
export type B64FloatArray_api = {
    /**
     * Element Type
     */
    element_type: "float32" | "float64";
    /**
     * Data B64Str
     */
    data_b64str: string;
};

/**
 * B64UintArray
 */
export type B64UintArray_api = {
    /**
     * Element Type
     */
    element_type: "uint8" | "uint16" | "uint32" | "uint64";
    /**
     * Data B64Str
     */
    data_b64str: string;
};

/**
 * Body_post_get_aggregated_per_realization_table_data
 */
export type BodyPostGetAggregatedPerRealizationTableData_api = {
    /**
     * Indices With Values
     *
     * Selected indices and wanted values
     */
    indices_with_values: Array<InplaceVolumesIndexWithValues_api>;
};

/**
 * Body_post_get_aggregated_statistical_table_data
 */
export type BodyPostGetAggregatedStatisticalTableData_api = {
    /**
     * Indices With Values
     *
     * Selected indices and wanted values
     */
    indices_with_values: Array<InplaceVolumesIndexWithValues_api>;
};

/**
 * Body_post_get_polyline_intersection
 */
export type BodyPostGetPolylineIntersection_api = {
    /**
     * Polyline Utm Xy
     */
    polyline_utm_xy: Array<number>;
};

/**
 * Body_post_get_sample_surface_in_points
 */
export type BodyPostGetSampleSurfaceInPoints_api = {
    sample_points: PointSetXY_api;
};

/**
 * Body_post_get_seismic_fence
 */
export type BodyPostGetSeismicFence_api = {
    polyline: SeismicFencePolyline_api;
};

/**
 * Body_post_get_surface_intersection
 */
export type BodyPostGetSurfaceIntersection_api = {
    cumulative_length_polyline: SurfaceIntersectionCumulativeLengthPolyline_api;
};

/**
 * BoundingBox2d
 */
export type BoundingBox2D_api = {
    /**
     * Min X
     */
    min_x: number;
    /**
     * Min Y
     */
    min_y: number;
    /**
     * Max X
     */
    max_x: number;
    /**
     * Max Y
     */
    max_y: number;
};

/**
 * BoundingBox3d
 *
 * Bounding box for a 3D grid geometry
 */
export type BoundingBox3D_api = {
    /**
     * Xmin
     */
    xmin: number;
    /**
     * Ymin
     */
    ymin: number;
    /**
     * Zmin
     */
    zmin: number;
    /**
     * Xmax
     */
    xmax: number;
    /**
     * Ymax
     */
    ymax: number;
    /**
     * Zmax
     */
    zmax: number;
};

/**
 * CaseInfo
 */
export type CaseInfo_api = {
    /**
     * Uuid
     */
    uuid: string;
    /**
     * Name
     */
    name: string;
    /**
     * Status
     */
    status: string;
    /**
     * User
     */
    user: string;
    /**
     * Updatedatutcms
     */
    updatedAtUtcMs: number;
    /**
     * Description
     */
    description: string;
    /**
     * Ensembles
     */
    ensembles: Array<EnsembleInfo_api>;
};

/**
 * Completions
 */
export type Completions_api = {
    /**
     * Sortedcompletiondateindices
     */
    sortedCompletionDateIndices: Array<number>;
    /**
     * Open
     */
    open: Array<number>;
    /**
     * Shut
     */
    shut: Array<number>;
    /**
     * Khmean
     */
    khMean: Array<number>;
    /**
     * Khmin
     */
    khMin: Array<number>;
    /**
     * Khmax
     */
    khMax: Array<number>;
};

/**
 * DatedFlowNetwork
 */
export type DatedFlowNetwork_api = {
    /**
     * Dates
     */
    dates: Array<string>;
    network: NetworkNode_api;
};

/**
 * DerivedVectorInfo
 */
export type DerivedVectorInfo_api = {
    type: DerivedVectorType_api;
    /**
     * Sourcevector
     */
    sourceVector: string;
};

/**
 * DerivedVectorType
 */
export enum DerivedVectorType_api {
    PER_DAY = "PER_DAY",
    PER_INTVL = "PER_INTVL",
}

/**
 * DiscreteValueMetadata
 *
 * Holds information that describes how a discrete curve value should be presented to the user.
 */
export type DiscreteValueMetadata_api = {
    /**
     * Code
     */
    code: number;
    /**
     * Identifier
     */
    identifier: string;
    /**
     * Rgbcolor
     */
    rgbColor: [number, number, number];
};

/**
 * EnsembleDetails
 */
export type EnsembleDetails_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Fieldidentifier
     */
    fieldIdentifier: string;
    /**
     * Casename
     */
    caseName: string;
    /**
     * Caseuuid
     */
    caseUuid: string;
    /**
     * Realizations
     */
    realizations: Array<number>;
    /**
     * Stratigraphiccolumnidentifier
     */
    stratigraphicColumnIdentifier: string;
    /**
     * Standardresults
     */
    standardResults: Array<string>;
};

/**
 * EnsembleIdent
 */
export type EnsembleIdent_api = {
    /**
     * Caseuuid
     */
    caseUuid: string;
    /**
     * Ensemblename
     */
    ensembleName: string;
};

/**
 * EnsembleInfo
 */
export type EnsembleInfo_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Realizationcount
     */
    realizationCount: number;
    /**
     * Standardresults
     */
    standardResults: Array<string>;
};

/**
 * EnsembleParameter
 *
 * Description/data for a single parameter in an ensemble
 */
export type EnsembleParameter_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Is Logarithmic
     */
    is_logarithmic: boolean;
    /**
     * Is Discrete
     */
    is_discrete: boolean;
    /**
     * Is Constant
     */
    is_constant: boolean;
    /**
     * Group Name
     */
    group_name?: string | null;
    /**
     * Descriptive Name
     */
    descriptive_name?: string | null;
    /**
     * Realizations
     */
    realizations: Array<number>;
    /**
     * Values
     */
    values: Array<number> | Array<number> | Array<string>;
};

/**
 * EnsembleParameterDescription
 */
export type EnsembleParameterDescription_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Group Name
     */
    group_name?: string | null;
    /**
     * Descriptive Name
     */
    descriptive_name?: string | null;
    /**
     * Is Discrete
     */
    is_discrete: boolean;
};

/**
 * EnsembleScalarResponse
 *
 * A generic type for a scalar response from each of the members of the ensemble.
 */
export type EnsembleScalarResponse_api = {
    /**
     * Realizations
     */
    realizations: Array<number>;
    /**
     * Values
     */
    values: Array<number>;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Unit
     */
    unit?: string | null;
};

/**
 * EnsembleSensitivity
 *
 * Description/data for a single sensitivity in an ensemble
 */
export type EnsembleSensitivity_api = {
    /**
     * Name
     */
    name: string;
    type: SensitivityType_api;
    /**
     * Cases
     */
    cases: Array<EnsembleSensitivityCase_api>;
};

/**
 * EnsembleSensitivityCase
 *
 * Description/data for a single sensitivity case in an ensemble
 */
export type EnsembleSensitivityCase_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Realizations
     */
    realizations: Array<number>;
};

/**
 * FenceMeshSection
 */
export type FenceMeshSection_api = {
    vertices_uz_b64arr: B64FloatArray_api;
    poly_indices_b64arr: B64UintArray_api;
    vertices_per_poly_b64arr: B64UintArray_api;
    poly_source_cell_indices_b64arr: B64UintArray_api;
    poly_props_b64arr: B64FloatArray_api;
    /**
     * Start Utm X
     */
    start_utm_x: number;
    /**
     * Start Utm Y
     */
    start_utm_y: number;
    /**
     * End Utm X
     */
    end_utm_x: number;
    /**
     * End Utm Y
     */
    end_utm_y: number;
};

/**
 * FieldInfo
 */
export type FieldInfo_api = {
    /**
     * Fieldidentifier
     */
    fieldIdentifier: string;
};

/**
 * FlowNetworkData
 */
export type FlowNetworkData_api = {
    /**
     * Edgemetadatalist
     */
    edgeMetadataList: Array<FlowNetworkMetadata_api>;
    /**
     * Nodemetadatalist
     */
    nodeMetadataList: Array<FlowNetworkMetadata_api>;
    /**
     * Datednetworks
     */
    datedNetworks: Array<DatedFlowNetwork_api>;
};

/**
 * FlowNetworkMetadata
 */
export type FlowNetworkMetadata_api = {
    /**
     * Key
     */
    key: string;
    /**
     * Label
     */
    label: string;
    /**
     * Unit
     */
    unit?: string | null;
};

/**
 * FlowRateType
 */
export enum FlowRateType_api {
    OIL = "OIL",
    LIQ = "LIQ",
    GAS = "GAS",
    WG = "WG",
    TM = "TM",
    WAT = "WAT",
}

/**
 * Frequency
 */
export enum Frequency_api {
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    MONTHLY = "MONTHLY",
    QUARTERLY = "QUARTERLY",
    YEARLY = "YEARLY",
}

/**
 * GFR
 */
export enum GFR_api {
    GOR = "GOR",
    GLR = "GLR",
    OGR = "OGR",
    MMW = "MMW",
}

/**
 * GraphUser
 */
export type GraphUser_api = {
    /**
     * Id
     */
    id: string;
    /**
     * Principal Name
     */
    principal_name: string;
    /**
     * Display Name
     */
    display_name: string;
    /**
     * Email
     */
    email: string;
};

/**
 * GraphUserPhoto
 */
export type GraphUserPhoto_api = {
    /**
     * Avatar B64Str
     */
    avatar_b64str?: string | null;
};

/**
 * Grid3dDimensions
 *
 * Specification of a 3D grid dimensions
 */
export type Grid3DDimensions_api = {
    /**
     * I Count
     */
    i_count: number;
    /**
     * J Count
     */
    j_count: number;
    /**
     * K Count
     */
    k_count: number;
    /**
     * Subgrids
     */
    subgrids: Array<Grid3DZone_api>;
};

/**
 * Grid3dGeometry
 */
export type Grid3DGeometry_api = {
    polys_b64arr: B64UintArray_api;
    points_b64arr: B64FloatArray_api;
    poly_source_cell_indices_b64arr: B64UintArray_api;
    /**
     * Origin Utm X
     */
    origin_utm_x: number;
    /**
     * Origin Utm Y
     */
    origin_utm_y: number;
    /**
     * Xmin
     */
    xmin: number;
    /**
     * Xmax
     */
    xmax: number;
    /**
     * Ymin
     */
    ymin: number;
    /**
     * Ymax
     */
    ymax: number;
    /**
     * Zmin
     */
    zmin: number;
    /**
     * Zmax
     */
    zmax: number;
};

/**
 * Grid3dInfo
 *
 * Metadata for a 3D grid model, including its properties and geometry
 */
export type Grid3DInfo_api = {
    /**
     * Grid Name
     */
    grid_name: string;
    bbox: BoundingBox3D_api;
    dimensions: Grid3DDimensions_api;
    /**
     * Property Info Arr
     */
    property_info_arr: Array<Grid3DPropertyInfo_api>;
};

/**
 * Grid3dMappedProperty
 */
export type Grid3DMappedProperty_api = {
    poly_props_b64arr: B64FloatArray_api;
    /**
     * Min Grid Prop Value
     */
    min_grid_prop_value: number;
    /**
     * Max Grid Prop Value
     */
    max_grid_prop_value: number;
};

/**
 * Grid3dPropertyInfo
 *
 * Metadata for a 3D grid property
 */
export type Grid3DPropertyInfo_api = {
    /**
     * Property Name
     */
    property_name: string;
    /**
     * Iso Date Or Interval
     */
    iso_date_or_interval?: string | null;
};

/**
 * Grid3dZone
 *
 * Named subset of 3D grid layers (Zone)
 */
export type Grid3DZone_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Start Layer
     */
    start_layer: number;
    /**
     * End Layer
     */
    end_layer: number;
};

/**
 * GridDimensions
 */
export type GridDimensions_api = {
    /**
     * I Count
     */
    i_count: number;
    /**
     * J Count
     */
    j_count: number;
    /**
     * K Count
     */
    k_count: number;
};

/**
 * HTTPValidationError
 */
export type HTTPValidationError_api = {
    /**
     * Detail
     */
    detail?: Array<ValidationError_api>;
};

/**
 * InplaceVolumesIndexWithValues
 *
 * Unique values for an index column in an inplace volumes table
 */
export type InplaceVolumesIndexWithValues_api = {
    /**
     * Indexcolumn
     */
    indexColumn: string;
    /**
     * Values
     */
    values: Array<string>;
};

/**
 * InplaceVolumesStatistic
 *
 * Definition of possible statistics for a result column in an inplace volumes table
 */
export enum InplaceVolumesStatistic_api {
    MEAN = "mean",
    STDDEV = "stddev",
    MAX = "max",
    MIN = "min",
    P10 = "p10",
    P90 = "p90",
}

/**
 * InplaceVolumesStatisticalTableData
 *
 * Statistical inplace volumes data for single volume table
 *
 * Contains data for a single fluid selection, e.g. Oil, Gas, Water, or sum of fluids
 */
export type InplaceVolumesStatisticalTableData_api = {
    /**
     * Fluidselection
     */
    fluidSelection: string;
    /**
     * Selectorcolumns
     */
    selectorColumns: Array<RepeatedTableColumnData_api>;
    /**
     * Resultcolumnstatistics
     */
    resultColumnStatistics: Array<TableColumnStatisticalData_api>;
};

/**
 * InplaceVolumesStatisticalTableDataPerFluidSelection
 *
 * Statistical inplace volumes data for a single table per fluid selection
 *
 * Fluid selection can be single fluid (Oil, Gas, Water) or sum of fluids (Oil + Gas + Water)
 */
export type InplaceVolumesStatisticalTableDataPerFluidSelection_api = {
    /**
     * Tabledataperfluidselection
     */
    tableDataPerFluidSelection: Array<InplaceVolumesStatisticalTableData_api>;
};

/**
 * InplaceVolumesTableData
 *
 * Inplace volumes data for a single table
 *
 * Contains data for a single fluid selection, e.g. Oil, Gas, Water, or sum of fluids
 */
export type InplaceVolumesTableData_api = {
    /**
     * Fluidselection
     */
    fluidSelection: string;
    /**
     * Selectorcolumns
     */
    selectorColumns: Array<RepeatedTableColumnData_api>;
    /**
     * Resultcolumns
     */
    resultColumns: Array<TableColumnData_api>;
};

/**
 * InplaceVolumesTableDataPerFluidSelection
 *
 * Inplace volumes data for a single table per fluid selection
 *
 * Fluid selection can be single fluid (Oil, Gas, Water) or sum of fluids (Oil + Gas + Water)
 */
export type InplaceVolumesTableDataPerFluidSelection_api = {
    /**
     * Tabledataperfluidselection
     */
    tableDataPerFluidSelection: Array<InplaceVolumesTableData_api>;
};

/**
 * InplaceVolumesTableDefinition
 *
 * Definition of a inplace volumes table
 */
export type InplaceVolumesTableDefinition_api = {
    /**
     * Tablename
     */
    tableName: string;
    /**
     * Resultnames
     */
    resultNames: Array<string>;
    /**
     * Indiceswithvalues
     */
    indicesWithValues: Array<InplaceVolumesIndexWithValues_api>;
};

/**
 * LroErrorInfo
 */
export type LroErrorInfo_api = {
    /**
     * Message
     */
    message: string;
};

/**
 * LroFailureResp
 */
export type LroFailureResp_api = {
    /**
     * Status
     */
    status: "failure";
    error: LroErrorInfo_api;
};

/**
 * LroInProgressResp
 */
export type LroInProgressResp_api = {
    /**
     * Status
     */
    status: "in_progress";
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Poll Url
     */
    poll_url?: string | null;
    /**
     * Progress Message
     */
    progress_message?: string | null;
};

/**
 * LroSuccessResp[Union[SurfaceDataFloat, SurfaceDataPng]]
 */
export type LroSuccessRespUnionSurfaceDataFloatSurfaceDataPng_api = {
    /**
     * Status
     */
    status: "success";
    /**
     * Result
     */
    result: SurfaceDataFloat_api | SurfaceDataPng_api;
};

/**
 * NetworkNode
 */
export type NetworkNode_api = {
    /**
     * Node Type
     */
    node_type: "Group" | "Well";
    /**
     * Node Label
     */
    node_label: string;
    /**
     * Edge Label
     */
    edge_label: string;
    /**
     * Node Data
     */
    node_data: {
        [key: string]: Array<number>;
    };
    /**
     * Edge Data
     */
    edge_data: {
        [key: string]: Array<number>;
    };
    /**
     * Children
     */
    children: Array<NetworkNode_api>;
};

/**
 * NodeType
 */
export enum NodeType_api {
    PROD = "prod",
    INJ = "inj",
    OTHER = "other",
}

/**
 * Observations
 *
 * A collection of observations associated with a field/case/ensemble
 */
export type Observations_api = {
    /**
     * Summary
     */
    summary?: Array<SummaryVectorObservations_api>;
    /**
     * Rft
     */
    rft?: Array<RftObservations_api>;
};

/**
 * PointSetXY
 */
export type PointSetXY_api = {
    /**
     * X Points
     */
    x_points: Array<number>;
    /**
     * Y Points
     */
    y_points: Array<number>;
};

/**
 * PolygonData
 */
export type PolygonData_api = {
    /**
     * X Arr
     */
    x_arr: Array<number>;
    /**
     * Y Arr
     */
    y_arr: Array<number>;
    /**
     * Z Arr
     */
    z_arr: Array<number>;
    /**
     * Poly Id
     */
    poly_id: number | string;
    /**
     * Name
     */
    name: string;
};

/**
 * PolygonsAttributeType
 *
 * To be revisited later when the metadata is more mature.
 */
export enum PolygonsAttributeType_api {
    DEPTH = "depth",
    TIME = "time",
    PROPERTY = "property",
    SEISMIC = "seismic",
    THICKNESS = "thickness",
    ISOCHORE = "isochore",
    FLUID_CONTACT = "fluid_contact",
    FIELD_OUTLINE = "field_outline",
    PINCHOUT = "pinchout",
    SUBCROP = "subcrop",
    FAULT_LINES = "fault_lines",
    NAMED_AREA = "named_area",
}

/**
 * PolygonsMeta
 */
export type PolygonsMeta_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Name Is Stratigraphic Offical
     */
    name_is_stratigraphic_offical: boolean;
    /**
     * Stratigraphic Identifier
     */
    stratigraphic_identifier?: string | null;
    /**
     * Relative Stratigraphic Level
     */
    relative_stratigraphic_level?: number | null;
    /**
     * Parent Stratigraphic Identifier
     */
    parent_stratigraphic_identifier?: string | null;
    /**
     * Attribute Name
     */
    attribute_name: string;
    attribute_type: PolygonsAttributeType_api;
};

/**
 * PolylineIntersection
 */
export type PolylineIntersection_api = {
    /**
     * Fence Mesh Sections
     */
    fence_mesh_sections: Array<FenceMeshSection_api>;
    grid_dimensions: GridDimensions_api;
    /**
     * Min Grid Prop Value
     */
    min_grid_prop_value: number;
    /**
     * Max Grid Prop Value
     */
    max_grid_prop_value: number;
};

/**
 * PvtData
 */
export type PvtData_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Phase
     */
    phase: string;
    /**
     * Pvtnum
     */
    pvtnum: number;
    /**
     * Ratio
     */
    ratio: Array<number>;
    /**
     * Pressure
     */
    pressure: Array<number>;
    /**
     * Volumefactor
     */
    volumefactor: Array<number>;
    /**
     * Viscosity
     */
    viscosity: Array<number>;
    /**
     * Density
     */
    density: Array<number>;
    /**
     * Pressure Unit
     */
    pressure_unit: string;
    /**
     * Volumefactor Unit
     */
    volumefactor_unit: string;
    /**
     * Viscosity Unit
     */
    viscosity_unit: string;
    /**
     * Density Unit
     */
    density_unit: string;
    /**
     * Ratio Unit
     */
    ratio_unit: string;
};

/**
 * RepeatedTableColumnData
 *
 * Data for a single column in a volumetric table
 *
 * Length of index list should be equal to the number of rows in the table
 *
 * - unique_values: List of unique values in the column
 * - indices: List of indices, in unique_values list, for each row in the table
 */
export type RepeatedTableColumnData_api = {
    /**
     * Columnname
     */
    columnName: string;
    /**
     * Uniquevalues
     */
    uniqueValues: Array<string | number>;
    /**
     * Indices
     */
    indices: Array<number>;
};

/**
 * RftObservation
 *
 * A specific RFT (Repeat Formation Tester) observation.
 *
 * Attributes:
 * value (float): The measured value of the observation.
 * comment (Optional[str]): An optional comment associated with the observation.
 * error (float): The measurement error associated with the observation.
 * zone (str): The zone or region associated with the observation.
 * md_msl (float): Measured depth from mean sea level.
 * x (float): X utm coordinate of the observation.
 * y (float): Y utm coordinate of the observation.
 * z (float): Z utm coordinate of the observation.
 */
export type RftObservation_api = {
    /**
     * Value
     */
    value: number;
    /**
     * Comment
     */
    comment?: string | null;
    /**
     * Error
     */
    error: number;
    /**
     * Zone
     */
    zone: string;
    /**
     * Md Msl
     */
    md_msl: number;
    /**
     * X
     */
    x: number;
    /**
     * Y
     */
    y: number;
    /**
     * Z
     */
    z: number;
};

/**
 * RftObservations
 *
 * A collection of RFT (Repeat Formation Tester) observations for a specific well at a specific date.
 *
 * Attributes:
 * well (str): Unique well identifier
 * date (str): Observation date
 * comment (Optional[str]): An optional comment associated with the collection of observations.
 * observations (List[RftObservation]): A list of RFT observations associated with this collection.
 */
export type RftObservations_api = {
    /**
     * Well
     */
    well: string;
    /**
     * Date
     */
    date: string;
    /**
     * Comment
     */
    comment?: string | null;
    /**
     * Observations
     */
    observations: Array<RftObservation_api>;
};

/**
 * RftRealizationData
 */
export type RftRealizationData_api = {
    /**
     * Well Name
     */
    well_name: string;
    /**
     * Realization
     */
    realization: number;
    /**
     * Timestamp Utc Ms
     */
    timestamp_utc_ms: number;
    /**
     * Depth Arr
     */
    depth_arr: Array<number>;
    /**
     * Value Arr
     */
    value_arr: Array<number>;
};

/**
 * RftTableDefinition
 */
export type RftTableDefinition_api = {
    /**
     * Response Names
     */
    response_names: Array<string>;
    /**
     * Well Infos
     */
    well_infos: Array<RftWellInfo_api>;
};

/**
 * RftWellInfo
 */
export type RftWellInfo_api = {
    /**
     * Well Name
     */
    well_name: string;
    /**
     * Timestamps Utc Ms
     */
    timestamps_utc_ms: Array<number>;
};

/**
 * SeismicCubeMeta
 *
 * Metadata for a seismic cube.
 */
export type SeismicCubeMeta_api = {
    /**
     * Seismicattribute
     */
    seismicAttribute: string;
    /**
     * Unit
     */
    unit: string;
    /**
     * Isodateorinterval
     */
    isoDateOrInterval: string;
    /**
     * Isobservation
     */
    isObservation: boolean;
    /**
     * Isdepth
     */
    isDepth: boolean;
    bbox: BoundingBox3D_api;
    spec: SeismicCubeSpec_api;
};

/**
 * SeismicCubeSpec
 *
 * Specification for a seismic cube.
 *
 * `Properties:`
 * - `numCols`: The number of columns in the seismic cube.
 * - `numRows`: The number of rows in the seismic cube.
 * - `numLayers`: The number of layers in the seismic cube.
 * - `xOrigin`: The x-coordinate of the origin of the cube [m].
 * - `yOrigin`: The y-coordinate of the origin of the cube [m].
 * - `zOrigin`: The z-coordinate of the origin of the cube [m].
 * - `xInc`: The increment in the x-direction [m].
 * - `yInc`: The increment in the y-direction [m].
 * - `zInc`: The increment in the z-direction [m].
 * - `yFlip`: {-1, 1} - The flip factor for the y-direction (1 if not flipped, -1 if flipped).
 * - `zFlip`: {-1, 1} - The flip factor for the z-direction (1 if not flipped, -1 if flipped).
 * - `rotationDeg`: The rotation angle of the cube [deg].
 */
export type SeismicCubeSpec_api = {
    /**
     * Numcols
     */
    numCols: number;
    /**
     * Numrows
     */
    numRows: number;
    /**
     * Numlayers
     */
    numLayers: number;
    /**
     * Xorigin
     */
    xOrigin: number;
    /**
     * Yorigin
     */
    yOrigin: number;
    /**
     * Zorigin
     */
    zOrigin: number;
    /**
     * Xinc
     */
    xInc: number;
    /**
     * Yinc
     */
    yInc: number;
    /**
     * Zinc
     */
    zInc: number;
    /**
     * Yflip
     */
    yFlip: number;
    /**
     * Zflip
     */
    zFlip: number;
    /**
     * Rotationdeg
     */
    rotationDeg: number;
};

/**
 * SeismicFenceData
 *
 * Definition of a fence of seismic data from a set of (x, y) coordinates in domain coordinate system.
 * Each (x, y) point provides a trace perpendicular to the x-y plane, with number of samples equal to the depth of the seismic cube.
 *
 * Each trace is defined to be a set of depth value samples along the length direction of the fence.
 *
 * `Properties:`
 * - `fence_traces_b64arr`: The fence trace array is base64 encoded 1D float array - where data is stored trace by trace.
 * - `num_traces`: The number of traces in the fence trace array. Equals the number of (x, y) coordinates in requested polyline.
 * - `num_samples_per_trace`: The number of samples in each trace.
 * - `min_fence_depth`: The minimum depth value of the fence.
 * - `max_fence_depth`: The maximum depth value of the fence.
 *
 * `Description - fence_traces_b64arr:`
 *
 * The encoded fence trace array is a flattened array of traces, where data is stored trace by trace.
 * With `m = num_traces`, and `n = num_samples_per_trace`, the flattened array has length `mxn`.
 *
 * Fence traces 1D array: [trace_1_sample_1, trace_1_sample_2, ..., trace_1_sample_n, ..., trace_m_sample_1, trace_m_sample_2, ..., trace_m_sample_n]
 *
 *
 * See:
 * - VdsAxis: https://github.com/equinor/vds-slice/blob/ab6f39789bf3d3b59a8df14f1c4682d340dc0bf3/internal/core/core.go#L37-L55
 */
export type SeismicFenceData_api = {
    fence_traces_b64arr: B64FloatArray_api;
    /**
     * Num Traces
     */
    num_traces: number;
    /**
     * Num Samples Per Trace
     */
    num_samples_per_trace: number;
    /**
     * Min Fence Depth
     */
    min_fence_depth: number;
    /**
     * Max Fence Depth
     */
    max_fence_depth: number;
};

/**
 * SeismicFencePolyline
 *
 * (x, y) points defining a polyline in domain coordinate system, to retrieve fence of seismic data.
 *
 * Expect equal number of x- and y-points.
 *
 * Note: Coordinates are in domain coordinate system (UTM).
 *
 * NOTE:
 * - Verify coordinates are in domain coordinate system (UTM)?
 * - Consider points_xy: List[float] - i.e. array with [x1, y1, x2, y2, ..., xn, yn] instead of x_points and y_points arrays?
 * - Ensure equal length of x_points and y_points arrays?
 */
export type SeismicFencePolyline_api = {
    /**
     * X Points
     */
    x_points: Array<number>;
    /**
     * Y Points
     */
    y_points: Array<number>;
};

/**
 * SeismicSliceData
 *
 * Definition of a seismic slice from a seismic cube. This could be an inline, crossline, or depth slice.
 * u and v axes are the respective domain coordinate system axes, and the slice traces are the seismic data values.
 * The SeismicCubeMeta specification object (not part of this schema) provides a transformation matrix for converting
 * the slice data from its own coordinate system (u,v) to the global coordinate system.
 *
 * `Properties:`
 * - `slice_traces_b64arr`: The slice trace array is base64 encoded 1D float array - where data is stored trace by trace.
 * - `bbox_utm`: The bounding box of the slice in UTM coordinates.
 * - `u_min`: The minimum value of the u-axis.
 * - `u_max`: The maximum value of the u-axis.
 * - `u_num_samples`: The number of samples along the u-axis.
 * - `u_unit`: The unit of the u-axis.
 * - `v_min`: The minimum value of the v-axis.
 * - `v_max`: The maximum value of the v-axis.
 * - `v_num_samples`: The number of samples along the v-axis.
 * - `v_unit`: The unit of the v-axis.
 * - `value_min`: The minimum value of the seismic data values.
 * - `value_max`: The maximum value of the seismic data values.
 *
 * Fence traces 1D array: [trace_1_sample_1, trace_1_sample_2, ..., trace_1_sample_n, ..., trace_m_sample_1, trace_m_sample_2, ..., trace_m_sample_n]
 */
export type SeismicSliceData_api = {
    slice_traces_b64arr: B64FloatArray_api;
    /**
     * Bbox Utm
     */
    bbox_utm: Array<Array<number>>;
    /**
     * U Min
     */
    u_min: number;
    /**
     * U Max
     */
    u_max: number;
    /**
     * U Num Samples
     */
    u_num_samples: number;
    /**
     * U Unit
     */
    u_unit: string;
    /**
     * V Min
     */
    v_min: number;
    /**
     * V Max
     */
    v_max: number;
    /**
     * V Num Samples
     */
    v_num_samples: number;
    /**
     * V Unit
     */
    v_unit: string;
    /**
     * Value Min
     */
    value_min: number;
    /**
     * Value Max
     */
    value_max: number;
};

/**
 * SensitivityType
 */
export enum SensitivityType_api {
    MONTECARLO = "montecarlo",
    SCENARIO = "scenario",
}

/**
 * StatisticFunction
 */
export enum StatisticFunction_api {
    MEAN = "MEAN",
    MIN = "MIN",
    MAX = "MAX",
    P10 = "P10",
    P90 = "P90",
    P50 = "P50",
}

/**
 * StatisticValueObject
 */
export type StatisticValueObject_api = {
    statisticFunction: StatisticFunction_api;
    /**
     * Values
     */
    values: Array<number>;
};

/**
 * StratigraphicColumn
 *
 * Stratigraphic column from SMDA
 */
export type StratigraphicColumn_api = {
    /**
     * Identifier
     */
    identifier: string;
    /**
     * Areatype
     */
    areaType: string;
    /**
     * Status
     */
    status: string;
    /**
     * Type
     */
    type: string | null;
};

/**
 * StratigraphicUnit
 *
 * Stratigraphic unit from SMDA
 *
 * Camel case attributes needed for esvIntersection component in front-end
 */
export type StratigraphicUnit_api = {
    /**
     * Identifier
     */
    identifier: string;
    /**
     * Top
     */
    top: string;
    /**
     * Base
     */
    base: string;
    /**
     * Stratunitlevel
     */
    stratUnitLevel: number;
    /**
     * Stratunittype
     */
    stratUnitType: string;
    /**
     * Topage
     */
    topAge: number | number;
    /**
     * Baseage
     */
    baseAge: number | number;
    /**
     * Stratunitparent
     */
    stratUnitParent: string | null;
    /**
     * Colorr
     */
    colorR: number;
    /**
     * Colorg
     */
    colorG: number;
    /**
     * Colorb
     */
    colorB: number;
    /**
     * Lithologytype
     */
    lithologyType?: number | number | string;
};

/**
 * SummaryVectorDateObservation
 *
 * A single observation of a summary vector at a specific date.
 */
export type SummaryVectorDateObservation_api = {
    /**
     * Date
     */
    date: string;
    /**
     * Comment
     */
    comment?: string | null;
    /**
     * Value
     */
    value: number;
    /**
     * Error
     */
    error: number;
    /**
     * Label
     */
    label: string;
};

/**
 * SummaryVectorObservations
 *
 * A collection of observations of a summary vector.
 */
export type SummaryVectorObservations_api = {
    /**
     * Vector Name
     */
    vector_name: string;
    /**
     * Comment
     */
    comment?: string | null;
    /**
     * Observations
     */
    observations: Array<SummaryVectorDateObservation_api>;
};

/**
 * SurfaceAttributeType
 *
 * A surface has a single array with values, e.g. depth, time, property, seismic, thickness.
 * Only surfaces with depth and time have z-values that can be plotted in 3D.
 * The other attributes are scalar values that can be plotted in 2D or used as colormapping for 3D surfaces.
 *
 * Ideally if the attribute is a scalar, there should be corresponding z-values, but this information is not
 * available in the metadata.
 *
 * To be revisited later when the metadata is more mature.
 */
export enum SurfaceAttributeType_api {
    DEPTH = "depth",
    FACIES_THICKNESS = "facies_thickness",
    FLUID_CONTACT = "fluid_contact",
    PINCHOUT = "pinchout",
    PROPERTY = "property",
    SEISMIC = "seismic",
    SUBCROP = "subcrop",
    THICKNESS = "thickness",
    TIME = "time",
    VELOCITY = "velocity",
    VOLUMES = "volumes",
    UNKNOWN = "UNKNOWN",
}

/**
 * SurfaceDataFloat
 */
export type SurfaceDataFloat_api = {
    /**
     * Format
     */
    format?: "float";
    surface_def: SurfaceDef_api;
    transformed_bbox_utm: BoundingBox2D_api;
    /**
     * Value Min
     */
    value_min: number;
    /**
     * Value Max
     */
    value_max: number;
    values_b64arr: B64FloatArray_api;
};

/**
 * SurfaceDataPng
 */
export type SurfaceDataPng_api = {
    /**
     * Format
     */
    format?: "png";
    surface_def: SurfaceDef_api;
    transformed_bbox_utm: BoundingBox2D_api;
    /**
     * Value Min
     */
    value_min: number;
    /**
     * Value Max
     */
    value_max: number;
    /**
     * Png Image Base64
     */
    png_image_base64: string;
};

/**
 * SurfaceDef
 */
export type SurfaceDef_api = {
    /**
     * Npoints X
     */
    npoints_x: number;
    /**
     * Npoints Y
     */
    npoints_y: number;
    /**
     * Inc X
     */
    inc_x: number;
    /**
     * Inc Y
     */
    inc_y: number;
    /**
     * Origin Utm X
     */
    origin_utm_x: number;
    /**
     * Origin Utm Y
     */
    origin_utm_y: number;
    /**
     * Rot Deg
     */
    rot_deg: number;
};

/**
 * SurfaceIntersectionCumulativeLengthPolyline
 *
 * (x, y) points defining a polyline in domain coordinate system, to retrieve intersection of a surface, with a cumulative length
 * between at each (x, y)-point coordinates in domain coordinate system.
 *
 * Expect equal number of x- and y-points.
 *
 * x_points: X-coordinates of polyline points.
 * y_points: Y-coordinates of polyline points.
 * cum_lengths: Cumulative lengths of the polyline segments, i.e. the length of the polyline up to each (x,y) point.
 *
 * The cumulative lengths can be e.g. measured depth along a well path.
 *
 * Note: Coordinates are in domain coordinate system (UTM)
 *
 * Note: Verify if cum_lengths is necessary with respect to xtgeo
 */
export type SurfaceIntersectionCumulativeLengthPolyline_api = {
    /**
     * X Points
     */
    x_points: Array<number>;
    /**
     * Y Points
     */
    y_points: Array<number>;
    /**
     * Cum Lengths
     */
    cum_lengths: Array<number>;
};

/**
 * SurfaceIntersectionData
 *
 * Definition of a surface intersection made from a set of (x, y) coordinates.
 *
 * name: Name of the surface
 * z_points: Array of z-points (depth values) at the intersection points, i.e. depth value for each (x,y) point.
 * cum_lengths: Cumulative length values at the intersection points, i.e. accumulated length between each element in the z points.
 */
export type SurfaceIntersectionData_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Z Points
     */
    z_points: Array<number>;
    /**
     * Cum Lengths
     */
    cum_lengths: Array<number>;
};

/**
 * SurfaceMeta
 */
export type SurfaceMeta_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Name Is Stratigraphic Offical
     */
    name_is_stratigraphic_offical: boolean;
    /**
     * Attribute Name
     */
    attribute_name: string;
    attribute_type: SurfaceAttributeType_api;
    time_type: SurfaceTimeType_api;
    /**
     * Is Observation
     */
    is_observation: boolean;
    /**
     * Value Min
     */
    value_min: number | null;
    /**
     * Value Max
     */
    value_max: number | null;
};

/**
 * SurfaceMetaSet
 */
export type SurfaceMetaSet_api = {
    /**
     * Surfaces
     */
    surfaces: Array<SurfaceMeta_api>;
    /**
     * Time Points Iso Str
     */
    time_points_iso_str: Array<string>;
    /**
     * Time Intervals Iso Str
     */
    time_intervals_iso_str: Array<string>;
    /**
     * Surface Names In Strat Order
     */
    surface_names_in_strat_order: Array<string>;
};

/**
 * SurfaceRealizationSampleValues
 */
export type SurfaceRealizationSampleValues_api = {
    /**
     * Realization
     */
    realization: number;
    /**
     * Sampled Values
     */
    sampled_values: Array<number>;
};

/**
 * SurfaceStatisticFunction
 */
export enum SurfaceStatisticFunction_api {
    MEAN = "MEAN",
    STD = "STD",
    MIN = "MIN",
    MAX = "MAX",
    P10 = "P10",
    P90 = "P90",
    P50 = "P50",
}

/**
 * SurfaceTimeType
 */
export enum SurfaceTimeType_api {
    NO_TIME = "NO_TIME",
    TIME_POINT = "TIME_POINT",
    INTERVAL = "INTERVAL",
}

/**
 * THP
 */
export enum THP_api {
    THP = "THP",
}

/**
 * TabType
 */
export enum TabType_api {
    BHP = "BHP",
    TEMP = "TEMP",
}

/**
 * TableColumnData
 *
 * Data for a single column in a volumetric table
 *
 * Length of column values should be equal to the number of rows in the table
 */
export type TableColumnData_api = {
    /**
     * Columnname
     */
    columnName: string;
    /**
     * Columnvalues
     */
    columnValues: Array<number>;
};

/**
 * TableColumnStatisticalData
 *
 * Statistical data for a single result column in a volumetric table
 *
 * Length of column values should be equal to the number of rows in the table
 */
export type TableColumnStatisticalData_api = {
    /**
     * Columnname
     */
    columnName: string;
    /**
     * Statisticvalues
     */
    statisticValues: {
        [key in InplaceVolumesStatistic_api]?: Array<number>;
    };
};

/**
 * UnitType
 */
export enum UnitType_api {
    METRIC = "METRIC",
    FIELD = "FIELD",
    LAB = "LAB",
    PVT_M = "PVT-M",
    DEFAULT = "DEFAULT",
}

/**
 * UserInfo
 */
export type UserInfo_api = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Username
     */
    username: string;
    /**
     * Display Name
     */
    display_name?: string | null;
    /**
     * Avatar B64Str
     */
    avatar_b64str?: string | null;
    /**
     * Has Sumo Access
     */
    has_sumo_access: boolean;
    /**
     * Has Smda Access
     */
    has_smda_access: boolean;
};

/**
 * ValidationError
 */
export type ValidationError_api = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VectorDescription
 */
export type VectorDescription_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Descriptivename
     */
    descriptiveName: string;
    /**
     * Hashistorical
     */
    hasHistorical: boolean;
    derivedVectorInfo?: DerivedVectorInfo_api | null;
};

/**
 * VectorHistoricalData
 */
export type VectorHistoricalData_api = {
    /**
     * Timestampsutcms
     */
    timestampsUtcMs: Array<number>;
    /**
     * Values
     */
    values: Array<number>;
    /**
     * Unit
     */
    unit: string;
    /**
     * Israte
     */
    isRate: boolean;
};

/**
 * VectorRealizationData
 */
export type VectorRealizationData_api = {
    /**
     * Realization
     */
    realization: number;
    /**
     * Timestampsutcms
     */
    timestampsUtcMs: Array<number>;
    /**
     * Values
     */
    values: Array<number>;
    /**
     * Unit
     */
    unit: string;
    /**
     * Israte
     */
    isRate: boolean;
    derivedVectorInfo?: DerivedVectorInfo_api | null;
};

/**
 * VectorStatisticData
 */
export type VectorStatisticData_api = {
    /**
     * Realizations
     */
    realizations: Array<number>;
    /**
     * Timestampsutcms
     */
    timestampsUtcMs: Array<number>;
    /**
     * Valueobjects
     */
    valueObjects: Array<StatisticValueObject_api>;
    /**
     * Unit
     */
    unit: string;
    /**
     * Israte
     */
    isRate: boolean;
    derivedVectorInfo?: DerivedVectorInfo_api | null;
};

/**
 * VectorStatisticSensitivityData
 */
export type VectorStatisticSensitivityData_api = {
    /**
     * Realizations
     */
    realizations: Array<number>;
    /**
     * Timestampsutcms
     */
    timestampsUtcMs: Array<number>;
    /**
     * Valueobjects
     */
    valueObjects: Array<StatisticValueObject_api>;
    /**
     * Unit
     */
    unit: string;
    /**
     * Israte
     */
    isRate: boolean;
    /**
     * Sensitivityname
     */
    sensitivityName: string;
    /**
     * Sensitivitycase
     */
    sensitivityCase: string;
};

/**
 * VfpInjTable
 */
export type VfpInjTable_api = {
    /**
     * Vfptype
     */
    vfpType?: "INJ";
    /**
     * Tablenumber
     */
    tableNumber: number;
    /**
     * Datum
     */
    datum: number;
    flowRateType: FlowRateType_api;
    unitType: UnitType_api;
    tabType: TabType_api;
    /**
     * Thpvalues
     */
    thpValues: Array<number>;
    /**
     * Flowratevalues
     */
    flowRateValues: Array<number>;
    /**
     * Bhpvalues
     */
    bhpValues: Array<number>;
    /**
     * Flowrateunit
     */
    flowRateUnit: string;
    /**
     * Thpunit
     */
    thpUnit: string;
    /**
     * Bhpunit
     */
    bhpUnit: string;
};

/**
 * VfpProdTable
 */
export type VfpProdTable_api = {
    /**
     * Vfptype
     */
    vfpType?: "PROD";
    /**
     * Tablenumber
     */
    tableNumber: number;
    /**
     * Datum
     */
    datum: number;
    flowRateType: FlowRateType_api;
    unitType: UnitType_api;
    tabType: TabType_api;
    /**
     * Thpvalues
     */
    thpValues: Array<number>;
    /**
     * Flowratevalues
     */
    flowRateValues: Array<number>;
    /**
     * Bhpvalues
     */
    bhpValues: Array<number>;
    /**
     * Flowrateunit
     */
    flowRateUnit: string;
    /**
     * Thpunit
     */
    thpUnit: string;
    /**
     * Bhpunit
     */
    bhpUnit: string;
    thpType: THP_api;
    wfrType: WFR_api;
    gfrType: GFR_api;
    alqType: ALQ_api;
    /**
     * Wfrvalues
     */
    wfrValues: Array<number>;
    /**
     * Gfrvalues
     */
    gfrValues: Array<number>;
    /**
     * Alqvalues
     */
    alqValues: Array<number>;
    /**
     * Wfrunit
     */
    wfrUnit: string;
    /**
     * Gfrunit
     */
    gfrUnit: string;
    /**
     * Alqunit
     */
    alqUnit: string;
};

/**
 * WFR
 */
export enum WFR_api {
    WOR = "WOR",
    WCT = "WCT",
    WGR = "WGR",
    WWR = "WWR",
    WTF = "WTF",
}

/**
 * WellCompletionsData
 *
 * Type definition for well completions data
 */
export type WellCompletionsData_api = {
    /**
     * Version
     */
    version: string;
    units: WellCompletionsUnits_api;
    /**
     * Zones
     */
    zones: Array<WellCompletionsZone_api>;
    /**
     * Sortedcompletiondates
     */
    sortedCompletionDates: Array<string>;
    /**
     * Wells
     */
    wells: Array<WellCompletionsWell_api>;
};

/**
 * WellCompletionsUnitInfo
 */
export type WellCompletionsUnitInfo_api = {
    /**
     * Unit
     */
    unit: string;
    /**
     * Decimalplaces
     */
    decimalPlaces: number;
};

/**
 * WellCompletionsUnits
 */
export type WellCompletionsUnits_api = {
    kh: WellCompletionsUnitInfo_api;
};

/**
 * WellCompletionsWell
 */
export type WellCompletionsWell_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Attributes
     */
    attributes: {
        [key: string]: string | number | boolean;
    };
    /**
     * Completions
     */
    completions: {
        [key: string]: Completions_api;
    };
};

/**
 * WellCompletionsZone
 */
export type WellCompletionsZone_api = {
    /**
     * Name
     */
    name: string;
    /**
     * Subzones
     */
    subzones?: Array<WellCompletionsZone_api> | null;
};

/**
 * WellLogCurveSourceEnum
 */
export enum WellLogCurveSourceEnum_api {
    SSDL_WELL_LOG = "ssdl.well_log",
    SMDA_GEOLOGY = "smda.geology",
    SMDA_STRATIGRAPHY = "smda.stratigraphy",
    SMDA_SURVEY = "smda.survey",
}

/**
 * WellLogCurveTypeEnum
 */
export enum WellLogCurveTypeEnum_api {
    CONTINUOUS = "continuous",
    DISCRETE = "discrete",
    FLAG = "flag",
}

/**
 * WellboreCasing
 */
export type WellboreCasing_api = {
    /**
     * Itemtype
     */
    itemType: string;
    /**
     * Diameternumeric
     */
    diameterNumeric: number;
    /**
     * Diameterinner
     */
    diameterInner: number;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Remark
     */
    remark?: string | null;
    /**
     * Depthtopmd
     */
    depthTopMd: number;
    /**
     * Depthbottommd
     */
    depthBottomMd: number;
    /**
     * Totaldepthmd
     */
    totalDepthMd: number;
    /**
     * Startdepth
     */
    startDepth: number;
    /**
     * Enddepth
     */
    endDepth: number;
};

/**
 * WellboreCompletion
 */
export type WellboreCompletion_api = {
    /**
     * Mdtop
     */
    mdTop: number;
    /**
     * Mdbottom
     */
    mdBottom: number;
    /**
     * Tvdtop
     */
    tvdTop: number | null;
    /**
     * Tvdbottom
     */
    tvdBottom: number | null;
    /**
     * Description
     */
    description: string | null;
    /**
     * Symbolname
     */
    symbolName: string | null;
    /**
     * Comment
     */
    comment: string | null;
};

/**
 * WellboreHeader
 */
export type WellboreHeader_api = {
    /**
     * Wellboreuuid
     */
    wellboreUuid: string;
    /**
     * Uniquewellboreidentifier
     */
    uniqueWellboreIdentifier: string;
    /**
     * Welluuid
     */
    wellUuid: string;
    /**
     * Uniquewellidentifier
     */
    uniqueWellIdentifier: string;
    /**
     * Welleasting
     */
    wellEasting: number;
    /**
     * Wellnorthing
     */
    wellNorthing: number;
    /**
     * Depthreferencepoint
     */
    depthReferencePoint: string;
    /**
     * Depthreferenceelevation
     */
    depthReferenceElevation: number;
    /**
     * Wellborepurpose
     */
    wellborePurpose: string;
    /**
     * Wellborestatus
     */
    wellboreStatus: string;
};

/**
 * WellboreLogCurveData
 */
export type WellboreLogCurveData_api = {
    source: WellLogCurveSourceEnum_api;
    /**
     * Name
     */
    name: string;
    /**
     * Logname
     */
    logName: string;
    /**
     * Indexmin
     */
    indexMin: number;
    /**
     * Indexmax
     */
    indexMax: number;
    /**
     * Mincurvevalue
     */
    minCurveValue: number | null;
    /**
     * Maxcurvevalue
     */
    maxCurveValue: number | null;
    /**
     * Curvealias
     */
    curveAlias: string | null;
    /**
     * Curvedescription
     */
    curveDescription: string | null;
    /**
     * Indexunit
     */
    indexUnit: string;
    /**
     * Nodatavalue
     */
    noDataValue: number | null;
    /**
     * Unit
     */
    unit: string | null;
    /**
     * Curveunitdesc
     */
    curveUnitDesc: string | null;
    /**
     * Datapoints
     */
    dataPoints: Array<[number, number | string | null]>;
    /**
     * Discretevaluemetadata
     */
    discreteValueMetadata: Array<DiscreteValueMetadata_api> | null;
};

/**
 * WellboreLogCurveHeader
 */
export type WellboreLogCurveHeader_api = {
    source: WellLogCurveSourceEnum_api;
    curveType: WellLogCurveTypeEnum_api;
    /**
     * Logname
     */
    logName: string;
    /**
     * Curvename
     */
    curveName: string;
    /**
     * Curveunit
     */
    curveUnit: string | null;
};

/**
 * WellborePerforation
 */
export type WellborePerforation_api = {
    /**
     * Mdtop
     */
    mdTop: number;
    /**
     * Mdbottom
     */
    mdBottom: number;
    /**
     * Tvdtop
     */
    tvdTop: number;
    /**
     * Tvdbottom
     */
    tvdBottom: number;
    /**
     * Status
     */
    status: string;
    /**
     * Completionmode
     */
    completionMode: string;
};

/**
 * WellborePick
 *
 * Wellbore pick from SMDA
 *
 * Camel case attributes needed for esvIntersection component in front-end
 */
export type WellborePick_api = {
    /**
     * Northing
     */
    northing: number;
    /**
     * Easting
     */
    easting: number;
    /**
     * Tvd
     */
    tvd: number;
    /**
     * Tvdmsl
     */
    tvdMsl: number;
    /**
     * Md
     */
    md: number;
    /**
     * Mdmsl
     */
    mdMsl: number;
    /**
     * Uniquewellboreidentifier
     */
    uniqueWellboreIdentifier: string;
    /**
     * Wellboreuuid
     */
    wellboreUuid: string;
    /**
     * Pickidentifier
     */
    pickIdentifier: string;
    /**
     * Confidence
     */
    confidence?: string | null;
    /**
     * Depthreferencepoint
     */
    depthReferencePoint: string;
    /**
     * Mdunit
     */
    mdUnit: string;
    /**
     * Interpreter
     */
    interpreter: string | null;
    /**
     * Obsno
     */
    obsNo: number;
};

/**
 * WellboreTrajectory
 */
export type WellboreTrajectory_api = {
    /**
     * Wellboreuuid
     */
    wellboreUuid: string;
    /**
     * Uniquewellboreidentifier
     */
    uniqueWellboreIdentifier: string;
    /**
     * Tvdmslarr
     */
    tvdMslArr: Array<number>;
    /**
     * Mdarr
     */
    mdArr: Array<number>;
    /**
     * Eastingarr
     */
    eastingArr: Array<number>;
    /**
     * Northingarr
     */
    northingArr: Array<number>;
};

export type GetFieldsData_api = {
    body?: never;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/fields";
};

export type GetFieldsResponses_api = {
    /**
     * Response Get Fields
     *
     * Successful Response
     */
    200: Array<FieldInfo_api>;
};

export type getFieldsResponse = GetFieldsResponses_api[keyof GetFieldsResponses_api];

export type GetCasesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Field Identifier
         *
         * Field identifier
         */
        field_identifier: string;
        zCacheBust?: string;
    };
    url: "/cases";
};

export type GetCasesError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getCasesError = GetCasesError_api[keyof GetCasesError_api];

export type GetCasesResponses_api = {
    /**
     * Response Get Cases
     *
     * Successful Response
     */
    200: Array<CaseInfo_api>;
};

export type getCasesResponse = GetCasesResponses_api[keyof GetCasesResponses_api];

export type GetEnsembleDetailsData_api = {
    body?: never;
    path: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
    };
    query?: {
        zCacheBust?: string;
    };
    url: "/cases/{case_uuid}/ensembles/{ensemble_name}";
};

export type GetEnsembleDetailsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getEnsembleDetailsError = GetEnsembleDetailsError_api[keyof GetEnsembleDetailsError_api];

export type GetEnsembleDetailsResponses_api = {
    /**
     * Successful Response
     */
    200: EnsembleDetails_api;
};

export type getEnsembleDetailsResponse = GetEnsembleDetailsResponses_api[keyof GetEnsembleDetailsResponses_api];

export type PostRefreshFingerprintsForEnsemblesData_api = {
    /**
     * Ensemble Idents
     *
     * Ensembles to refresh and get fingerprints for, specified as pairs of caseUuid,ensembleName
     */
    body: Array<EnsembleIdent_api>;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/ensembles/refresh_fingerprints";
};

export type PostRefreshFingerprintsForEnsemblesError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postRefreshFingerprintsForEnsemblesError =
    PostRefreshFingerprintsForEnsemblesError_api[keyof PostRefreshFingerprintsForEnsemblesError_api];

export type PostRefreshFingerprintsForEnsemblesResponses_api = {
    /**
     * Response Post Refresh Fingerprints For Ensembles
     *
     * Successful Response
     */
    200: Array<string | null>;
};

export type postRefreshFingerprintsForEnsemblesResponse =
    PostRefreshFingerprintsForEnsemblesResponses_api[keyof PostRefreshFingerprintsForEnsemblesResponses_api];

export type GetVectorListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Include Derived Vectors
         *
         * Include derived vectors
         */
        include_derived_vectors?: boolean | null;
        zCacheBust?: string;
    };
    url: "/timeseries/vector_list/";
};

export type GetVectorListError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getVectorListError = GetVectorListError_api[keyof GetVectorListError_api];

export type GetVectorListResponses_api = {
    /**
     * Response Get Vector List
     *
     * Successful Response
     */
    200: Array<VectorDescription_api>;
};

export type getVectorListResponse = GetVectorListResponses_api[keyof GetVectorListResponses_api];

export type GetDeltaEnsembleVectorListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Comparison Case Uuid
         *
         * Sumo case uuid for comparison ensemble
         */
        comparison_case_uuid: string;
        /**
         * Comparison Ensemble Name
         *
         * Comparison ensemble name
         */
        comparison_ensemble_name: string;
        /**
         * Reference Case Uuid
         *
         * Sumo case uuid for reference ensemble
         */
        reference_case_uuid: string;
        /**
         * Reference Ensemble Name
         *
         * Reference ensemble name
         */
        reference_ensemble_name: string;
        /**
         * Include Derived Vectors
         *
         * Include derived vectors
         */
        include_derived_vectors?: boolean | null;
        zCacheBust?: string;
    };
    url: "/timeseries/delta_ensemble_vector_list/";
};

export type GetDeltaEnsembleVectorListError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getDeltaEnsembleVectorListError =
    GetDeltaEnsembleVectorListError_api[keyof GetDeltaEnsembleVectorListError_api];

export type GetDeltaEnsembleVectorListResponses_api = {
    /**
     * Response Get Delta Ensemble Vector List
     *
     * Successful Response
     */
    200: Array<VectorDescription_api>;
};

export type getDeltaEnsembleVectorListResponse =
    GetDeltaEnsembleVectorListResponses_api[keyof GetDeltaEnsembleVectorListResponses_api];

export type GetRealizationsVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Vector Name
         *
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling Frequency
         *
         * Resampling frequency. If not specified, raw data without resampling wil be returned.
         */
        resampling_frequency?: Frequency_api | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/timeseries/realizations_vector_data/";
};

export type GetRealizationsVectorDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getRealizationsVectorDataError =
    GetRealizationsVectorDataError_api[keyof GetRealizationsVectorDataError_api];

export type GetRealizationsVectorDataResponses_api = {
    /**
     * Response Get Realizations Vector Data
     *
     * Successful Response
     */
    200: Array<VectorRealizationData_api>;
};

export type getRealizationsVectorDataResponse =
    GetRealizationsVectorDataResponses_api[keyof GetRealizationsVectorDataResponses_api];

export type GetDeltaEnsembleRealizationsVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Comparison Case Uuid
         *
         * Sumo case uuid for comparison ensemble
         */
        comparison_case_uuid: string;
        /**
         * Comparison Ensemble Name
         *
         * Comparison ensemble name
         */
        comparison_ensemble_name: string;
        /**
         * Reference Case Uuid
         *
         * Sumo case uuid for reference ensemble
         */
        reference_case_uuid: string;
        /**
         * Reference Ensemble Name
         *
         * Reference ensemble name
         */
        reference_ensemble_name: string;
        /**
         * Vector Name
         *
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/timeseries/delta_ensemble_realizations_vector_data/";
};

export type GetDeltaEnsembleRealizationsVectorDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getDeltaEnsembleRealizationsVectorDataError =
    GetDeltaEnsembleRealizationsVectorDataError_api[keyof GetDeltaEnsembleRealizationsVectorDataError_api];

export type GetDeltaEnsembleRealizationsVectorDataResponses_api = {
    /**
     * Response Get Delta Ensemble Realizations Vector Data
     *
     * Successful Response
     */
    200: Array<VectorRealizationData_api>;
};

export type getDeltaEnsembleRealizationsVectorDataResponse =
    GetDeltaEnsembleRealizationsVectorDataResponses_api[keyof GetDeltaEnsembleRealizationsVectorDataResponses_api];

export type GetTimestampsListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Resampling Frequency
         *
         * Resampling frequency
         */
        resampling_frequency?: Frequency_api | null;
        zCacheBust?: string;
    };
    url: "/timeseries/timestamps_list/";
};

export type GetTimestampsListError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getTimestampsListError = GetTimestampsListError_api[keyof GetTimestampsListError_api];

export type GetTimestampsListResponses_api = {
    /**
     * Response Get Timestamps List
     *
     * Successful Response
     */
    200: Array<number>;
};

export type getTimestampsListResponse = GetTimestampsListResponses_api[keyof GetTimestampsListResponses_api];

export type GetHistoricalVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Non Historical Vector Name
         *
         * Name of the non-historical vector
         */
        non_historical_vector_name: string;
        /**
         * Resampling Frequency
         *
         * Resampling frequency
         */
        resampling_frequency?: Frequency_api | null;
        zCacheBust?: string;
    };
    url: "/timeseries/historical_vector_data/";
};

export type GetHistoricalVectorDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getHistoricalVectorDataError = GetHistoricalVectorDataError_api[keyof GetHistoricalVectorDataError_api];

export type GetHistoricalVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: VectorHistoricalData_api;
};

export type getHistoricalVectorDataResponse =
    GetHistoricalVectorDataResponses_api[keyof GetHistoricalVectorDataResponses_api];

export type GetStatisticalVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Vector Name
         *
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Statistic Functions
         *
         * Optional list of statistics to calculate. If not specified, all statistics will be calculated.
         */
        statistic_functions?: Array<StatisticFunction_api> | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/timeseries/statistical_vector_data/";
};

export type GetStatisticalVectorDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getStatisticalVectorDataError = GetStatisticalVectorDataError_api[keyof GetStatisticalVectorDataError_api];

export type GetStatisticalVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: VectorStatisticData_api;
};

export type getStatisticalVectorDataResponse =
    GetStatisticalVectorDataResponses_api[keyof GetStatisticalVectorDataResponses_api];

export type GetDeltaEnsembleStatisticalVectorDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Comparison Case Uuid
         *
         * Sumo case uuid for comparison ensemble
         */
        comparison_case_uuid: string;
        /**
         * Comparison Ensemble Name
         *
         * Comparison ensemble name
         */
        comparison_ensemble_name: string;
        /**
         * Reference Case Uuid
         *
         * Sumo case uuid for reference ensemble
         */
        reference_case_uuid: string;
        /**
         * Reference Ensemble Name
         *
         * Reference ensemble name
         */
        reference_ensemble_name: string;
        /**
         * Vector Name
         *
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Statistic Functions
         *
         * Optional list of statistics to calculate. If not specified, all statistics will be calculated.
         */
        statistic_functions?: Array<StatisticFunction_api> | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/timeseries/delta_ensemble_statistical_vector_data/";
};

export type GetDeltaEnsembleStatisticalVectorDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getDeltaEnsembleStatisticalVectorDataError =
    GetDeltaEnsembleStatisticalVectorDataError_api[keyof GetDeltaEnsembleStatisticalVectorDataError_api];

export type GetDeltaEnsembleStatisticalVectorDataResponses_api = {
    /**
     * Successful Response
     */
    200: VectorStatisticData_api;
};

export type getDeltaEnsembleStatisticalVectorDataResponse =
    GetDeltaEnsembleStatisticalVectorDataResponses_api[keyof GetDeltaEnsembleStatisticalVectorDataResponses_api];

export type GetStatisticalVectorDataPerSensitivityData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Vector Name
         *
         * Name of the vector
         */
        vector_name: string;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Statistic Functions
         *
         * Optional list of statistics to calculate. If not specified, all statistics will be calculated.
         */
        statistic_functions?: Array<StatisticFunction_api> | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/timeseries/statistical_vector_data_per_sensitivity/";
};

export type GetStatisticalVectorDataPerSensitivityError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getStatisticalVectorDataPerSensitivityError =
    GetStatisticalVectorDataPerSensitivityError_api[keyof GetStatisticalVectorDataPerSensitivityError_api];

export type GetStatisticalVectorDataPerSensitivityResponses_api = {
    /**
     * Response Get Statistical Vector Data Per Sensitivity
     *
     * Successful Response
     */
    200: Array<VectorStatisticSensitivityData_api>;
};

export type getStatisticalVectorDataPerSensitivityResponse =
    GetStatisticalVectorDataPerSensitivityResponses_api[keyof GetStatisticalVectorDataPerSensitivityResponses_api];

export type GetRealizationVectorAtTimestampData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Vector Name
         *
         * Name of the vector
         */
        vector_name: string;
        /**
         * Timestamp Utc Ms
         *
         * Timestamp in ms UTC to query vectors at
         */
        timestamp_utc_ms: number;
        zCacheBust?: string;
    };
    url: "/timeseries/realization_vector_at_timestamp/";
};

export type GetRealizationVectorAtTimestampError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getRealizationVectorAtTimestampError =
    GetRealizationVectorAtTimestampError_api[keyof GetRealizationVectorAtTimestampError_api];

export type GetRealizationVectorAtTimestampResponses_api = {
    /**
     * Successful Response
     */
    200: EnsembleScalarResponse_api;
};

export type getRealizationVectorAtTimestampResponse =
    GetRealizationVectorAtTimestampResponses_api[keyof GetRealizationVectorAtTimestampResponses_api];

export type GetTableDefinitionsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/inplace_volumes/table_definitions/";
};

export type GetTableDefinitionsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getTableDefinitionsError = GetTableDefinitionsError_api[keyof GetTableDefinitionsError_api];

export type GetTableDefinitionsResponses_api = {
    /**
     * Response Get Table Definitions
     *
     * Successful Response
     */
    200: Array<InplaceVolumesTableDefinition_api>;
};

export type getTableDefinitionsResponse = GetTableDefinitionsResponses_api[keyof GetTableDefinitionsResponses_api];

export type PostGetAggregatedPerRealizationTableDataData_api = {
    body: BodyPostGetAggregatedPerRealizationTableData_api;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Table Name
         *
         * Table name
         */
        table_name: string;
        /**
         * Result Names
         *
         * The name of the inplace volumes results
         */
        result_names: Array<string>;
        /**
         * Group By Indices
         *
         * The indices to group table data by
         */
        group_by_indices?: Array<string> | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/inplace_volumes/get_aggregated_per_realization_table_data/";
};

export type PostGetAggregatedPerRealizationTableDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postGetAggregatedPerRealizationTableDataError =
    PostGetAggregatedPerRealizationTableDataError_api[keyof PostGetAggregatedPerRealizationTableDataError_api];

export type PostGetAggregatedPerRealizationTableDataResponses_api = {
    /**
     * Successful Response
     */
    200: InplaceVolumesTableDataPerFluidSelection_api;
};

export type postGetAggregatedPerRealizationTableDataResponse =
    PostGetAggregatedPerRealizationTableDataResponses_api[keyof PostGetAggregatedPerRealizationTableDataResponses_api];

export type PostGetAggregatedStatisticalTableDataData_api = {
    body: BodyPostGetAggregatedStatisticalTableData_api;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Table Name
         *
         * Table name
         */
        table_name: string;
        /**
         * Result Names
         *
         * The name of the inplace volumes results
         */
        result_names: Array<string>;
        /**
         * Group By Indices
         *
         * The indices to group table data by
         */
        group_by_indices?: Array<string> | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/inplace_volumes/get_aggregated_statistical_table_data/";
};

export type PostGetAggregatedStatisticalTableDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postGetAggregatedStatisticalTableDataError =
    PostGetAggregatedStatisticalTableDataError_api[keyof PostGetAggregatedStatisticalTableDataError_api];

export type PostGetAggregatedStatisticalTableDataResponses_api = {
    /**
     * Successful Response
     */
    200: InplaceVolumesStatisticalTableDataPerFluidSelection_api;
};

export type postGetAggregatedStatisticalTableDataResponse =
    PostGetAggregatedStatisticalTableDataResponses_api[keyof PostGetAggregatedStatisticalTableDataResponses_api];

export type GetRealizationSurfacesMetadataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/surface/realization_surfaces_metadata/";
};

export type GetRealizationSurfacesMetadataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getRealizationSurfacesMetadataError =
    GetRealizationSurfacesMetadataError_api[keyof GetRealizationSurfacesMetadataError_api];

export type GetRealizationSurfacesMetadataResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceMetaSet_api;
};

export type getRealizationSurfacesMetadataResponse =
    GetRealizationSurfacesMetadataResponses_api[keyof GetRealizationSurfacesMetadataResponses_api];

export type GetObservedSurfacesMetadataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        zCacheBust?: string;
    };
    url: "/surface/observed_surfaces_metadata/";
};

export type GetObservedSurfacesMetadataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getObservedSurfacesMetadataError =
    GetObservedSurfacesMetadataError_api[keyof GetObservedSurfacesMetadataError_api];

export type GetObservedSurfacesMetadataResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceMetaSet_api;
};

export type getObservedSurfacesMetadataResponse =
    GetObservedSurfacesMetadataResponses_api[keyof GetObservedSurfacesMetadataResponses_api];

export type GetSurfaceDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Surf Addr Str
         *
         * Surface address string, supported address types are *REAL*, *OBS* and *STAT*
         */
        surf_addr_str: string;
        /**
         * Data Format
         *
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Resample To Def Str
         *
         * Definition of the surface onto which the data should be resampled. *SurfaceDef* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
        zCacheBust?: string;
    };
    url: "/surface/surface_data";
};

export type GetSurfaceDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getSurfaceDataError = GetSurfaceDataError_api[keyof GetSurfaceDataError_api];

export type GetSurfaceDataResponses_api = {
    /**
     * Response Get Surface Data
     *
     * Successful Response
     */
    200: SurfaceDataFloat_api | SurfaceDataPng_api;
};

export type getSurfaceDataResponse = GetSurfaceDataResponses_api[keyof GetSurfaceDataResponses_api];

export type GetStatisticalSurfaceDataHybridData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Surf Addr Str
         *
         * Surface address string, supported address type is *STAT*
         */
        surf_addr_str: string;
        /**
         * Data Format
         *
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Resample To Def Str
         *
         * Definition of the surface onto which the data should be resampled. *SurfaceDef* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
        zCacheBust?: string;
    };
    url: "/surface/statistical_surface_data/hybrid";
};

export type GetStatisticalSurfaceDataHybridError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getStatisticalSurfaceDataHybridError =
    GetStatisticalSurfaceDataHybridError_api[keyof GetStatisticalSurfaceDataHybridError_api];

export type GetStatisticalSurfaceDataHybridResponses_api = {
    /**
     * Response Get Statistical Surface Data Hybrid
     *
     * Successful Response
     */
    200: LroSuccessRespUnionSurfaceDataFloatSurfaceDataPng_api | LroInProgressResp_api | LroFailureResp_api;
};

export type getStatisticalSurfaceDataHybridResponse =
    GetStatisticalSurfaceDataHybridResponses_api[keyof GetStatisticalSurfaceDataHybridResponses_api];

export type PostGetSurfaceIntersectionData_api = {
    body: BodyPostGetSurfaceIntersection_api;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Name
         *
         * Surface name
         */
        name: string;
        /**
         * Attribute
         *
         * Surface attribute
         */
        attribute: string;
        /**
         * Time Or Interval Str
         *
         * Time point or time interval string
         */
        time_or_interval_str?: string | null;
        zCacheBust?: string;
    };
    url: "/surface/get_surface_intersection";
};

export type PostGetSurfaceIntersectionError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postGetSurfaceIntersectionError =
    PostGetSurfaceIntersectionError_api[keyof PostGetSurfaceIntersectionError_api];

export type PostGetSurfaceIntersectionResponses_api = {
    /**
     * Successful Response
     */
    200: SurfaceIntersectionData_api;
};

export type postGetSurfaceIntersectionResponse =
    PostGetSurfaceIntersectionResponses_api[keyof PostGetSurfaceIntersectionResponses_api];

export type PostGetSampleSurfaceInPointsData_api = {
    body: BodyPostGetSampleSurfaceInPoints_api;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Surface Name
         *
         * Surface name
         */
        surface_name: string;
        /**
         * Surface Attribute
         *
         * Surface attribute
         */
        surface_attribute: string;
        /**
         * Realization Nums
         *
         * Realization numbers
         */
        realization_nums: Array<number>;
        zCacheBust?: string;
    };
    url: "/surface/get_sample_surface_in_points";
};

export type PostGetSampleSurfaceInPointsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postGetSampleSurfaceInPointsError =
    PostGetSampleSurfaceInPointsError_api[keyof PostGetSampleSurfaceInPointsError_api];

export type PostGetSampleSurfaceInPointsResponses_api = {
    /**
     * Response Post Get Sample Surface In Points
     *
     * Successful Response
     */
    200: Array<SurfaceRealizationSampleValues_api>;
};

export type postGetSampleSurfaceInPointsResponse =
    PostGetSampleSurfaceInPointsResponses_api[keyof PostGetSampleSurfaceInPointsResponses_api];

export type GetDeltaSurfaceDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Surf A Addr Str
         *
         * Address string of surface A, supported types: *REAL*, *OBS* and *STAT*
         */
        surf_a_addr_str: string;
        /**
         * Surf B Addr Str
         *
         * Address string of surface B, supported types: *REAL*, *OBS* and *STAT*
         */
        surf_b_addr_str: string;
        /**
         * Data Format
         *
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Resample To Def Str
         *
         * Definition of the surface onto which the data should be resampled. *SurfaceDef* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
        zCacheBust?: string;
    };
    url: "/surface/delta_surface_data";
};

export type GetDeltaSurfaceDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getDeltaSurfaceDataError = GetDeltaSurfaceDataError_api[keyof GetDeltaSurfaceDataError_api];

export type GetDeltaSurfaceDataResponses_api = {
    /**
     * Response Get Delta Surface Data
     *
     * Successful Response
     */
    200: Array<SurfaceDataFloat_api>;
};

export type getDeltaSurfaceDataResponse = GetDeltaSurfaceDataResponses_api[keyof GetDeltaSurfaceDataResponses_api];

export type GetMisfitSurfaceDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Obs Surf Addr Str
         *
         * Address of observed surface, only supported address type is *OBS*
         */
        obs_surf_addr_str: string;
        /**
         * Sim Surf Addr Str
         *
         * Address of simulated surface, supported type is *PARTIAL*
         */
        sim_surf_addr_str: string;
        /**
         * Statistic Functions
         *
         * Statistics to calculate
         */
        statistic_functions: Array<SurfaceStatisticFunction_api>;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        /**
         * Data Format
         *
         * Format of binary data in the response
         */
        data_format?: "float" | "png";
        /**
         * Resample To Def Str
         *
         * Definition of the surface onto which the data should be resampled. *SurfaceDef* object properties encoded as a `KeyValStr` string.
         */
        resample_to_def_str?: string | null;
        zCacheBust?: string;
    };
    url: "/surface/misfit_surface_data";
};

export type GetMisfitSurfaceDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getMisfitSurfaceDataError = GetMisfitSurfaceDataError_api[keyof GetMisfitSurfaceDataError_api];

export type GetMisfitSurfaceDataResponses_api = {
    /**
     * Response Get Misfit Surface Data
     *
     * Successful Response
     */
    200: Array<SurfaceDataFloat_api>;
};

export type getMisfitSurfaceDataResponse = GetMisfitSurfaceDataResponses_api[keyof GetMisfitSurfaceDataResponses_api];

export type DeprecatedGetStratigraphicUnitsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        zCacheBust?: string;
    };
    url: "/surface/deprecated_stratigraphic_units";
};

export type DeprecatedGetStratigraphicUnitsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type deprecatedGetStratigraphicUnitsError =
    DeprecatedGetStratigraphicUnitsError_api[keyof DeprecatedGetStratigraphicUnitsError_api];

export type DeprecatedGetStratigraphicUnitsResponses_api = {
    /**
     * Response Deprecated Get Stratigraphic Units
     *
     * Successful Response
     */
    200: Array<StratigraphicUnit_api>;
};

export type deprecatedGetStratigraphicUnitsResponse =
    DeprecatedGetStratigraphicUnitsResponses_api[keyof DeprecatedGetStratigraphicUnitsResponses_api];

export type GetStratigraphicUnitsForStratColumnData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Strat Column
         *
         * SMDA stratigraphic column identifier
         */
        strat_column: string;
        zCacheBust?: string;
    };
    url: "/surface/stratigraphic_units_for_strat_column";
};

export type GetStratigraphicUnitsForStratColumnError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getStratigraphicUnitsForStratColumnError =
    GetStratigraphicUnitsForStratColumnError_api[keyof GetStratigraphicUnitsForStratColumnError_api];

export type GetStratigraphicUnitsForStratColumnResponses_api = {
    /**
     * Response Get Stratigraphic Units For Strat Column
     *
     * Successful Response
     */
    200: Array<StratigraphicUnit_api>;
};

export type getStratigraphicUnitsForStratColumnResponse =
    GetStratigraphicUnitsForStratColumnResponses_api[keyof GetStratigraphicUnitsForStratColumnResponses_api];

export type GetParameterNamesAndDescriptionData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Exclude All Values Constant
         *
         * Exclude all parameters where all values are the same value
         */
        exclude_all_values_constant?: boolean;
        /**
         * Sort Order
         *
         * Sort order
         */
        sort_order?: "alphabetically" | "standard_deviation";
        zCacheBust?: string;
    };
    url: "/parameters/parameter_names_and_description/";
};

export type GetParameterNamesAndDescriptionError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getParameterNamesAndDescriptionError =
    GetParameterNamesAndDescriptionError_api[keyof GetParameterNamesAndDescriptionError_api];

export type GetParameterNamesAndDescriptionResponses_api = {
    /**
     * Response Get Parameter Names And Description
     *
     * Successful Response
     */
    200: Array<EnsembleParameterDescription_api>;
};

export type getParameterNamesAndDescriptionResponse =
    GetParameterNamesAndDescriptionResponses_api[keyof GetParameterNamesAndDescriptionResponses_api];

export type GetParameterData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Parameter Name
         *
         * Parameter name
         */
        parameter_name: string;
        zCacheBust?: string;
    };
    url: "/parameters/parameter/";
};

export type GetParameterError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getParameterError = GetParameterError_api[keyof GetParameterError_api];

export type GetParameterResponses_api = {
    /**
     * Response Get Parameter
     *
     * Successful Response
     */
    200: EnsembleParameter_api | null;
};

export type getParameterResponse = GetParameterResponses_api[keyof GetParameterResponses_api];

export type GetParametersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/parameters/parameters/";
};

export type GetParametersError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getParametersError = GetParametersError_api[keyof GetParametersError_api];

export type GetParametersResponses_api = {
    /**
     * Response Get Parameters
     *
     * Successful Response
     */
    200: Array<EnsembleParameter_api>;
};

export type getParametersResponse = GetParametersResponses_api[keyof GetParametersResponses_api];

export type GetIsSensitivityRunData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/parameters/is_sensitivity_run/";
};

export type GetIsSensitivityRunError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getIsSensitivityRunError = GetIsSensitivityRunError_api[keyof GetIsSensitivityRunError_api];

export type GetIsSensitivityRunResponses_api = {
    /**
     * Response Get Is Sensitivity Run
     *
     * Successful Response
     */
    200: boolean;
};

export type getIsSensitivityRunResponse = GetIsSensitivityRunResponses_api[keyof GetIsSensitivityRunResponses_api];

export type GetSensitivitiesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/parameters/sensitivities/";
};

export type GetSensitivitiesError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getSensitivitiesError = GetSensitivitiesError_api[keyof GetSensitivitiesError_api];

export type GetSensitivitiesResponses_api = {
    /**
     * Response Get Sensitivities
     *
     * Successful Response
     */
    200: Array<EnsembleSensitivity_api>;
};

export type getSensitivitiesResponse = GetSensitivitiesResponses_api[keyof GetSensitivitiesResponses_api];

export type GetGridModelsInfoData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization
         */
        realization_num: number;
        zCacheBust?: string;
    };
    url: "/grid3d/grid_models_info/";
};

export type GetGridModelsInfoError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getGridModelsInfoError = GetGridModelsInfoError_api[keyof GetGridModelsInfoError_api];

export type GetGridModelsInfoResponses_api = {
    /**
     * Response Get Grid Models Info
     *
     * Successful Response
     */
    200: Array<Grid3DInfo_api>;
};

export type getGridModelsInfoResponse = GetGridModelsInfoResponses_api[keyof GetGridModelsInfoResponses_api];

export type GetGridSurfaceData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid Name
         *
         * Grid name
         */
        grid_name: string;
        /**
         * Realization Num
         *
         * Realization
         */
        realization_num: number;
        /**
         * I Min
         *
         * Min i index
         */
        i_min?: number;
        /**
         * I Max
         *
         * Max i index
         */
        i_max?: number;
        /**
         * J Min
         *
         * Min j index
         */
        j_min?: number;
        /**
         * J Max
         *
         * Max j index
         */
        j_max?: number;
        /**
         * K Min
         *
         * Min k index
         */
        k_min?: number;
        /**
         * K Max
         *
         * Max k index
         */
        k_max?: number;
        zCacheBust?: string;
    };
    url: "/grid3d/grid_surface";
};

export type GetGridSurfaceError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getGridSurfaceError = GetGridSurfaceError_api[keyof GetGridSurfaceError_api];

export type GetGridSurfaceResponses_api = {
    /**
     * Successful Response
     */
    200: Grid3DGeometry_api;
};

export type getGridSurfaceResponse = GetGridSurfaceResponses_api[keyof GetGridSurfaceResponses_api];

export type GetGridParameterData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid Name
         *
         * Grid name
         */
        grid_name: string;
        /**
         * Parameter Name
         *
         * Grid parameter
         */
        parameter_name: string;
        /**
         * Realization Num
         *
         * Realization
         */
        realization_num: number;
        /**
         * Parameter Time Or Interval Str
         *
         * Time point or time interval string
         */
        parameter_time_or_interval_str?: string | null;
        /**
         * I Min
         *
         * Min i index
         */
        i_min?: number;
        /**
         * I Max
         *
         * Max i index
         */
        i_max?: number;
        /**
         * J Min
         *
         * Min j index
         */
        j_min?: number;
        /**
         * J Max
         *
         * Max j index
         */
        j_max?: number;
        /**
         * K Min
         *
         * Min k index
         */
        k_min?: number;
        /**
         * K Max
         *
         * Max k index
         */
        k_max?: number;
        zCacheBust?: string;
    };
    url: "/grid3d/grid_parameter";
};

export type GetGridParameterError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getGridParameterError = GetGridParameterError_api[keyof GetGridParameterError_api];

export type GetGridParameterResponses_api = {
    /**
     * Successful Response
     */
    200: Grid3DMappedProperty_api;
};

export type getGridParameterResponse = GetGridParameterResponses_api[keyof GetGridParameterResponses_api];

export type PostGetPolylineIntersectionData_api = {
    body: BodyPostGetPolylineIntersection_api;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Grid Name
         *
         * Grid name
         */
        grid_name: string;
        /**
         * Parameter Name
         *
         * Grid parameter
         */
        parameter_name: string;
        /**
         * Realization Num
         *
         * Realization
         */
        realization_num: number;
        /**
         * Parameter Time Or Interval Str
         *
         * Time point or time interval string
         */
        parameter_time_or_interval_str?: string | null;
        zCacheBust?: string;
    };
    url: "/grid3d/get_polyline_intersection";
};

export type PostGetPolylineIntersectionError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postGetPolylineIntersectionError =
    PostGetPolylineIntersectionError_api[keyof PostGetPolylineIntersectionError_api];

export type PostGetPolylineIntersectionResponses_api = {
    /**
     * Successful Response
     */
    200: PolylineIntersection_api;
};

export type postGetPolylineIntersectionResponse =
    PostGetPolylineIntersectionResponses_api[keyof PostGetPolylineIntersectionResponses_api];

export type GetRealizationFlowNetworkData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         *
         * Realization
         */
        realization: number;
        /**
         * Resampling frequency
         */
        resampling_frequency: Frequency_api;
        /**
         * Node Type Set
         *
         * Node types
         */
        node_type_set: Array<NodeType_api>;
        zCacheBust?: string;
    };
    url: "/flow_network/realization_flow_network/";
};

export type GetRealizationFlowNetworkError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getRealizationFlowNetworkError =
    GetRealizationFlowNetworkError_api[keyof GetRealizationFlowNetworkError_api];

export type GetRealizationFlowNetworkResponses_api = {
    /**
     * Successful Response
     */
    200: FlowNetworkData_api;
};

export type getRealizationFlowNetworkResponse =
    GetRealizationFlowNetworkResponses_api[keyof GetRealizationFlowNetworkResponses_api];

export type GetTableDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         *
         * Realization number
         */
        realization: number;
        zCacheBust?: string;
    };
    url: "/pvt/table_data/";
};

export type GetTableDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getTableDataError = GetTableDataError_api[keyof GetTableDataError_api];

export type GetTableDataResponses_api = {
    /**
     * Response Get Table Data
     *
     * Successful Response
     */
    200: Array<PvtData_api>;
};

export type getTableDataResponse = GetTableDataResponses_api[keyof GetTableDataResponses_api];

export type GetWellCompletionsDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional realizations to include, list encoded as string. If not specified, all realizations will be returned.
         */
        realizations_encoded_as_uint_list_str?: number | string | null;
        zCacheBust?: string;
    };
    url: "/well_completions/well_completions_data/";
};

export type GetWellCompletionsDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellCompletionsDataError = GetWellCompletionsDataError_api[keyof GetWellCompletionsDataError_api];

export type GetWellCompletionsDataResponses_api = {
    /**
     * Successful Response
     */
    200: WellCompletionsData_api;
};

export type getWellCompletionsDataResponse =
    GetWellCompletionsDataResponses_api[keyof GetWellCompletionsDataResponses_api];

export type GetDrilledWellboreHeadersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Field Identifier
         *
         * Official field identifier
         */
        field_identifier: string;
        zCacheBust?: string;
    };
    url: "/well/drilled_wellbore_headers/";
};

export type GetDrilledWellboreHeadersError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getDrilledWellboreHeadersError =
    GetDrilledWellboreHeadersError_api[keyof GetDrilledWellboreHeadersError_api];

export type GetDrilledWellboreHeadersResponses_api = {
    /**
     * Response Get Drilled Wellbore Headers
     *
     * Successful Response
     */
    200: Array<WellboreHeader_api>;
};

export type getDrilledWellboreHeadersResponse =
    GetDrilledWellboreHeadersResponses_api[keyof GetDrilledWellboreHeadersResponses_api];

export type GetWellTrajectoriesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Field Identifier
         *
         * Official field identifier
         */
        field_identifier: string;
        /**
         * Wellbore Uuids
         *
         * Optional subset of wellbore uuids
         */
        wellbore_uuids?: Array<string> | null;
        zCacheBust?: string;
    };
    url: "/well/well_trajectories/";
};

export type GetWellTrajectoriesError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellTrajectoriesError = GetWellTrajectoriesError_api[keyof GetWellTrajectoriesError_api];

export type GetWellTrajectoriesResponses_api = {
    /**
     * Response Get Well Trajectories
     *
     * Successful Response
     */
    200: Array<WellboreTrajectory_api>;
};

export type getWellTrajectoriesResponse = GetWellTrajectoriesResponses_api[keyof GetWellTrajectoriesResponses_api];

export type GetWellborePickIdentifiersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Strat Column Identifier
         *
         * Stratigraphic column identifier
         */
        strat_column_identifier: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_pick_identifiers/";
};

export type GetWellborePickIdentifiersError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellborePickIdentifiersError =
    GetWellborePickIdentifiersError_api[keyof GetWellborePickIdentifiersError_api];

export type GetWellborePickIdentifiersResponses_api = {
    /**
     * Response Get Wellbore Pick Identifiers
     *
     * Successful Response
     */
    200: Array<string>;
};

export type getWellborePickIdentifiersResponse =
    GetWellborePickIdentifiersResponses_api[keyof GetWellborePickIdentifiersResponses_api];

export type GetWellborePicksForPickIdentifierData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Field Identifier
         *
         * Official field identifier
         */
        field_identifier: string;
        /**
         * Pick Identifier
         *
         * Pick identifier
         */
        pick_identifier: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_picks_for_pick_identifier/";
};

export type GetWellborePicksForPickIdentifierError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellborePicksForPickIdentifierError =
    GetWellborePicksForPickIdentifierError_api[keyof GetWellborePicksForPickIdentifierError_api];

export type GetWellborePicksForPickIdentifierResponses_api = {
    /**
     * Response Get Wellbore Picks For Pick Identifier
     *
     * Successful Response
     */
    200: Array<WellborePick_api>;
};

export type getWellborePicksForPickIdentifierResponse =
    GetWellborePicksForPickIdentifierResponses_api[keyof GetWellborePicksForPickIdentifierResponses_api];

export type DeprecatedGetWellborePicksForWellboreData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        zCacheBust?: string;
    };
    url: "/well/deprecated_wellbore_picks_for_wellbore/";
};

export type DeprecatedGetWellborePicksForWellboreError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type deprecatedGetWellborePicksForWellboreError =
    DeprecatedGetWellborePicksForWellboreError_api[keyof DeprecatedGetWellborePicksForWellboreError_api];

export type DeprecatedGetWellborePicksForWellboreResponses_api = {
    /**
     * Response Deprecated Get Wellbore Picks For Wellbore
     *
     * Successful Response
     */
    200: Array<WellborePick_api>;
};

export type deprecatedGetWellborePicksForWellboreResponse =
    DeprecatedGetWellborePicksForWellboreResponses_api[keyof DeprecatedGetWellborePicksForWellboreResponses_api];

export type GetWellborePicksInStratColumnData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        /**
         * Strat Column Identifier
         *
         * Filter by stratigraphic column
         */
        strat_column_identifier: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_picks_in_strat_column";
};

export type GetWellborePicksInStratColumnError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellborePicksInStratColumnError =
    GetWellborePicksInStratColumnError_api[keyof GetWellborePicksInStratColumnError_api];

export type GetWellborePicksInStratColumnResponses_api = {
    /**
     * Response Get Wellbore Picks In Strat Column
     *
     * Successful Response
     */
    200: Array<WellborePick_api>;
};

export type getWellborePicksInStratColumnResponse =
    GetWellborePicksInStratColumnResponses_api[keyof GetWellborePicksInStratColumnResponses_api];

export type GetWellboreStratigraphicColumnsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_stratigraphic_columns/";
};

export type GetWellboreStratigraphicColumnsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellboreStratigraphicColumnsError =
    GetWellboreStratigraphicColumnsError_api[keyof GetWellboreStratigraphicColumnsError_api];

export type GetWellboreStratigraphicColumnsResponses_api = {
    /**
     * Response Get Wellbore Stratigraphic Columns
     *
     * Successful Response
     */
    200: Array<StratigraphicColumn_api>;
};

export type getWellboreStratigraphicColumnsResponse =
    GetWellboreStratigraphicColumnsResponses_api[keyof GetWellboreStratigraphicColumnsResponses_api];

export type GetWellboreCompletionsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_completions/";
};

export type GetWellboreCompletionsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellboreCompletionsError = GetWellboreCompletionsError_api[keyof GetWellboreCompletionsError_api];

export type GetWellboreCompletionsResponses_api = {
    /**
     * Response Get Wellbore Completions
     *
     * Successful Response
     */
    200: Array<WellboreCompletion_api>;
};

export type getWellboreCompletionsResponse =
    GetWellboreCompletionsResponses_api[keyof GetWellboreCompletionsResponses_api];

export type GetWellboreCasingsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_casings/";
};

export type GetWellboreCasingsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellboreCasingsError = GetWellboreCasingsError_api[keyof GetWellboreCasingsError_api];

export type GetWellboreCasingsResponses_api = {
    /**
     * Response Get Wellbore Casings
     *
     * Successful Response
     */
    200: Array<WellboreCasing_api>;
};

export type getWellboreCasingsResponse = GetWellboreCasingsResponses_api[keyof GetWellboreCasingsResponses_api];

export type GetWellborePerforationsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        zCacheBust?: string;
    };
    url: "/well/wellbore_perforations/";
};

export type GetWellborePerforationsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellborePerforationsError = GetWellborePerforationsError_api[keyof GetWellborePerforationsError_api];

export type GetWellborePerforationsResponses_api = {
    /**
     * Response Get Wellbore Perforations
     *
     * Successful Response
     */
    200: Array<WellborePerforation_api>;
};

export type getWellborePerforationsResponse =
    GetWellborePerforationsResponses_api[keyof GetWellborePerforationsResponses_api];

export type GetWellboreLogCurveHeadersData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        /**
         * Sources
         *
         * Sources to fetch well-logs from.
         */
        sources?: Array<WellLogCurveSourceEnum_api>;
        zCacheBust?: string;
    };
    url: "/well/wellbore_log_curve_headers/";
};

export type GetWellboreLogCurveHeadersError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getWellboreLogCurveHeadersError =
    GetWellboreLogCurveHeadersError_api[keyof GetWellboreLogCurveHeadersError_api];

export type GetWellboreLogCurveHeadersResponses_api = {
    /**
     * Response Get Wellbore Log Curve Headers
     *
     * Successful Response
     */
    200: Array<WellboreLogCurveHeader_api>;
};

export type getWellboreLogCurveHeadersResponse =
    GetWellboreLogCurveHeadersResponses_api[keyof GetWellboreLogCurveHeadersResponses_api];

export type GetLogCurveDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Wellbore Uuid
         *
         * Wellbore uuid
         */
        wellbore_uuid: string;
        /**
         * Log Name
         *
         * Log identifier
         */
        log_name: string;
        /**
         * Curve Name
         *
         * Curve identifier
         */
        curve_name: string;
        /**
         * Source to fetch well-logs from.
         */
        source?: WellLogCurveSourceEnum_api;
        zCacheBust?: string;
    };
    url: "/well/log_curve_data/";
};

export type GetLogCurveDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getLogCurveDataError = GetLogCurveDataError_api[keyof GetLogCurveDataError_api];

export type GetLogCurveDataResponses_api = {
    /**
     * Successful Response
     */
    200: WellboreLogCurveData_api;
};

export type getLogCurveDataResponse = GetLogCurveDataResponses_api[keyof GetLogCurveDataResponses_api];

export type GetSeismicCubeMetaListData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/seismic/seismic_cube_meta_list/";
};

export type GetSeismicCubeMetaListError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getSeismicCubeMetaListError = GetSeismicCubeMetaListError_api[keyof GetSeismicCubeMetaListError_api];

export type GetSeismicCubeMetaListResponses_api = {
    /**
     * Response Get Seismic Cube Meta List
     *
     * Successful Response
     */
    200: Array<SeismicCubeMeta_api>;
};

export type getSeismicCubeMetaListResponse =
    GetSeismicCubeMetaListResponses_api[keyof GetSeismicCubeMetaListResponses_api];

export type GetInlineSliceData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Seismic Attribute
         *
         * Seismic cube attribute
         */
        seismic_attribute: string;
        /**
         * Time Or Interval Str
         *
         * Timestamp or timestep
         */
        time_or_interval_str: string;
        /**
         * Observed
         *
         * Observed or simulated
         */
        observed: boolean;
        /**
         * Inline Number
         *
         * Inline number
         */
        inline_number: number;
        zCacheBust?: string;
    };
    url: "/seismic/get_inline_slice/";
};

export type GetInlineSliceError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getInlineSliceError = GetInlineSliceError_api[keyof GetInlineSliceError_api];

export type GetInlineSliceResponses_api = {
    /**
     * Successful Response
     */
    200: SeismicSliceData_api;
};

export type getInlineSliceResponse = GetInlineSliceResponses_api[keyof GetInlineSliceResponses_api];

export type GetCrosslineSliceData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Seismic Attribute
         *
         * Seismic cube attribute
         */
        seismic_attribute: string;
        /**
         * Time Or Interval Str
         *
         * Timestamp or timestep
         */
        time_or_interval_str: string;
        /**
         * Observed
         *
         * Observed or simulated
         */
        observed: boolean;
        /**
         * Crossline Num
         *
         * Crossline number
         */
        crossline_num: number;
        zCacheBust?: string;
    };
    url: "/seismic/get_crossline_slice/";
};

export type GetCrosslineSliceError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getCrosslineSliceError = GetCrosslineSliceError_api[keyof GetCrosslineSliceError_api];

export type GetCrosslineSliceResponses_api = {
    /**
     * Successful Response
     */
    200: SeismicSliceData_api;
};

export type getCrosslineSliceResponse = GetCrosslineSliceResponses_api[keyof GetCrosslineSliceResponses_api];

export type GetDepthSliceData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Seismic Attribute
         *
         * Seismic cube attribute
         */
        seismic_attribute: string;
        /**
         * Time Or Interval Str
         *
         * Timestamp or timestep
         */
        time_or_interval_str: string;
        /**
         * Observed
         *
         * Observed or simulated
         */
        observed: boolean;
        /**
         * Depth Slice Num
         *
         * Depth slice number
         */
        depth_slice_num: number;
        zCacheBust?: string;
    };
    url: "/seismic/get_depth_slice/";
};

export type GetDepthSliceError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getDepthSliceError = GetDepthSliceError_api[keyof GetDepthSliceError_api];

export type GetDepthSliceResponses_api = {
    /**
     * Successful Response
     */
    200: SeismicSliceData_api;
};

export type getDepthSliceResponse = GetDepthSliceResponses_api[keyof GetDepthSliceResponses_api];

export type GetSeismicSlicesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Seismic Attribute
         *
         * Seismic cube attribute
         */
        seismic_attribute: string;
        /**
         * Time Or Interval Str
         *
         * Timestamp or timestep
         */
        time_or_interval_str: string;
        /**
         * Observed
         *
         * Observed or simulated
         */
        observed: boolean;
        /**
         * Inline Number
         *
         * Inline number
         */
        inline_number: number;
        /**
         * Crossline Number
         *
         * Crossline number
         */
        crossline_number: number;
        /**
         * Depth Slice Number
         *
         * Depth slice number
         */
        depth_slice_number: number;
        zCacheBust?: string;
    };
    url: "/seismic/get_seismic_slices/";
};

export type GetSeismicSlicesError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getSeismicSlicesError = GetSeismicSlicesError_api[keyof GetSeismicSlicesError_api];

export type GetSeismicSlicesResponses_api = {
    /**
     * Response Get Seismic Slices
     *
     * Successful Response
     */
    200: [SeismicSliceData_api, SeismicSliceData_api, SeismicSliceData_api];
};

export type getSeismicSlicesResponse = GetSeismicSlicesResponses_api[keyof GetSeismicSlicesResponses_api];

export type PostGetSeismicFenceData_api = {
    body: BodyPostGetSeismicFence_api;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Seismic Attribute
         *
         * Seismic cube attribute
         */
        seismic_attribute: string;
        /**
         * Time Or Interval Str
         *
         * Timestamp or timestep
         */
        time_or_interval_str: string;
        /**
         * Observed
         *
         * Observed or simulated
         */
        observed: boolean;
        zCacheBust?: string;
    };
    url: "/seismic/get_seismic_fence/";
};

export type PostGetSeismicFenceError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type postGetSeismicFenceError = PostGetSeismicFenceError_api[keyof PostGetSeismicFenceError_api];

export type PostGetSeismicFenceResponses_api = {
    /**
     * Successful Response
     */
    200: SeismicFenceData_api;
};

export type postGetSeismicFenceResponse = PostGetSeismicFenceResponses_api[keyof PostGetSeismicFenceResponses_api];

export type GetPolygonsDirectoryData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/polygons/polygons_directory/";
};

export type GetPolygonsDirectoryError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getPolygonsDirectoryError = GetPolygonsDirectoryError_api[keyof GetPolygonsDirectoryError_api];

export type GetPolygonsDirectoryResponses_api = {
    /**
     * Response Get Polygons Directory
     *
     * Successful Response
     */
    200: Array<PolygonsMeta_api>;
};

export type getPolygonsDirectoryResponse = GetPolygonsDirectoryResponses_api[keyof GetPolygonsDirectoryResponses_api];

export type GetPolygonsDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization Num
         *
         * Realization number
         */
        realization_num: number;
        /**
         * Name
         *
         * Surface name
         */
        name: string;
        /**
         * Attribute
         *
         * Surface attribute
         */
        attribute: string;
        zCacheBust?: string;
    };
    url: "/polygons/polygons_data/";
};

export type GetPolygonsDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getPolygonsDataError = GetPolygonsDataError_api[keyof GetPolygonsDataError_api];

export type GetPolygonsDataResponses_api = {
    /**
     * Response Get Polygons Data
     *
     * Successful Response
     */
    200: Array<PolygonData_api>;
};

export type getPolygonsDataResponse = GetPolygonsDataResponses_api[keyof GetPolygonsDataResponses_api];

export type GetUserInfoData_api = {
    body?: never;
    path: {
        /**
         * User Id Or Email
         *
         * User email, graph-id or 'me' for the authenticated user
         */
        user_id_or_email: string;
    };
    query?: {
        zCacheBust?: string;
    };
    url: "/graph/user_info/{user_id_or_email}";
};

export type GetUserInfoError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getUserInfoError = GetUserInfoError_api[keyof GetUserInfoError_api];

export type GetUserInfoResponses_api = {
    /**
     * Response Get User Info
     *
     * Successful Response
     */
    200: GraphUser_api | null;
};

export type getUserInfoResponse = GetUserInfoResponses_api[keyof GetUserInfoResponses_api];

export type GetUserPhotoData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * User Id Or Email
         *
         * User email, graph-id, or 'me' for the authenticated user
         */
        user_id_or_email: string;
        zCacheBust?: string;
    };
    url: "/graph/user_photo/";
};

export type GetUserPhotoError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getUserPhotoError = GetUserPhotoError_api[keyof GetUserPhotoError_api];

export type GetUserPhotoResponses_api = {
    /**
     * Successful Response
     */
    200: GraphUserPhoto_api;
};

export type getUserPhotoResponse = GetUserPhotoResponses_api[keyof GetUserPhotoResponses_api];

export type GetObservationsData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        zCacheBust?: string;
    };
    url: "/observations/observations/";
};

export type GetObservationsError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getObservationsError = GetObservationsError_api[keyof GetObservationsError_api];

export type GetObservationsResponses_api = {
    /**
     * Successful Response
     */
    200: Observations_api;
};

export type getObservationsResponse = GetObservationsResponses_api[keyof GetObservationsResponses_api];

export type GetTableDefinitionData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        zCacheBust?: string;
    };
    url: "/rft/table_definition";
};

export type GetTableDefinitionError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getTableDefinitionError = GetTableDefinitionError_api[keyof GetTableDefinitionError_api];

export type GetTableDefinitionResponses_api = {
    /**
     * Successful Response
     */
    200: RftTableDefinition_api;
};

export type getTableDefinitionResponse = GetTableDefinitionResponses_api[keyof GetTableDefinitionResponses_api];

export type GetRealizationDataData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Well Name
         *
         * Well name
         */
        well_name: string;
        /**
         * Response Name
         *
         * Response name
         */
        response_name: string;
        /**
         * Timestamps Utc Ms
         *
         * Timestamps utc ms
         */
        timestamps_utc_ms?: Array<number> | null;
        /**
         * Realizations Encoded As Uint List Str
         *
         * Optional list of realizations encoded as string to include. If not specified, all realizations will be included.
         */
        realizations_encoded_as_uint_list_str?: string | null;
        zCacheBust?: string;
    };
    url: "/rft/realization_data";
};

export type GetRealizationDataError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getRealizationDataError = GetRealizationDataError_api[keyof GetRealizationDataError_api];

export type GetRealizationDataResponses_api = {
    /**
     * Response Get Realization Data
     *
     * Successful Response
     */
    200: Array<RftRealizationData_api>;
};

export type getRealizationDataResponse = GetRealizationDataResponses_api[keyof GetRealizationDataResponses_api];

export type GetVfpTableNamesData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         *
         * Realization
         */
        realization: number;
        zCacheBust?: string;
    };
    url: "/vfp/vfp_table_names/";
};

export type GetVfpTableNamesError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getVfpTableNamesError = GetVfpTableNamesError_api[keyof GetVfpTableNamesError_api];

export type GetVfpTableNamesResponses_api = {
    /**
     * Response Get Vfp Table Names
     *
     * Successful Response
     */
    200: Array<string>;
};

export type getVfpTableNamesResponse = GetVfpTableNamesResponses_api[keyof GetVfpTableNamesResponses_api];

export type GetVfpTableData_api = {
    body?: never;
    path?: never;
    query: {
        /**
         * Case Uuid
         *
         * Sumo case uuid
         */
        case_uuid: string;
        /**
         * Ensemble Name
         *
         * Ensemble name
         */
        ensemble_name: string;
        /**
         * Realization
         *
         * Realization
         */
        realization: number;
        /**
         * Vfp Table Name
         *
         * VFP table name
         */
        vfp_table_name: string;
        zCacheBust?: string;
    };
    url: "/vfp/vfp_table/";
};

export type GetVfpTableError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getVfpTableError = GetVfpTableError_api[keyof GetVfpTableError_api];

export type GetVfpTableResponses_api = {
    /**
     * Response Get Vfp Table
     *
     * Successful Response
     */
    200: VfpProdTable_api | VfpInjTable_api;
};

export type getVfpTableResponse = GetVfpTableResponses_api[keyof GetVfpTableResponses_api];

export type LoginRouteData_api = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Redirect Url After Login
         */
        redirect_url_after_login?: string | null;
        zCacheBust?: string;
    };
    url: "/login";
};

export type LoginRouteError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type loginRouteError = LoginRouteError_api[keyof LoginRouteError_api];

export type LoginRouteResponses_api = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthorizedCallbackRouteData_api = {
    body?: never;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/auth-callback";
};

export type AuthorizedCallbackRouteResponses_api = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAliveData_api = {
    body?: never;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/alive";
};

export type GetAliveResponses_api = {
    /**
     * Response Get Alive
     *
     * Successful Response
     */
    200: string;
};

export type getAliveResponse = GetAliveResponses_api[keyof GetAliveResponses_api];

export type GetAliveProtectedData_api = {
    body?: never;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/alive_protected";
};

export type GetAliveProtectedResponses_api = {
    /**
     * Response Get Alive Protected
     *
     * Successful Response
     */
    200: string;
};

export type getAliveProtectedResponse = GetAliveProtectedResponses_api[keyof GetAliveProtectedResponses_api];

export type PostLogoutData_api = {
    body?: never;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/logout";
};

export type PostLogoutResponses_api = {
    /**
     * Response Post Logout
     *
     * Successful Response
     */
    200: string;
};

export type postLogoutResponse = PostLogoutResponses_api[keyof PostLogoutResponses_api];

export type GetLoggedInUserData_api = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Includegraphapiinfo
         *
         * Set to true to include user avatar and display name from Microsoft Graph API
         */
        includeGraphApiInfo?: boolean;
        zCacheBust?: string;
    };
    url: "/logged_in_user";
};

export type GetLoggedInUserError_api = {
    /**
     * Validation Error
     */
    422: HTTPValidationError_api;
};

export type getLoggedInUserError = GetLoggedInUserError_api[keyof GetLoggedInUserError_api];

export type GetLoggedInUserResponses_api = {
    /**
     * Successful Response
     */
    200: UserInfo_api;
};

export type getLoggedInUserResponse = GetLoggedInUserResponses_api[keyof GetLoggedInUserResponses_api];

export type RootData_api = {
    body?: never;
    path?: never;
    query?: {
        zCacheBust?: string;
    };
    url: "/";
};

export type RootResponses_api = {
    /**
     * Response Root
     *
     * Successful Response
     */
    200: string;
};

export type rootResponse = RootResponses_api[keyof RootResponses_api];
